[{"title":"linux 常用命令(一) —— 端口检测","url":"/2019-09-26/linux-sh/","content":"<h3 id=\"查看端口\"><a href=\"#查看端口\" class=\"headerlink\" title=\"查看端口\"></a>查看端口</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsof -i:8800</span><br><span class=\"line\">netstat -luntp|grep 8080</span><br><span class=\"line\">telnet 127.0.0.1 8080</span><br><span class=\"line\">nc -vz localhost 8080</span><br></pre></td></tr></table></figure>\n\n<p>### </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找目录下的所有文件中是否含有某个字符串 </span></span><br><span class=\"line\">find .|xargs grep -ri <span class=\"string\">\"IBM\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找目录下的所有文件中是否含有某个字符串,并且只打印出文件名 </span></span><br><span class=\"line\">find .|xargs grep -ri <span class=\"string\">\"IBM\"</span> -l</span><br></pre></td></tr></table></figure>","categories":["常用命令"],"tags":["linux"]},{"title":"kafkaServerStartable.startup() 启动时，注册zk信息","url":"/2019-10-09/kafkaSourceCode-analysis/","content":"<h2 id=\"initZkClient-time-启动-zkClient\"><a href=\"#initZkClient-time-启动-zkClient\" class=\"headerlink\" title=\"initZkClient(time) 启动 zkClient\"></a>initZkClient(time) 启动 zkClient</h2><h3 id=\"创建-根目录-即，server-properties-文件中的-zookeeper-connect-配置。如下配置中，就会以-kafka-debug-为根目录进行创建。\"><a href=\"#创建-根目录-即，server-properties-文件中的-zookeeper-connect-配置。如下配置中，就会以-kafka-debug-为根目录进行创建。\" class=\"headerlink\" title=\"创建 根目录,即，server.properties 文件中的 zookeeper.connect 配置。如下配置中，就会以 /kafka-debug 为根目录进行创建。\"></a>创建 <strong>根目录</strong>,即，<code>server.properties</code> 文件中的 <code>zookeeper.connect</code> 配置。如下配置中，就会以 <code>/kafka-debug</code> 为根目录进行创建。</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">zookeeper.connect=tx-node1:2181/kafka-debug</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-kafka-server-内部业务服务的目录\"><a href=\"#创建-kafka-server-内部业务服务的目录\" class=\"headerlink\" title=\"创建 kafka server 内部业务服务的目录\"></a>创建 kafka server 内部业务服务的目录</h3><p>创建的配置项如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 = <span class=\"string\">\"/consumers\"</span></span><br><span class=\"line\">1 = <span class=\"string\">\"/brokers/ids\"</span></span><br><span class=\"line\">2 = <span class=\"string\">\"/brokers/topics\"</span></span><br><span class=\"line\">3 = <span class=\"string\">\"/config/changes\"</span></span><br><span class=\"line\">4 = <span class=\"string\">\"/admin/delete_topics\"</span></span><br><span class=\"line\">5 = <span class=\"string\">\"/brokers/seqid\"</span></span><br><span class=\"line\">6 = <span class=\"string\">\"/isr_change_notification\"</span></span><br><span class=\"line\">7 = <span class=\"string\">\"/latest_producer_id_block\"</span></span><br><span class=\"line\">8 = <span class=\"string\">\"/log_dir_event_notification\"</span></span><br><span class=\"line\">9 = <span class=\"string\">\"/config/topics\"</span></span><br><span class=\"line\">10 = <span class=\"string\">\"/config/clients\"</span></span><br><span class=\"line\">11 = <span class=\"string\">\"/config/users\"</span></span><br><span class=\"line\">12 = <span class=\"string\">\"/config/brokers\"</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-09/kafkaSourceCode-analysis/WechatIMG841.png\" alt=\"initZkClient 方法在 zk 中需要创建的目录\"></p>\n<h3 id=\"initZkClient-方法完成后，zk-目录结果\"><a href=\"#initZkClient-方法完成后，zk-目录结果\" class=\"headerlink\" title=\"initZkClient 方法完成后，zk 目录结果\"></a>initZkClient 方法完成后，zk 目录结果</h3><p><img src=\"/2019-10-09/kafkaSourceCode-analysis/WechatIMG838.png\" alt=\"initZkClient 方法执行后zk结果\"></p>\n<h2 id=\"clusterId-getOrGenerateClusterId-zkClient-cluster-id-创建\"><a href=\"#clusterId-getOrGenerateClusterId-zkClient-cluster-id-创建\" class=\"headerlink\" title=\"_clusterId = getOrGenerateClusterId(zkClient): /cluster/id 创建\"></a>_clusterId = getOrGenerateClusterId(zkClient): /cluster/id 创建</h2><p>getOrGenerateClusterId 方法完成后 zk 目录结果<br><img src=\"/2019-10-09/kafkaSourceCode-analysis/WechatIMG839.png\" alt=\"getOrGenerateClusterId 方法执行后zk结果\"></p>\n","categories":["kafka"],"tags":["kafka","源码"]},{"title":"kafkaServerStartable.startup() 主流程","url":"/2019-10-10/kafkaSourceCode-analysis/","content":"<h2 id=\"KafkaServer-startup-方法主流程\"><a href=\"#KafkaServer-startup-方法主流程\" class=\"headerlink\" title=\"KafkaServer.startup() 方法主流程\"></a>KafkaServer.startup() 方法主流程</h2><ul>\n<li><p>shutdown &amp; startupComplete 状态校验</p>\n</li>\n<li><p><strong>isStartingUp</strong> 标识设置为 true, 原子操作</p>\n</li>\n<li><p><strong><code>brokerState.currentState</code></strong> 标识为 Starting</p>\n</li>\n<li><p>initZkClient: kafka 启动时，保证 kafka 基础业务目录和文件已创建</p>\n</li>\n<li><p>getOrGenerateClusterId: <code>/cluster/id</code> 创建</p>\n</li>\n<li><p>config.dynamicConfig.initialize(zkClient)</p>\n</li>\n<li><p><strong>kafkaScheduler</strong> 初始化 &amp; 启动 : kafkaScheduler.startup()</p>\n</li>\n<li><p><strong>metrics</strong> 初始化: new Metrics(…)</p>\n</li>\n<li><p><strong>_brokerTopicStats</strong> 初始化: new BrokerTopicStats</p>\n</li>\n<li><p><strong>quotaManagers</strong> 初始化: QuotaFactory.instantiate(…)</p>\n</li>\n<li><p>notifyClusterListeners(…)</p>\n</li>\n<li><p><strong>logDirFailureChannel</strong> 初始化: new LogDirFailureChannel(…)</p>\n</li>\n<li><p><strong>logManager</strong> 初始化 &amp; 启动: logManager.startup()</p>\n</li>\n<li><p><strong>metadataCache</strong> 初始化: new MetadataCache(…)</p>\n</li>\n<li><p><strong>tokenCache</strong> 初始化: new DelegationTokenCache(…)</p>\n</li>\n<li><p><strong>credentialProvider</strong> 初始化: new CredentialProvider(…)</p>\n</li>\n<li><p><strong>socketServer</strong> 初始化 &amp; 启动: socketServer.startup(..)</p>\n</li>\n<li><p><strong>replicaManager</strong> 初始化 &amp; 启动: replicaManager.startup()</p>\n</li>\n<li><p>创建 <strong>brokerInfo</strong> 并注册到 zk 中: zkClient.registerBrokerInZk(brokerInfo)</p>\n</li>\n<li><p>checkpointBrokerId(config.brokerId)</p>\n</li>\n<li><p><strong>tokenManager</strong> 初始化 &amp; 启动: tokenManager.startup()</p>\n</li>\n<li><p><strong>kafkaController</strong> 初始化 &amp; 启动: kafkaController.startup()</p>\n</li>\n<li><p><strong>adminManager</strong> 初始化: new AdminManager(…)</p>\n</li>\n<li><p><strong>groupCoordinator</strong> 初始化 &amp; 启动: groupCoordinator.startup()</p>\n</li>\n<li><p><strong>transactionCoordinator</strong> 初始化 &amp; 启动</p>\n</li>\n<li><p><strong>authorizer</strong> 初始化</p>\n</li>\n<li><p><strong>fetchManager</strong> 初始化</p>\n</li>\n<li><p><strong>apis</strong> 初始化，依赖上面初始化组件</p>\n<ul>\n<li><strong><code>socketServer.requestChannel</code></strong></li>\n<li><strong>replicaManager</strong></li>\n<li><strong>adminManager</strong></li>\n<li><strong>groupCoordinator</strong></li>\n<li><strong>transactionCoordinator</strong></li>\n<li><strong>kafkaController</strong></li>\n<li><strong>zkClient</strong></li>\n<li>config.brokerId</li>\n<li>config: 配置文件</li>\n<li><strong>metadataCache</strong></li>\n<li><strong>metrics</strong></li>\n<li><strong>authorizer</strong></li>\n<li><strong>quotaManagers</strong></li>\n<li><strong>fetchManager</strong></li>\n<li><strong>brokerTopicStats</strong></li>\n<li>clusterId</li>\n<li>time: 配置文件</li>\n<li><strong>tokenManager</strong></li>\n</ul>\n</li>\n<li><p><strong>requestHandlerPool</strong> 初始化，依赖上面初始化的组件</p>\n<ul>\n<li>config.brokerId</li>\n<li><strong><code>socketServer.requestChannel</code></strong></li>\n<li><strong>apis</strong></li>\n<li>time: 配置文件</li>\n<li>config.numIoThreads: 配置文件</li>\n</ul>\n</li>\n<li><p>Mx4jLoader.maybeLoad()</p>\n</li>\n<li><p>config.dynamicConfig.addReconfigurables(…)</p>\n</li>\n<li><p><strong>dynamicConfigHandlers</strong> 映射初始化，Map[String, ConfigHandler]</p>\n<ul>\n<li>ConfigType.Topic  ————&gt;   new TopicConfigHandler(logManager, config, quotaManagers)</li>\n<li>ConfigType.Client ————&gt;   new ClientIdConfigHandler(quotaManagers)</li>\n<li>ConfigType.User   ————&gt;   new UserConfigHandler(quotaManagers, credentialProvider)</li>\n<li>ConfigType.Broker ————&gt;   new BrokerConfigHandler(config, quotaManagers)<br>代码实现如下:<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\">dynamicConfigHandlers = <span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">ConfigHandler</span>](<span class=\"type\">ConfigType</span>.<span class=\"type\">Topic</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">TopicConfigHandler</span>(logManager, config, quotaManagers),</span><br><span class=\"line\">                                               <span class=\"type\">ConfigType</span>.<span class=\"type\">Client</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">ClientIdConfigHandler</span>(quotaManagers),</span><br><span class=\"line\">                                               <span class=\"type\">ConfigType</span>.<span class=\"type\">User</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">UserConfigHandler</span>(quotaManagers, credentialProvider),</span><br><span class=\"line\">                                               <span class=\"type\">ConfigType</span>.<span class=\"type\">Broker</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">BrokerConfigHandler</span>(config, quotaManagers))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>dynamicConfigManager</strong> 初始化 &amp; 启动,依赖上面初始化的组件</p>\n<ul>\n<li><strong>zkClient</strong></li>\n<li><strong>dynamicConfigHandlers</strong></li>\n</ul>\n</li>\n<li><p><strong>socketServer</strong> 启动处理器: socketServer.startProcessors()</p>\n</li>\n<li><p><strong><code>brokerState.currentState</code></strong> 标识为 RunningAsBroker</p>\n</li>\n<li><p><strong>shutdownLatch</strong> 初始化: new CountDownLatch(1)</p>\n</li>\n<li><p><strong>startupComplete</strong> 标识为 true</p>\n</li>\n<li><p><strong>isStartingUp</strong> 标识为 false</p>\n</li>\n</ul>\n","categories":["kafka"],"tags":["kafka","源码"]},{"title":"linux 常用命令(三) —— awk","url":"/2019-10-25/linux-sh/","content":"<h3 id=\"awk-简介\"><a href=\"#awk-简介\" class=\"headerlink\" title=\"awk 简介\"></a>awk 简介</h3><p>awk是一种编程语言（解释性语言，不需要编译），<strong>用于数据截取和报告的工具</strong><br>awk自动搜索输入的文件，并把每个输入行切分成多个字段（字段：根据分隔符分割成的单元）<br>擅长处理数据库和表型数据。适合编写短小一次性程序<br>centos默认的awk使用的是gawk，系统将awk通过软链接来指向gawk<br>可以使用新的内置函数和变量<br><strong>在缺省的情况下，它使用扩展的正则表达式</strong><br>awk不需要声明变量的数据类型，它内置字符串类型和数值类型</p>\n<h3 id=\"awk语法结构\"><a href=\"#awk语法结构\" class=\"headerlink\" title=\"awk语法结构\"></a>awk语法结构</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk [OPTIONS] [--] program filename_list</span><br><span class=\"line\"><span class=\"comment\"># OPTIONS 选项</span></span><br><span class=\"line\"><span class=\"comment\"># -V:                   显示awk版本</span></span><br><span class=\"line\"><span class=\"comment\"># -f program-file:      指定包含了awk命令的文件，不是从命令行参数中去读取,可以通过-f选项指定多个包含awk命令文件  </span></span><br><span class=\"line\"><span class=\"comment\"># -F'fs'</span></span><br><span class=\"line\"><span class=\"comment\"># --field-separator:    指定分隔符即为定义FS变量对应的值</span></span><br><span class=\"line\"><span class=\"comment\"># -v var=val:           在程序开始之前，将val这个值赋给var这个变量</span></span><br><span class=\"line\"><span class=\"comment\"># -d[file]:             将全局变量的类型和最终值排序，并将排序好后的结果打印输出到文件中</span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">'$2 &gt;= 50 &#123; print $1,$2*$3 &#125;'</span> data.txt</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明：</strong></p>\n<ul>\n<li>awk命令后面的程序用单引号引起来，单引号后面的部分为输入文件</li>\n<li>单引号中包围的内容是一个awk程序，是一个program即模式-动作语句（pattern-action）<ul>\n<li>其中模式pattern为’$2&gt;=50’，表示扫描每一个输入的行，如果第二列大于0，则执行动作action，否则不执行action</li>\n<li>动作action为’{ print $1,$2*$3 }’,模式匹配成功后执行的对应动作，该动作用于打印输出第一个字段和第二、三字段的乘积</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试数据</span></span><br><span class=\"line\">cat data.txt</span><br><span class=\"line\">Simon 96 97 99</span><br><span class=\"line\">Bei 92 100 95</span><br><span class=\"line\">Tom 100 92 97</span><br><span class=\"line\">Tim 80 99 99</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;OFS=\":\";ORS=\"\\n\\n\"&#125; BEGIN&#123;print \"name:total_salary\"&#125; &#123;print $1,$2*$3&#125;'</span> date</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat ods_03_xyka_mtdz_20191024.txt|awk -F <span class=\"string\">'|'</span> <span class=\"string\">'&#123;print $5&#125;'</span> &gt; test.txt</span><br><span class=\"line\">cat test.txt|awk <span class=\"string\">'&#123;sum+=$1&#125; END &#123;print \"Sum = \", sum&#125;'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关键字解析\"><a href=\"#关键字解析\" class=\"headerlink\" title=\"关键字解析\"></a>关键字解析</h3><h4 id=\"文本数据提取\"><a href=\"#文本数据提取\" class=\"headerlink\" title=\"文本数据提取\"></a>文本数据提取</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat info.log|awk -F <span class=\"string\">'请求时长:'</span> <span class=\"string\">'$2 == 404 &#123;sum+=$2&#125; END &#123;print sum&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat info.log|awk -F <span class=\"string\">'请求时长:'</span> <span class=\"string\">'$2 == 404 &#123;sum+=$2&#125; END &#123;print sum&#125;'</span>|uniq| sort -rh</span><br><span class=\"line\"><span class=\"comment\"># 去重</span></span><br><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\">awk <span class=\"string\">'!($1 in a)&#123;a[$1];print $1&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 2.</span></span><br><span class=\"line\">sort <span class=\"variable\">$1</span> | uniq </span><br><span class=\"line\"><span class=\"comment\"># 3. </span></span><br><span class=\"line\">awk <span class=\"string\">'!a[$1]++'</span></span><br><span class=\"line\"><span class=\"comment\"># 4.</span></span><br><span class=\"line\">awk <span class=\"string\">'!a[$1]++&#123;print&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反转</span></span><br><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\">perl -e <span class=\"string\">'print reverse &lt;&gt;'</span> filename</span><br><span class=\"line\"><span class=\"comment\"># 2. </span></span><br><span class=\"line\">sed <span class=\"string\">'1!G;h;$!d'</span> filename </span><br><span class=\"line\"><span class=\"comment\"># https://www.cnblogs.com/Raymontian/p/7125026.html</span></span><br><span class=\"line\">nl filename | sort -nr | cut -f2 这个方法很unix风格，使用多命令组合完成某种功能是典型的unix特点</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"json-关键字解析\"><a href=\"#json-关键字解析\" class=\"headerlink\" title=\"json 关键字解析\"></a>json 关键字解析</h4><p>json 解析示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;faces&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;face_token&quot;: &quot;ff5bda3d50e933584a28722afd8f9b2e&quot;,</span><br><span class=\"line\">      &quot;face_rectangle&quot;: &#123;</span><br><span class=\"line\">        &quot;height&quot;: 113,</span><br><span class=\"line\">        &quot;left&quot;: 198,</span><br><span class=\"line\">        &quot;top&quot;: 125,</span><br><span class=\"line\">        &quot;width&quot;: 113</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;attributes&quot;: &#123;</span><br><span class=\"line\">        &quot;age&quot;: &#123;</span><br><span class=\"line\">          &quot;value&quot;: 26</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;gender&quot;: &#123;</span><br><span class=\"line\">          &quot;value&quot;: &quot;Female&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;time_used&quot;: 292,</span><br><span class=\"line\">  &quot;request_id&quot;: &quot;1493524184,9bbee040-d1f0-4681-be0a-96dbf9a4d018&quot;,</span><br><span class=\"line\">  &quot;image_id&quot;: &quot;6kox5v0GjhI9f+MWEc3wIA==&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#      \"face_token\": \"ff5bda3d50e933584a28722afd8f9b2e\",</span></span><br><span class=\"line\">cat test.json | awk -F <span class=\"string\">\"[face_token]\"</span> <span class=\"string\">'/face_token/&#123;print$0&#125;'</span></span><br><span class=\"line\">jq <span class=\"string\">'.faces'</span> test.json|jq <span class=\"string\">'.[0].face_token'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 113</span></span><br><span class=\"line\">jq <span class=\"string\">'.faces[0].face_rectangle.height'</span> test.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#  \"message\": 113</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\">jq <span class=\"string\">'.faces[0].face_rectangle.height | &#123;message: .&#125;'</span> test.json</span><br><span class=\"line\">jq <span class=\"string\">'.faces'</span> test.json|jq <span class=\"string\">'.[]| &#123; message: .face_rectangle.height&#125;'</span></span><br></pre></td></tr></table></figure>\n\n<p>优秀参考链接:<br><a href=\"https://blog.csdn.net/mr_bei/article/details/83112860\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mr_bei/article/details/83112860</a></p>\n","tags":["linux"]},{"title":"提取pfx证书公钥和私钥","url":"/2019-11-05/open-ssl/","content":"<blockquote>\n<p>从pfx提取密钥信息，并转换为key格式（pfx使用pkcs12模式补足）</p>\n</blockquote>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><h3 id=\"提取-pem-格式文件\"><a href=\"#提取-pem-格式文件\" class=\"headerlink\" title=\"提取 pem 格式文件\"></a>提取 pem 格式文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -<span class=\"keyword\">in</span> myssl.pfx -nodes -out server.pem （使用这步骤就ok了，因为pem格式可以打开了）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提取私钥\"><a href=\"#提取私钥\" class=\"headerlink\" title=\"提取私钥\"></a>提取私钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> server.pem -out server.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提出公钥\"><a href=\"#提出公钥\" class=\"headerlink\" title=\"提出公钥\"></a>提出公钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> server.pem -out server.crt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><h3 id=\"提取密钥对（如果pfx证书已加密，会提示输入密码。）\"><a href=\"#提取密钥对（如果pfx证书已加密，会提示输入密码。）\" class=\"headerlink\" title=\"提取密钥对（如果pfx证书已加密，会提示输入密码。）\"></a>提取密钥对（如果pfx证书已加密，会提示输入密码。）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -<span class=\"keyword\">in</span> 1.pfx -nocerts -nodes -out 1.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从密钥对提取私钥\"><a href=\"#从密钥对提取私钥\" class=\"headerlink\" title=\"从密钥对提取私钥\"></a>从密钥对提取私钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> 1.key -out 1_pri.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从密钥对提取公钥\"><a href=\"#从密钥对提取公钥\" class=\"headerlink\" title=\"从密钥对提取公钥\"></a>从密钥对提取公钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> 1.key -pubout -out 1_pub.key</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"因为RSA算法使用的是pkcs8模式补足，需要对提取的私钥进一步处理（可选）\"><a href=\"#因为RSA算法使用的是pkcs8模式补足，需要对提取的私钥进一步处理（可选）\" class=\"headerlink\" title=\"因为RSA算法使用的是pkcs8模式补足，需要对提取的私钥进一步处理（可选）\"></a>因为RSA算法使用的是pkcs8模式补足，需要对提取的私钥进一步处理（可选）</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs8 -<span class=\"keyword\">in</span> 1_pri.key -out 1_pri.p8 -outform der -nocrypt -topk8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法三：代码提取\"><a href=\"#方法三：代码提取\" class=\"headerlink\" title=\"方法三：代码提取\"></a>方法三：代码提取</h2><h3 id=\"java-代码进行提取\"><a href=\"#java-代码进行提取\" class=\"headerlink\" title=\"java 代码进行提取\"></a>java 代码进行提取</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xerces.internal.impl.dv.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.PrivateKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.PublicKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.Certificate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">       readPfx(<span class=\"string\">\"server.pfx\"</span>, <span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">readPfx</span><span class=\"params\">(String certPath, String password)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        KeyStore ks = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(certPath);</span><br><span class=\"line\">        ks.load(fis, password.toCharArray());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"证书类型___:\"</span>+ ks.getType());</span><br><span class=\"line\">        Enumeration enumas = ks.aliases();</span><br><span class=\"line\">        String aliases = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enumas.hasMoreElements())&#123;</span><br><span class=\"line\">            aliases = (String) enumas.nextElement();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"证书别名Alias___:\"</span>+aliases);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Certificate cert = ks.getCertificate(aliases);</span><br><span class=\"line\">        PublicKey pubkey = cert.getPublicKey();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"公钥___:\"</span>+pubkey);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] encoded = pubkey.getEncoded();</span><br><span class=\"line\">        String alg = pubkey.getAlgorithm();</span><br><span class=\"line\">        String format = pubkey.getFormat();</span><br><span class=\"line\">        System.out.println(Base64.encode(encoded));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"is key entry=\"</span> + ks.isKeyEntry(aliases));</span><br><span class=\"line\">        PrivateKey prikey = (PrivateKey) ks.getKey(aliases,password.toCharArray());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"私钥___:\"</span>+prikey);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] priEncode = prikey.getEncoded();</span><br><span class=\"line\">        System.out.println(Base64.encode(priEncode));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","categories":["ssl"],"tags":["open ssl","验签"]},{"title":"mysql 查看锁","url":"/2019-12-10/mysql-lock-query/","content":"<h2 id=\"解除正在死锁的状态有两种方法：\"><a href=\"#解除正在死锁的状态有两种方法：\" class=\"headerlink\" title=\"解除正在死锁的状态有两种方法：\"></a>解除正在死锁的状态有两种方法：</h2><h3 id=\"第一种：\"><a href=\"#第一种：\" class=\"headerlink\" title=\"第一种：\"></a>第一种：</h3><h4 id=\"1-查询是否锁表\"><a href=\"#1-查询是否锁表\" class=\"headerlink\" title=\"1.查询是否锁表\"></a>1.查询是否锁表</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">OPEN</span> <span class=\"keyword\">TABLES</span> <span class=\"keyword\">where</span> In_use &gt; <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-查询进程（如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程）\"><a href=\"#2-查询进程（如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程）\" class=\"headerlink\" title=\"2.查询进程（如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程）\"></a>2.查询进程（如果您有SUPER权限，您可以看到所有线程。否则，您只能看到您自己的线程）</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">processlist</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-12-10/mysql-lock-query/2019052215092259.png\" alt=\"2019-12-10-mysql-lock-query\"></p>\n<p>id 为5的证明一直在等待资源。</p>\n<h4 id=\"3-杀死进程id（就是上面命令的id列）\"><a href=\"#3-杀死进程id（就是上面命令的id列）\" class=\"headerlink\" title=\"3.杀死进程id（就是上面命令的id列）\"></a>3.杀死进程id（就是上面命令的id列）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> id 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种：\"><a href=\"#第二种：\" class=\"headerlink\" title=\"第二种：\"></a>第二种：</h3><h4 id=\"1-查看下在锁的事务\"><a href=\"#1-查看下在锁的事务\" class=\"headerlink\" title=\"1.查看下在锁的事务\"></a>1.查看下在锁的事务</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-12-10/mysql-lock-query/20190522151059327.png\" alt=\"2019-12-10-mysql-lock-query\"></p>\n<h4 id=\"2-杀死进程id（就是上面命令的trx-mysql-thread-id列）\"><a href=\"#2-杀死进程id（就是上面命令的trx-mysql-thread-id列）\" class=\"headerlink\" title=\"2.杀死进程id（就是上面命令的trx_mysql_thread_id列）\"></a>2.杀死进程id（就是上面命令的trx_mysql_thread_id列）</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> 线程ID</span><br></pre></td></tr></table></figure>\n\n<p>例子：<br>查出死锁进程：SHOW PROCESSLIST<br>杀掉进程          KILL 420821;</p>\n<h3 id=\"其它关于查看死锁的命令：\"><a href=\"#其它关于查看死锁的命令：\" class=\"headerlink\" title=\"其它关于查看死锁的命令：\"></a>其它关于查看死锁的命令：</h3><h4 id=\"1：查看当前的事务\"><a href=\"#1：查看当前的事务\" class=\"headerlink\" title=\"1：查看当前的事务\"></a>1：查看当前的事务</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure>\n\n<p>2：查看当前锁定的事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.INNODB_LOCKS;</span><br></pre></td></tr></table></figure>\n\n<p>3：查看当前等锁的事务</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure>\n\n","categories":["mysql"],"tags":["mysql","lock"]},{"title":"charles 从入门到精通","url":"/2019-12-20/charles-study/","content":"<h2 id=\"Charles-从入门到精通\"><a href=\"#Charles-从入门到精通\" class=\"headerlink\" title=\"Charles 从入门到精通\"></a>Charles 从入门到精通</h2><blockquote>\n<p>优秀链接：<a href=\"https://blog.devtang.com/2015/11/14/charles-introduction/\" target=\"_blank\" rel=\"noopener\">Charles 从入门到精通</a></p>\n</blockquote>\n<h3 id=\"Charles-激活码\"><a href=\"#Charles-激活码\" class=\"headerlink\" title=\"Charles 激活码\"></a>Charles 激活码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Charles Proxy License</span><br><span class=\"line\">// 适用于Charles任意版本的注册码，谁还会想要使用破解版呢。</span><br><span class=\"line\">// Charles 4.2目前是最新版，可用。</span><br><span class=\"line\">Registered Name: https://zhile.io</span><br><span class=\"line\">License Key: 48891cf209c6d32bf4</span><br></pre></td></tr></table></figure>","categories":["开发小工具"],"tags":["charles","抓包","软件"]},{"title":"canal-install","url":"/2020-09-15/canal-install/","content":"<h2 id=\"Canal-安装配置\"><a href=\"#Canal-安装配置\" class=\"headerlink\" title=\"Canal 安装配置\"></a>Canal 安装配置</h2><p>Vagrantfile 虚拟机配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vagrant.configure(<span class=\"string\">\"2\"</span>) <span class=\"keyword\">do</span> |config|</span><br><span class=\"line\">  config.vm.box = <span class=\"string\">\"ubuntu/bionic64\"</span></span><br><span class=\"line\">  config.vm.box_check_update = <span class=\"literal\">false</span></span><br><span class=\"line\">  config.vm.provider <span class=\"string\">\"virtualbox\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 设置虚拟机的主机名</span></span><br><span class=\"line\">  config.vm.hostname=<span class=\"string\">\"ubuntu\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 设置虚拟机的IP</span></span><br><span class=\"line\">  config.vm.network :private_network, ip: <span class=\"string\">\"192.168.0.2\"</span></span><br><span class=\"line\">  config.vm.network <span class=\"string\">\"forwarded_port\"</span>, guest: 5601, host: 5061 <span class=\"comment\"># kube-apiserver</span></span><br><span class=\"line\">  config.vm.network <span class=\"string\">\"forwarded_port\"</span>, guest: 9200, host: 9200 <span class=\"comment\"># kubectl proxy</span></span><br><span class=\"line\">  config.vm.network <span class=\"string\">\"forwarded_port\"</span>, guest: 5044, host: 5044 <span class=\"comment\"># harbor</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 设置主机与虚拟机的共享目录</span></span><br><span class=\"line\">  config.vm.synced_folder <span class=\"string\">\"~/Desktop/VM/share\"</span>, <span class=\"string\">\"/home/vagrant/share\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># VirtaulBox相关配置</span></span><br><span class=\"line\">  config.vm.provider <span class=\"string\">\"virtualbox\"</span> <span class=\"keyword\">do</span> |v|</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 设置虚拟机的名称</span></span><br><span class=\"line\">      v.name = <span class=\"string\">\"ubuntu\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 设置虚拟机的内存大小</span></span><br><span class=\"line\">      v.memory = 8192</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 设置虚拟机的CPU个数</span></span><br><span class=\"line\">      v.cpus = 1</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>docker安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker.io</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个docker组</span></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\"><span class=\"comment\"># 把当前用户加入docker组</span></span><br><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$&#123;USER&#125;</span> docker</span><br><span class=\"line\">sudo service docker restart</span><br><span class=\"line\"><span class=\"comment\"># 切换当前会话到新 group</span></span><br><span class=\"line\">newgrp - docker</span><br><span class=\"line\">sudo vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://vii0v3oj.mirror.aliyuncs.com\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>docker-compose 安装<br><a href=\"/download/2020/2020-09-15-canal-install/docker-compose\">docker-compose</a> 拷贝到 <code>/usr/local/bin</code> 路径下。</p>\n<p><code>canal</code> docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">canal/canal-admin</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8089:8089\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\">      <span class=\"string\">spring.datasource.address:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:3306</span></span><br><span class=\"line\">      <span class=\"string\">spring.datasource.database:</span> <span class=\"string\">canal_manager</span></span><br><span class=\"line\">      <span class=\"string\">spring.datasource.username:</span> <span class=\"string\">canal</span></span><br><span class=\"line\">      <span class=\"string\">spring.datasource.password:</span> <span class=\"string\">canal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  server:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">canal/canal-server</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"11111:11111\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8000:8000\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"11112:11112\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"11110:11110\"</span></span><br></pre></td></tr></table></figure>\n\n<p>使用宿主机数据库配置启动前，需要在宿主机上添加用户以及初始化数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'canal'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'canal'</span>;</span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> <span class=\"string\">'canal'</span>@<span class=\"string\">'%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> canal_manager;</span><br><span class=\"line\"><span class=\"keyword\">use</span> canal_manager;</span><br><span class=\"line\">source conf/canal_manager.sql</span><br></pre></td></tr></table></figure>\n\n<p>启动后，<code>http://localhost:8089</code> 登录到 <code>Canal Admin</code> 后台。默认用户名密码：<code>admin/123456</code>。</p>\n<p><code>zk&amp;kafka</code> docker-compose.yml 配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  zoo1:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/zookeeper</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"2181:2181\"</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># kafka version: 1.1.0</span></span><br><span class=\"line\">  <span class=\"comment\"># scala version: 2.12</span></span><br><span class=\"line\"><span class=\"attr\">  kafka1:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"9092:9092\"</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ADVERTISED_HOST_NAME:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">\"zoo1:2181\"</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">      KAFKA_CREATE_TOPICS:</span> <span class=\"string\">\"stream-in:1:1,stream-out:1:1\"</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">kafka</span></span><br></pre></td></tr></table></figure>\n\n","tags":["docker","canal"]},{"title":"GitBook 博客工具","url":"/2020-09-16/gitbook-record/","content":"<h2 id=\"GitBook-博客工具\"><a href=\"#GitBook-博客工具\" class=\"headerlink\" title=\"GitBook 博客工具\"></a>GitBook 博客工具</h2><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li><code>npm install gitbook-cli -g</code></li>\n<li><code>gitbook ls</code> ：列出本地安装版本；</li>\n<li><code>gitbook current</code> ：列出当前使用版本；</li>\n<li><code>gitbook ls-remote</code> ：列出远程可使用版本；</li>\n<li><code>gitbook fetch 2.6.9</code> ：安装2.6.9版本；</li>\n<li><code>gitbook uninstall 2.6.9</code> ：卸载指定版本；</li>\n<li><code>gitbook update 2.6.9</code> ：更新到指定版本，没有指定版本则到最新；</li>\n<li><code>gitbook install</code> ：安装当前项目所需插件；</li>\n<li><code>gitbook build</code>：构建成Html文件，默认在_book目录下；</li>\n<li><code>gitbook serve</code>：启动服务；</li>\n<li><code>gitbook pdf</code> ：输出pdf电子书；</li>\n<li><code>gitbook epub</code>：输出epub电子书；</li>\n<li><code>gitbook mobi</code> ：输出mobi电子书；</li>\n</ul>\n<h3 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h3><h4 id=\"1-gitbook-init-初始化，生成标准文件\"><a href=\"#1-gitbook-init-初始化，生成标准文件\" class=\"headerlink\" title=\"1. gitbook init: 初始化，生成标准文件\"></a>1. <code>gitbook init</code>: 初始化，生成标准文件</h4><ol>\n<li>README.md —— 书籍的介绍写在这个文件里</li>\n<li>SUMMARY.md —— 书籍的目录结构在这里配置</li>\n</ol>\n<h4 id=\"2-编辑SUMMARY-md\"><a href=\"#2-编辑SUMMARY-md\" class=\"headerlink\" title=\"2. 编辑SUMMARY.md\"></a>2. 编辑SUMMARY.md</h4><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">前言</span>](<span class=\"link\">README.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">第一章</span>](<span class=\"link\">Chapter1/README.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">  * </span>[<span class=\"string\">第1节：衣</span>](<span class=\"link\">Chapter1/衣.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">  * </span>[<span class=\"string\">第2节：食</span>](<span class=\"link\">Chapter1/食.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">  * </span>[<span class=\"string\">第3节：住</span>](<span class=\"link\">Chapter1/住.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">  * </span>[<span class=\"string\">第4节：行</span>](<span class=\"link\">Chapter1/行.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">第二章</span>](<span class=\"link\">Chapter2/README.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">第三章</span>](<span class=\"link\">Chapter3/README.md</span>)</span><br><span class=\"line\"><span class=\"bullet\">* </span>[<span class=\"string\">第四章</span>](<span class=\"link\">Chapter4/README.md</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-再次执行gitbook-init，生成新目录结构\"><a href=\"#3-再次执行gitbook-init，生成新目录结构\" class=\"headerlink\" title=\"3. 再次执行gitbook init，生成新目录结构\"></a>3. 再次执行gitbook init，生成新目录结构</h4><h3 id=\"Link-跳转\"><a href=\"#Link-跳转\" class=\"headerlink\" title=\"Link 跳转\"></a>Link 跳转</h3><ol>\n<li><span id=\"define-link-id\">定义 ID 标签</span>。</li>\n<li>通过指定 ID 标签进行 link 跳转。<br>操作如下：<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 定义 link 标签 --&gt;</span><br><span class=\"line\">&lt;span id=\"nestingLevel\"&gt;nestingLevel&lt;/span&gt;</span><br><span class=\"line\">&lt;!-- 指定 link 跳转标签 --&gt;</span><br><span class=\"line\">[<span class=\"string\">nestingLevel</span>](<span class=\"link\">#nestingLevel</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>页面内跳转可以按照上面操作即可实现。<br>如果需要跨页面跳转，则需要按照下面步骤操作。</p>\n<h4 id=\"跨页面跳转\"><a href=\"#跨页面跳转\" class=\"headerlink\" title=\"跨页面跳转\"></a>跨页面跳转</h4><ol>\n<li><p><a href=\"#define-link-id\">与上面一样</a></p>\n</li>\n<li><p>指定标签</p>\n<ul>\n<li><p><span id=\"link-func1\">方法一</span>:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">自定义内容</span>](<span class=\"link\">页面文件名.html#id</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><span id=\"link-func2\">方法二</span>:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">自定义内容</span>](<span class=\"link\">页面文件名.md#id</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"#link-func1\"><strong>方法一</strong></a> 在 <code>gitbook serve</code> 生成的文档中可以使用，但是推送到 <code>git</code> 仓库中时，<strong>link</strong> 为 <strong>404</strong>。<br><a href=\"#link-func2\"><strong>方法二</strong></a> 在 <code>gitbook serve</code> 生成的文档以及 <code>git</code> 仓库中，link 都有效。</p>\n<p><strong>*注意</strong><br>上面操作对 <code>gitbook</code> 有效，在 <code>hexo</code> 中，文档链接生成格式与日期有关,如下：<br><a href=\"https://jackfromcn.github.io/2020/09/16/hacking-trojan/index.html\">https://jackfromcn.github.io/2020/09/16/hacking-trojan/index.html</a><br>因此指定时，需要根据情况设置。</p>\n<h3 id=\"优秀链接：\"><a href=\"#优秀链接：\" class=\"headerlink\" title=\"优秀链接：\"></a>优秀链接：</h3><p><a href=\"https://www.cntofu.com/book/34/4.md\" target=\"_blank\" rel=\"noopener\">Markdown + Gitbook</a></p>\n","tags":["gitbook","博客","Tools"]},{"title":"记一次Redis被入侵，生成red2.so文件的问题","url":"/2020-09-16/hacking-trojan/","content":"<h2 id=\"记一次Redis被入侵，生成red2-so文件的问题\"><a href=\"#记一次Redis被入侵，生成red2-so文件的问题\" class=\"headerlink\" title=\"记一次Redis被入侵，生成red2.so文件的问题\"></a>记一次Redis被入侵，生成red2.so文件的问题</h2><p>云服务器短信提醒，服务器存在木马入侵。<br><img src=\"/2020-09-16/hacking-trojan/10231600219803_.pic_hd.jpg\" alt=\"云服务器短信提醒\"></p>\n<p>开始抱着无所谓的心态，一直没有关心。一天闲来无事，就看了一下。<br><img src=\"/2020-09-16/hacking-trojan/10241600220407_.pic_hd.jpg\" alt=\"red2.so 木马文件\"><br>查询后发现真的是木马文件，原因是 <code>redis</code> 服务端口暴露没有设置密码。<br><code>redis</code> 服务配置文件，docker-compose.yml如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">redis:4.0.13</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span> <span class=\"bullet\">--appendonly</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./redis_data:/data</span></span><br></pre></td></tr></table></figure>\n\n<p>于是通过控制台将 <code>red2.so</code> 文件进行隔离。<br><img src=\"/2020-09-16/hacking-trojan/10251600220697_.pic.jpg\" alt=\"隔离 red2.so 文件\"><br>通过其他博主经验发现还有一个 <code>kinsing</code> 前缀的文件需要删除。于是一并删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*kinsing*\"</span></span><br><span class=\"line\">rm -rf redis_data/kinsingxID5CI5I5F</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<br><a href=\"https://www.pianshen.com/article/83501365862/\" target=\"_blank\" rel=\"noopener\">记一次Redis被入侵，生成red2.so文件的问题</a></p>\n","tags":["redis","记录"]},{"title":"GoogleEarth 实时轨迹 kml 文件生成","url":"/2020-09-24/GoogleEarth-kml/","content":"<h2 id=\"GoogleEarth-实时轨迹-kml-文件生成\"><a href=\"#GoogleEarth-实时轨迹-kml-文件生成\" class=\"headerlink\" title=\"GoogleEarth 实时轨迹 kml 文件生成\"></a>GoogleEarth 实时轨迹 kml 文件生成</h2><h3 id=\"KML-文件介绍\"><a href=\"#KML-文件介绍\" class=\"headerlink\" title=\"KML 文件介绍\"></a>KML 文件介绍</h3><p>将 <a href=\"#Run_File\">运行后生成的文件</a> 导入 <strong>GoogleEarth</strong> 目录结构如下图所示:<br><span id=\"File_Directory\"><img src=\"/2020-09-24/GoogleEarth-kml/131600925781_.pic.jpg\" alt=\"实时轨迹kml文件目录结构图\"></span></p>\n<h3 id=\"整体目录\"><a href=\"#整体目录\" class=\"headerlink\" title=\"整体目录\"></a>整体目录</h3><ol>\n<li>导入数据根目录。<br> 例如: 阳泉城市一段时间内，所有的公交运行轨迹.</li>\n<li>数据分组目录。<br> 例如: 对应城市下，某条线路中对应一辆公交车的运行轨迹。</li>\n<li>轨迹点目录。<br> 里面是对应分组下所有的轨迹点，可以进行动画播放。</li>\n<li>轨迹线。<br> 将所有轨迹点绘制成一条轨迹线。<br>实时动画播放如下图所示:<br><img src=\"/2020-09-24/GoogleEarth-kml/141600932102_.pic_hd.jpg\" alt=\"动画播放\"></li>\n</ol>\n<h3 id=\"代码逻辑介绍\"><a href=\"#代码逻辑介绍\" class=\"headerlink\" title=\"代码逻辑介绍\"></a>代码逻辑介绍</h3><h4 id=\"主逻辑\"><a href=\"#主逻辑\" class=\"headerlink\" title=\"主逻辑\"></a>主逻辑</h4><p>根据数据 <a href=\"#Trace_Class\">Trace</a> 集合生成 <strong>KML</strong> 文件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将所有的轨迹点数据，输出成 GoogleEarth 识别的 kml 文件</span></span><br><span class=\"line\">com.wencheng.util.google.earth.kml.KmlHelpler#setAllTravelsKml</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong><br>入参 <code>rootFolder</code> 根目录名会用于 <strong>KML</strong>(本质上是 <strong>XML</strong> 文件)的 <strong>id</strong> 等关键属性引用，因此不要有特殊符号。例如: 引号、<code>/</code>、<code>\\</code>、<code>空格</code> 等会导致文件解析异常的特殊字符。</p>\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><p><img src=\"/2020-09-24/GoogleEarth-kml/151600936455_.pic_hd.jpg\" alt=\"代码结构\"></p>\n<ul>\n<li>二级目录分组。根据函数对数据进行二级分组。</li>\n<li>根据 <a href=\"#Trace_Class\">Trace</a> 拉取目录的标题</li>\n<li>用 <strong>dom4j</strong> 工具类输出 <strong>KML</strong> 文件。<ol>\n<li><code>标签3</code>，生成 <strong>KML</strong> 协议文件头。对应下面部分<br><img src=\"/2020-09-24/GoogleEarth-kml/161600937210_.pic_hd.jpg\" alt=\"KML-xsd\"></li>\n<li><code>标签4</code>，<a href=\"#def_schema\">定义样式</a>。</li>\n<li><code>标签5</code>，填充数据。<ul>\n<li>创建<strong>子目录</strong>，将同一分组的数据都放在这个目录下。</li>\n<li>在<strong>子目录中</strong>添加<a href=\"#set-coord-data\">点位图标数据</a>。</li>\n<li>在<strong>子目录中</strong>添加<a href=\"#set-line\">轨迹线路径数据</a>。</li>\n</ul>\n</li>\n<li><code>标签6</code>，<strong>xml</strong> 文件输出到文件，后缀为 <code>.kml</code>。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"定义样式\"><a href=\"#定义样式\" class=\"headerlink\" title=\"定义样式\"></a><span id=\"def_schema\">定义样式</span></h4><p>定义 <strong>schema</strong> 逻辑如下:<br><img src=\"/2020-09-24/GoogleEarth-kml/171600939768_.pic_hd.jpg\" alt=\"schema_code\"></p>\n<ol>\n<li>定义 <strong>schema</strong> <code>id</code>，下面每个实时点数据展示通过 <code>schemaUrl</code> 指定样式。</li>\n<li>定义 <strong>field</strong> 类型，必须是 <strong>GoogleEarth</strong> 支持的类型。<br> <img src=\"/2020-09-24/GoogleEarth-kml/181600940401_.pic_hd.jpg\" alt=\"def-schema-field\"><ul>\n<li><strong>name</strong>: 属性定义的标签，后面 <code>SimpleData</code> 中会通过 <strong>name</strong> 进行匹配。</li>\n<li><strong>type</strong>: 属性的类型。</li>\n<li><strong>displayName</strong>: 展示的名字。</li>\n</ul>\n</li>\n<li>获取<a href=\"#CDATA_FORM\"><strong>CDATA</strong></a>样式，下面样式定义展示扩展字段需要其定义。</li>\n<li>定义<strong>鼠标靠近</strong>时的样式，将<a href=\"#CDATA_FORM\"><strong>CDATA</strong></a>绑定进来。</li>\n<li>定义<strong>正常</strong>时的样式,将<a href=\"#CDATA_FORM\"><strong>CDATA</strong></a>绑定进来。</li>\n<li>将上面2个<strong>Style</strong>样式绑定到<strong>StyleMap</strong>,并指定<code>key</code>，用来给后面<strong>data</strong>样式进行选择。</li>\n</ol>\n<h5 id=\"定义扩展字段展示表单样式\"><a href=\"#定义扩展字段展示表单样式\" class=\"headerlink\" title=\"定义扩展字段展示表单样式\"></a><span id=\"CDATA_FORM\">定义扩展字段展示表单样式</span></h5><p>定义扩展字段展示表单样式逻辑如下:<br><img src=\"/2020-09-24/GoogleEarth-kml/191600941233_.pic_hd.jpg\" alt=\"def-schema-field\"></p>\n<ol>\n<li>通过新的<strong>dom4j</strong>定义 <strong>CDATA</strong> 样式。<strong>org.dom4j.Element#addCDATA</strong> api 入参必须是字符串，因此先通过<strong>dom4j</strong>先生成样式，再通过数据流输出成字符串。</li>\n<li>表单框宽度设置为 <strong>0</strong>，不展示表单边框。</li>\n<li>表单第一列，属性标题。</li>\n<li>表单第二列，属性值。<code>$[阳泉/id]</code>,取值来自于上面<strong><a href=\"#def_schema\">Schema</a></strong>的定义，按照定义层级进行取值。</li>\n<li>输出成字符串。</li>\n</ol>\n<h5 id=\"扩展字段展示效果图\"><a href=\"#扩展字段展示效果图\" class=\"headerlink\" title=\"扩展字段展示效果图\"></a>扩展字段展示效果图</h5><p><img src=\"/2020-09-24/GoogleEarth-kml/271600951400_.pic_hd.jpg\" alt=\"Ext-Data-Rendering\"></p>\n<h4 id=\"生成点位图标数据\"><a href=\"#生成点位图标数据\" class=\"headerlink\" title=\"生成点位图标数据\"></a><span id=\"set-coord-data\">生成点位图标数据</span></h4><p>生成点位图逻辑如下:<br><img src=\"/2020-09-24/GoogleEarth-kml/201600946164_.pic_hd.jpg\" alt=\"coord-data\"></p>\n<ol>\n<li>创建目录，将所有点位信息放在这个目录下。循环每一个点，进行填充。</li>\n<li>设置一个<strong>Placemark</strong>，对应一个点位。</li>\n<li>将前面设置的<strong>pointStyleMap</strong>风格绑定过来。</li>\n<li>添加<strong>TimeStamp</strong>信息，用来动画数据展示。<br> <img src=\"/2020-09-24/GoogleEarth-kml/211600949332_.pic_hd.jpg\" alt=\"TimeStamp\"></li>\n<li>设置展示样式。</li>\n<li>设置扩展数据展示。<br> <img src=\"/2020-09-24/GoogleEarth-kml/221600949908_.pic_hd.jpg\" alt=\"Ext-Data\"><ul>\n<li>绑定<a href=\"#def_schema\"><strong>schame</strong></a>。</li>\n<li>填充数据。</li>\n</ul>\n</li>\n<li>添加点位的经纬度坐标以及高度。<br> <img src=\"/2020-09-24/GoogleEarth-kml/231600950148_.pic_hd.jpg\" alt=\"Line\"></li>\n</ol>\n<h5 id=\"点位图标数据效果图\"><a href=\"#点位图标数据效果图\" class=\"headerlink\" title=\"点位图标数据效果图\"></a>点位图标数据效果图</h5><p><img src=\"/2020-09-24/GoogleEarth-kml/251600951021_.pic_hd.jpg\" alt=\"Point-Map-Rendering\"></p>\n<h4 id=\"生成轨迹线路径数据\"><a href=\"#生成轨迹线路径数据\" class=\"headerlink\" title=\"生成轨迹线路径数据\"></a><span id=\"set-line\">生成轨迹线路径数据</span></h4><p>生成轨迹线路径数据逻辑如下:<br><img src=\"/2020-09-24/GoogleEarth-kml/241600950331_.pic_hd.jpg\" alt=\"set-line\"></p>\n<ol>\n<li>添加一个坐标<strong>Placemark</strong>。</li>\n<li>设置风格。</li>\n<li>将所有点按照 <code>经度,维度,高度</code> 填充，每一行填充一个点的记录。组装成字符串。</li>\n<li>将 <strong>3</strong> 中的经纬度信息填充到<strong>coordinates</strong>中。</li>\n</ol>\n<h5 id=\"轨迹线路径数据效果图\"><a href=\"#轨迹线路径数据效果图\" class=\"headerlink\" title=\"轨迹线路径数据效果图\"></a>轨迹线路径数据效果图</h5><p><img src=\"/2020-09-24/GoogleEarth-kml/261600951160_.pic_hd.jpg\" alt=\"line-Rendering\"></p>\n<p><strong><span id=\"Trace_Class\">Trace 结构</span></strong><br>每个实时位置点信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trace</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一行数据,每个实时位置点信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Object&gt; data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Date timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> BigDecimal lng;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> BigDecimal lat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Trace</span><span class=\"params\">(Map&lt;String, Object&gt; result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = result;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = (Date) <span class=\"keyword\">this</span>.data.get(<span class=\"string\">\"时间戳\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lng = (BigDecimal) <span class=\"keyword\">this</span>.data.get(<span class=\"string\">\"经度_wgs84\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lat = (BigDecimal) <span class=\"keyword\">this</span>.data.get(<span class=\"string\">\"纬度_wgs84\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><p>项目代码:<a href=\"/download/2020/2020-09-24-GoogleEarth-kml/google-earth.zip\">google-earth.zip</a><br>官方运行轨迹实例文件:<a href=\"/download/2020/2020-09-24-GoogleEarth-kml/TimeStamp_example.kml\">TimeStamp_example.kml</a><br><span id=\"Run_File\">代码运行后生成kml文件</span>: <a href=\"/download/2020/2020-09-24-GoogleEarth-kml/阳泉轨迹_1.kml\">阳泉轨迹_1.kml</a></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://developers.google.com/kml/documentation/time\" target=\"_blank\" rel=\"noopener\">kml官方文档</a><br><a href=\"https://blog.csdn.net/sunqin_csdn/article/details/90547135\" target=\"_blank\" rel=\"noopener\">将轨迹对应到google earth（谷歌地球）上</a></p>\n","tags":["Tools","GoogleEarth"]},{"title":"springboot 源码解析——(一)","url":"/2020-09-28/springboot-analysis/","content":"<h2 id=\"springboot-源码解析——-一\"><a href=\"#springboot-源码解析——-一\" class=\"headerlink\" title=\"springboot 源码解析——(一)\"></a>springboot 源码解析——(一)</h2><h3 id=\"1-step1-SpringApplication-初始化\"><a href=\"#1-step1-SpringApplication-初始化\" class=\"headerlink\" title=\"1. step1: SpringApplication 初始化\"></a>1. step1: <code>SpringApplication</code> 初始化</h3><p><code>SpringApplication</code> 初始化主要是加载 <strong><span id=\"spring_factories_1\">加载 <code>META-INF/spring.factories</code> 配置信息</span></strong> 中 <code>ApplicationContextInitializer</code> 和 <code>ApplicationListener</code>。</p>\n<p><code>SpringApplication#initialize</code>:</p>\n<ul>\n<li><strong>setInitializers</strong>: <code>org.springframework.context.ApplicationContextInitializer</code></li>\n<li><strong>setListeners</strong>: <code>org.springframework.context.ApplicationListener</code></li>\n</ul>\n<p>详细流程文件: <a href=\"/download/2020/2020-09-28-springboot-analysis/SpringApplication初始化.pdf\">SpringApplication初始化.pdf</a><br><img src=\"/2020-09-28/springboot-analysis/281601300976_.pic_hd.jpg\" alt=\"SpringApplication初始化\"></p>\n<h3 id=\"2-step2-SpringApplication-run-方法\"><a href=\"#2-step2-SpringApplication-run-方法\" class=\"headerlink\" title=\"2. step2: SpringApplication#run 方法\"></a>2. step2: <code>SpringApplication#run</code> 方法</h3><p><code>SpringApplication#run</code> 方法主流程。</p>\n<ol>\n<li>初始化StopWatch,调用其start方法开始计时.</li>\n<li>调用configureHeadlessProperty设置系统属性java.awt.headless，这里设置为true，表示运行在服务器端，在没有显示器和鼠标键盘的模式下工作，模拟输入输出设备功能 </li>\n<li>调用SpringApplicationRunListeners#starting</li>\n<li>创建一个DefaultApplicationArguments对象,它持有着args参数，就是main函数传进来的参数.调用prepareEnvironment方法.</li>\n<li>打印banner</li>\n<li>创建SpringBoot上下 </li>\n<li>初始化FailureAnalyzers</li>\n<li>调用prepareContext</li>\n<li>调用AbstractApplicationContext#refresh方法,并注册钩 </li>\n<li>在容器完成刷新后，依次调用注册的Runners</li>\n<li>调用SpringApplicationRunListeners#finished</li>\n<li>停止计时</li>\n<li>初始化过程中出现异常时调用handleRunFailure进行处理,然后抛出IllegalStateException异常.</li>\n</ol>\n<p><strong>getRunListeners</strong> 方法加载 <strong><span id=\"spring_factories_2\">加载 <code>META-INF/spring.factories</code> 配置信息</span></strong> 中 <code>SpringApplicationRunListener</code>。</p>\n<ul>\n<li><strong>getRunListeners</strong>: <code>org.springframework.boot.SpringApplicationRunListener</code></li>\n</ul>\n","tags":["源码","springboot","spring"]},{"title":"布隆过滤器(Bloom Filter)详解","url":"/2020-10-14/BloomFilter/","content":"<h2 id=\"Redis-及RedisBloom-安装\"><a href=\"#Redis-及RedisBloom-安装\" class=\"headerlink\" title=\"Redis 及RedisBloom 安装\"></a>Redis 及RedisBloom 安装</h2><p><a href=\"/download/2020/2020-10-14-BloomFilter/RedisBloom-2.0.3.tar.gz\">RedisBloom-2.0.3.tar.gz</a></p>\n<h2 id=\"业务端实现-BoolmFilter\"><a href=\"#业务端实现-BoolmFilter\" class=\"headerlink\" title=\"业务端实现 BoolmFilter\"></a>业务端实现 BoolmFilter</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.doodl6.springmvc.service.cache.redis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.base.Preconditions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Funnel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.hash.Hashing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilterHelper</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> numHashFunctions;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bitSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Funnel&lt;T&gt; funnel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BloomFilterHelper</span><span class=\"params\">(Funnel&lt;T&gt; funnel, <span class=\"keyword\">int</span> expectedInsertions, <span class=\"keyword\">double</span> fpp)</span> </span>&#123;</span><br><span class=\"line\">        Preconditions.checkArgument(funnel != <span class=\"keyword\">null</span>, <span class=\"string\">\"funnel不能为空\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.funnel = funnel;</span><br><span class=\"line\">        bitSize = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class=\"line\">        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] murmurHashOffset(T value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] offset = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numHashFunctions];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> hash64 = Hashing.murmur3_128().hashObject(value, funnel).asLong();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash1 = (<span class=\"keyword\">int</span>) hash64;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash2 = (<span class=\"keyword\">int</span>) (hash64 &gt;&gt;&gt; <span class=\"number\">32</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= numHashFunctions; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextHash = hash1 + i * hash2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextHash &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                nextHash = ~nextHash;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            offset[i - <span class=\"number\">1</span>] = nextHash % bitSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> offset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算bit数组长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">optimalNumOfBits</span><span class=\"params\">(<span class=\"keyword\">long</span> n, <span class=\"keyword\">double</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            p = Double.MIN_VALUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (-n * Math.log(p) / (Math.log(<span class=\"number\">2</span>) * Math.log(<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算hash方法执行次数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">optimalNumOfHashFunctions</span><span class=\"params\">(<span class=\"keyword\">long</span> n, <span class=\"keyword\">long</span> m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(<span class=\"number\">1</span>, (<span class=\"keyword\">int</span>) Math.round((<span class=\"keyword\">double</span>) m / n * Math.log(<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>```java<br>package com.doodl6.springmvc.service.cache.redis;</p>\n<p>import com.google.common.base.Preconditions;<br>import org.springframework.data.redis.core.RedisTemplate;<br>import org.springframework.stereotype.Service;</p>\n<p>import javax.annotation.Resource;<br>import java.util.Collection;<br>import java.util.Map;<br>import java.util.concurrent.TimeUnit;</p>\n<p>@Service<br>public class RedisService {</p>\n<pre><code>@Resource\nprivate RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n/**\n * 根据给定的布隆过滤器添加值\n */\npublic &lt;T&gt; void addByBloomFilter(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value) {\n    Preconditions.checkArgument(bloomFilterHelper != null, &quot;bloomFilterHelper不能为空&quot;);\n    int[] offset = bloomFilterHelper.murmurHashOffset(value);\n    for (int i : offset) {\n        redisTemplate.opsForValue().setBit(key, i, true);\n    }\n}\n\n/**\n * 根据给定的布隆过滤器判断值是否存在\n */\npublic &lt;T&gt; boolean includeByBloomFilter(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value) {\n    Preconditions.checkArgument(bloomFilterHelper != null, &quot;bloomFilterHelper不能为空&quot;);\n    int[] offset = bloomFilterHelper.murmurHashOffset(value);\n    for (int i : offset) {\n        if (!redisTemplate.opsForValue().getBit(key, i)) {\n            return false;\n        }\n    }\n\n    return true;\n}</code></pre><p>}<br>``</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.cnblogs.com/haippy/archive/2012/07/13/2590351.html\" target=\"_blank\" rel=\"noopener\">布隆过滤器(Bloom Filter)详解</a><br><a href=\"https://blog.csdn.net/hguisu/article/details/7866173\" target=\"_blank\" rel=\"noopener\">海量数据处理算法—Bloom Filter</a><br><a href=\"https://blog.csdn.net/jiaomeng/article/details/1495500\" target=\"_blank\" rel=\"noopener\">Bloom Filter概念和原理</a><br><a href=\"https://blog.csdn.net/qq_33709582/article/details/108407706\" target=\"_blank\" rel=\"noopener\">布隆过滤器原理</a><br><a href=\"https://martin.doodl6.com/#/redis/redis-bloom-filter\" target=\"_blank\" rel=\"noopener\">BloomFilterHelper</a><br><a href=\"https://www.jianshu.com/p/16e5f3481366\" target=\"_blank\" rel=\"noopener\">Bloom-Filter</a><br><a href=\"https://blog.csdn.net/lingeio/article/details/104653335\" target=\"_blank\" rel=\"noopener\">Redis 及RedisBloom 安装</a></p>\n<h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h2><p><a href=\"https://github.com/RedisBloom/RedisBloom\" target=\"_blank\" rel=\"noopener\">RedisBloom-redis类库</a><br><a href=\"https://github.com/RedisBloom/JRedisBloom\" target=\"_blank\" rel=\"noopener\">JRedisBloom-jdk客户端</a></p>\n","tags":["Tools","redis","Bloom Filter"]},{"title":"实体类对象 equals","url":"/2020-10-14/equals/","content":"<h1 id=\"实体类对象-equals\"><a href=\"#实体类对象-equals\" class=\"headerlink\" title=\"实体类对象 equals\"></a>实体类对象 equals</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>项目业务开发过程中，<strong>MVC</strong> 三层架构、<strong>rpc</strong> 接口以及消息中间件都需要定义一个 <code>dto</code> 对象进行接收，<code>dto</code> 再转成数据库需要的实体类 <code>model</code> 中。<br>但是一些场景中，需要对入参与数据库实体类数据进行 <strong>check</strong>。例如：回调数据落地。落地前，先与数据库 <strong>check</strong>，判断是有变更，发生变更时才进行下面的业务处理。</p>\n<h2 id=\"重写-equals-和-hashcode-方法\"><a href=\"#重写-equals-和-hashcode-方法\" class=\"headerlink\" title=\"重写 equals 和 hashcode 方法\"></a>重写 equals 和 hashcode 方法</h2><p>这是最常见的的处理方式。</p>\n<ol>\n<li>定义中间实体类，并重写 equals 和 hashcode 方法。</li>\n<li><code>dto</code> 和 <code>model</code> 对象转成中间实体。</li>\n<li>通过 <code>equals</code> 方法进行比较。</li>\n</ol>\n<p><strong>问题</strong></p>\n<ol>\n<li>需要定义中间实体，数据 <strong>check</strong> 场景较多，对比字段较细时，需要定义很多中间实体。</li>\n<li>中间实体必须重新 <code>equals</code> 方法，如果想用 <strong>rpc</strong> 中 <strong>sdk</strong> 实体类作为中间实体时，限制加大。</li>\n</ol>\n<h2 id=\"org-apache-commons-lang3-builder-EqualsBuilder\"><a href=\"#org-apache-commons-lang3-builder-EqualsBuilder\" class=\"headerlink\" title=\"org.apache.commons.lang3.builder.EqualsBuilder\"></a><code>org.apache.commons.lang3.builder.EqualsBuilder</code></h2><h3 id=\"实现方法如下\"><a href=\"#实现方法如下\" class=\"headerlink\" title=\"实现方法如下\"></a>实现方法如下</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">EqualsBuilder.reflectionEquals(<span class=\"keyword\">this</span>, obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> EqualsBuilder()</span><br><span class=\"line\">    .appendSuper(<span class=\"keyword\">super</span>.equals(obj))</span><br><span class=\"line\">    .append(field1, rhs.field1)</span><br><span class=\"line\">    .append(field2, rhs.field2)</span><br><span class=\"line\">    .append(field3, rhs.field3)</span><br><span class=\"line\">    .isEquals()</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong></p>\n<ol>\n<li>需要的中间实体类不可修改时，也可以通过 <code>EqualsBuilder#reflectionEquals</code> 在方法调用时，进行 <strong>check</strong>。</li>\n<li>不希望定义中间实体，或对比的属性值比较少，是两个实体的子集时，可以通过方法二进行定制化比较。而不需要定义中间实体。</li>\n</ol>\n<p><strong>问题</strong><br><code>EqualsBuilder</code> 遵循Effective java定义的规则，所以业务中 <code>equals</code> 方法遇到的问题，这里也会有。比如: <strong>BigDecimal</strong> 类型的数据没法使用 <code>equals</code> 进行比较。<strong>BigDecimal</strong> 数值比较时，应使用 <code>compareTo</code> 进行比较。</p>\n<h3 id=\"解决实体类中-BigDecimal-类型字段的比值问题\"><a href=\"#解决实体类中-BigDecimal-类型字段的比值问题\" class=\"headerlink\" title=\"解决实体类中 BigDecimal 类型字段的比值问题\"></a>解决实体类中 <strong>BigDecimal</strong> 类型字段的比值问题</h3><p>主要解决思路是对 <strong>BigDecimal</strong> 字段格式化后，再进行实体类之间的 <code>equals</code> 比较。<br><strong>方法</strong></p>\n<ol>\n<li>重写 <code>getter</code>、<code>setter</code> 方法。对简单场景下适用，但是业务复杂时，<strong>BigDecimal</strong> 字段较多时，重写成本会很高。</li>\n<li>通过 <code>json</code> 序列化进行格式化。</li>\n</ol>\n<p>目前业务场景就是通过 <code>json</code> 序列化进行格式化输出后，再重新反序列化，解决 <strong>BigDecimal</strong> 精度不一致导致 <code>equals</code> 返回 <strong>FALSE</strong> 的问题。<br>以 <code>FastJSON</code> 来举例。</p>\n<p><strong>一、定义序列化 <code>Filter</code></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.serializer.ValueFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.DecimalFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigDecimalValueFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ValueFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">process</span><span class=\"params\">(Object object,String name,Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.nonNull(value) &amp;&amp; value <span class=\"keyword\">instanceof</span> BigDecimal)&#123;</span><br><span class=\"line\">            DecimalFormat format = <span class=\"keyword\">new</span> DecimalFormat(<span class=\"string\">\"#.00\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> format.format(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>二、序列化格式输出后，再反序列化回来</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj = JSON.parseObject(JSON.toJSONString(obj, <span class=\"keyword\">new</span> BigDecimalValueFilter()), Object.class);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://blog.csdn.net/yaomingyang/article/details/79300312\" target=\"_blank\" rel=\"noopener\">Java工具类EqualsBuilder</a></p>\n","tags":["Tools","jdk"]},{"title":"mongodb","url":"/2020-10-15/mongodb/","content":"<h2 id=\"mongodb-环境搭建\"><a href=\"#mongodb-环境搭建\" class=\"headerlink\" title=\"mongodb 环境搭建\"></a>mongodb 环境搭建</h2><p><a href=\"/download/2020/2020-10-15-mongodb/docker-compose.yaml\"><strong>docker-compose.yaml</strong></a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  mongo:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">mongo:4.2</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">27017</span><span class=\"string\">:27017</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    tty:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">admin</span></span><br><span class=\"line\"><span class=\"attr\">      MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">admin</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/etc/localtime:/etc/localtime:ro</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./db/db_a/data:/data/db</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./db/db_a/log:/data/log</span></span><br><span class=\"line\"><span class=\"attr\">    command:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/bin/bash</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"bullet\">-c</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">mongod</span> <span class=\"bullet\">--port</span> <span class=\"number\">27017</span> <span class=\"bullet\">--bind_ip_all</span> <span class=\"bullet\">--auth</span> <span class=\"bullet\">--dbpath</span> <span class=\"string\">\"/data/db\"</span>   <span class=\"bullet\">--logpath</span> <span class=\"string\">\"/data/log/db.log\"</span></span><br><span class=\"line\"><span class=\"comment\"># 这个地方很有意思，如果写成\"command: mongod .....\"形式，则mongodb这个容器会不断的重启，并且未提示一些文件不存在之类的错误信息，原因未知</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  mongo-express:</span></span><br><span class=\"line\"><span class=\"attr\">    links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">mongo</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">mongo-express</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8081</span><span class=\"string\">:8081</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      ME_CONFIG_OPTIONS_EDITORTHEME:</span> <span class=\"number\">3024</span><span class=\"bullet\">-night</span></span><br><span class=\"line\"><span class=\"attr\">      ME_CONFIG_BASICAUTH_USERNAME:</span> <span class=\"string\">mongoexpress</span></span><br><span class=\"line\"><span class=\"attr\">      ME_CONFIG_BASICAUTH_PASSWORD:</span> <span class=\"string\">mongoexpress</span></span><br><span class=\"line\"><span class=\"attr\">      ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class=\"string\">admin</span></span><br><span class=\"line\"><span class=\"attr\">      ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class=\"string\">admin</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.jianshu.com/p/de966da58a02\" target=\"_blank\" rel=\"noopener\">Mongodb的docker-compose方式安装与配置</a><br><a href=\"https://hub.docker.com/_/mongo\" target=\"_blank\" rel=\"noopener\">mongo-dockerhub</a></p>\n","tags":["mongodb"]},{"title":"oh-my-zsh","url":"/2020-10-16/oh-my-zsh/","content":"<h1 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h1><h2 id=\"zsh——git-插件\"><a href=\"#zsh——git-插件\" class=\"headerlink\" title=\"zsh——git 插件\"></a>zsh——git 插件</h2><p><img src=\"/2020-10-16/oh-my-zsh/687148dbly1focmaot1m0j20jq0dcq3x.jpg\" alt=\"git-plugin\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到 zsh</span></span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到item2</span></span><br><span class=\"line\">chsh -s /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 oh my zsh</span></span><br><span class=\"line\">curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://ehlxr.me/2016/09/24/using-oh-my-zsh/\" target=\"_blank\" rel=\"noopener\">Oh My Zsh 替换你的 Bash Shell</a></p>\n","tags":["Tools","命令"]},{"title":"Feign 原理","url":"/2020-10-19/feign/","content":"<h1 id=\"Feign-原理\"><a href=\"#Feign-原理\" class=\"headerlink\" title=\"Feign 原理\"></a>Feign 原理</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a><span id=\"feign_title_1\">初始化</span></h2><p>使用 <strong>Feign</strong> 时，我们会用到 2 个注解。</p>\n<ul>\n<li><code>@EnableFeignClients</code> 开启 <strong>Feign</strong> 的功能。</li>\n<li><code>@FeignClient</code> 在修饰的接口上注解，为其生成代理类。<br>以这两个注解为入口进行解析。</li>\n</ul>\n<h3 id=\"EnableFeignClients-注解\"><a href=\"#EnableFeignClients-注解\" class=\"headerlink\" title=\"@EnableFeignClients 注解\"></a><code>@EnableFeignClients</code> 注解</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(FeignClientsRegistrar.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableFeignClients &#123;</span><br><span class=\"line\">\t\t…………</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>@Import 注解就是之前xml配置中的import标签，可以用于依赖第三方包中bean的配置和加载</p>\n</blockquote>\n<p>进入<code>@EnableFeignClients</code> 注解我们可以发现里面加载了 <strong>FeignClientsRegistrar</strong> 类，进去 <strong>FeignClientsRegistrar</strong> 类，我们看到他实现了 <strong>ImportBeanDefinitionRegistrar</strong> 这个类，<strong>ImportBeanDefinitionRegistrar</strong> 接口是Spring的一个扩展接口，通过<strong>registerBeanDefinitions</strong> 方法向容器中注入Bean。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.springframework.cloud.openfeign.FeignClientsRegistrar#registerBeanDefinitions</span><br></pre></td></tr></table></figure>\n\n<p>其中 <strong>registerDefaultConfiguration</strong> 方法注册了 <code>@EnableFeignClients</code> 注解中 <strong>defaultConfiguration</strong> 属性，重点我们看 <strong>registerFeignClients</strong> 方法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.springframework.cloud.openfeign.FeignClientsRegistrar#registerFeignClients</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"registerFeignClient方法讲解\"><a href=\"#registerFeignClient方法讲解\" class=\"headerlink\" title=\"registerFeignClient方法讲解\"></a><strong>registerFeignClient</strong>方法讲解</h3><p>其实这一块就是将 <code>@FeignClient</code> 注解中所有的 <strong>value</strong> 值取出并且放入容器中。<br>在这里我们需要注意此时注册是 <strong>FeignClientFactoryBean</strong> 类型，之前注册的都是 <strong>FeignClientSpecification</strong> 类型的.</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.springframework.cloud.openfeign.FeignClientsRegistrar#registerFeignClient</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到这Feign的初始化流程已经说完了。大概总结一下Feign的初始化流程</p>\n<ol>\n<li>读取 <code>@EnableFeignClients</code> 注解中 <strong>basePackage</strong> 值下的所有带有<code>@FeignClient</code> 的接口</li>\n<li>读取接口上面的 <code>@FeignClient</code> 注解参数</li>\n<li>如果此接口上有 <strong>Configuration</strong> 参数，那么先进行注册此参数，注意此参数注册在 <strong>Spring容器</strong> 中是以 <strong>FeignClientSpecification</strong> 类型注册的</li>\n<li>注册完 <strong>Configuration</strong> 参数以后，然后将其余的信息注册到容器中，注意这时是以 <strong>FeignClientFactoryBean</strong> 类型注册的，另外此时的<strong>Configuration</strong> 参数并没有传过来。</li>\n</ol>\n<h2 id=\"生成-FeignClient-代理过程\"><a href=\"#生成-FeignClient-代理过程\" class=\"headerlink\" title=\"生成 FeignClient 代理过程\"></a><span id=\"feign_title_2\">生成 FeignClient 代理过程</span></h2><p><img src=\"/2020-10-19/feign/20190324221731575.png\" alt=\"Feign代理加载过程\"></p>\n<p><strong>FeignClientFactoryBean</strong> 是一个工厂 <strong>bean</strong>，提供了获取 <strong>FeignClient</strong> 代理 <strong>bean</strong> 的 <strong>getObject</strong> 方法。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.springframework.cloud.openfeign.FeignClientFactoryBean#getObject</span><br><span class=\"line\">    ==&gt; org.springframework.cloud.openfeign.Targeter#target</span><br><span class=\"line\">        即, org.springframework.cloud.openfeign.DefaultTargeter#target</span><br><span class=\"line\">        ==&gt; feign.Feign.Builder#target(feign.Target&lt;T&gt;)</span><br><span class=\"line\">            ==&gt; feign.ReflectiveFeign#newInstance</span><br></pre></td></tr></table></figure>\n\n<p>追踪源码到 <strong>ReflectiveFeign</strong>,在这里生成 <strong>JDK</strong> 动态代理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">Public &lt;T&gt;<span class=\"function\">T <span class=\"title\">newInstance</span><span class=\"params\">(Target&lt;T&gt;target)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,MethodHandler&gt;nameToHandler=targetToHandlersByName.apply(target);<span class=\"comment\">// 解析方法构成SynchronousMethodHandler，不包括Object的方法，静态，默认方法)</span></span><br><span class=\"line\">    Map&lt;Method,MethodHandler&gt;methodToHandler=<span class=\"keyword\">new</span> LinkedHashMap&lt;Method,MethodHandler&gt;();</span><br><span class=\"line\">    List&lt;DefaultMethodHandler&gt;  defaultMethodHandlers=<span class=\"keyword\">new</span> LinkedList&lt;DefaultMethodHandler&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Method method:target.type().getMethods())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method.getDeclaringClass()==Object.class)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">// 跳过object类的方法</span></span><br><span class=\"line\">        &#125;elseif(Util.isDefault(method))&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 默认方法</span></span><br><span class=\"line\">            DefaultMethodHandler handler=<span class=\"keyword\">new</span> DefaultMethodHandler(method);</span><br><span class=\"line\">            defaultMethodHandlers.add(handler);</span><br><span class=\"line\">            methodToHandler.put(method,handler);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            methodToHandler.put(method,nameToHandler.get(Feign.configKey(target.type(),method)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    InvocationHandler handler=factory.create(target,methodToHandler); <span class=\"comment\">// 封装methodHandles的处理器，确定最终调用的方法</span></span><br><span class=\"line\">    T proxy=(T)Proxy.newProxyInstance(target.type().getClassLoader(),newClass&lt;?&gt;[]&#123;target.type()&#125;,handler);<span class=\"comment\">// 生成代理类</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(DefaultMethodHandler defaultMethodHandler:defaultMethodHandlers)&#123;</span><br><span class=\"line\">        defaultMethodHandler.bindTo(proxy); <span class=\"comment\">// 默认handler绑定到代理类上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Return proxy; <span class=\"comment\">// 返回代理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li><a href=\"#feign_title_1\">初始化过程</a> 注册 <strong>FeignClientFactoryBean</strong> 到 <strong>Spring</strong> 容器中。</li>\n<li>项目运行过程中，调用 <strong>FeiginClient</strong> 接口时，会通过 <strong>Spring</strong> 容器加载对象，调用 <code>FeignClientFactoryBean#getObject</code> 方法。</li>\n<li>最终调用 <code>ReflectiveFeign#newInstance</code> 方法，实例化 <strong>FeignClient</strong> 代理。</li>\n</ol>\n<p><strong><code>ReflectiveFeign#newInstance</code> 扩展</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">feign.ReflectiveFeign#newInstance</span><br><span class=\"line\"><span class=\"comment\">// map: className#methodName(args) -&gt; MethodHandler</span></span><br><span class=\"line\">==&gt; feign.ReflectiveFeign.ParseHandlersByName#apply</span><br><span class=\"line\">    <span class=\"comment\">// MethodHandler: new SynchronousMethodHandler(..)</span></span><br><span class=\"line\">    ==&gt; feign.SynchronousMethodHandler.Factory#create</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JDK动态代理 invokeHandler: new feign.ReflectiveFeign.FeignInvocationHandler(..)</span></span><br><span class=\"line\"><span class=\"comment\">// method: 对应上面的 SynchronousMethodHandler</span></span><br><span class=\"line\">==&gt; feign.InvocationHandlerFactory#create</span><br></pre></td></tr></table></figure>\n\n<p><strong>InvocationHandler</strong>: 默认 <code>FeignInvocationHandler</code> –&gt; <code>MethodHandler</code> –&gt; 调用 <code>SynchronousMethodHandler</code>。<br>也可以是 <code>HystrixInvocationHandler</code> –&gt; HystrixCommand 包装(<code>MethodHandler</code> –&gt; 调用 <code>SynchronousMethodHandler</code>)。逻辑上与 <code>FeignInvocationHandler</code> 没有什么区别。</p>\n<h2 id=\"FeignClient-调用流程\"><a href=\"#FeignClient-调用流程\" class=\"headerlink\" title=\"FeignClient 调用流程\"></a>FeignClient 调用流程</h2><p><img src=\"/2020-10-19/feign/20191201125843452.png\" alt=\"Feign远程调用的基本流程\"></p>\n<p><img src=\"/2020-10-19/feign/20191201130543752.png\" alt=\"与 FeignInvocationHandler 相关的远程调用执行流程\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.im/post/6844903757671563272\" target=\"_blank\" rel=\"noopener\">Feign源码解析——初始化流程</a><br><a href=\"https://www.cnblogs.com/crazymakercircle/p/11965726.html\" target=\"_blank\" rel=\"noopener\">Feign原理 （图解）</a><br><a href=\"https://my.oschina.net/yyqz/blog/1820970?from=timeline&isappinstalled=0\" target=\"_blank\" rel=\"noopener\">教你如何在SpringMVC项目中单独使用Feign组件（含源码分析）</a></p>\n","tags":["源码","Tools","spring","feign"]},{"title":"通过DaoCloud的持续集成发布Hexo博客","url":"/2020-10-26/hexo-daocloud-cicd/","content":"<h1 id=\"通过DaoCloud的持续集成发布Hexo博客\"><a href=\"#通过DaoCloud的持续集成发布Hexo博客\" class=\"headerlink\" title=\"通过DaoCloud的持续集成发布Hexo博客\"></a>通过DaoCloud的持续集成发布Hexo博客</h1><h2 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h2><h3 id=\"private-代码拉取失败\"><a href=\"#private-代码拉取失败\" class=\"headerlink\" title=\"private 代码拉取失败\"></a>private 代码拉取失败</h3><p><strong>daocloud</strong> 创建项目时，可以通过第三方平台关联拉取，也可以直接添加 <code>git</code> 地址进行代码源拉取。<br>如果代码源是 <strong>private</strong> 项目时，最好通过与第三方平台账号进行关联，否则需要手动添加 <code>public_key</code>。<br><img src=\"/2020-10-26/hexo-daocloud-cicd/291603698195_.pic_hd.jpg\" alt=\"public_key_1\"><br><img src=\"/2020-10-26/hexo-daocloud-cicd/301603698335_.pic_hd.jpg\" alt=\"public_key_2\"></p>\n<h3 id=\"daocloud-账号与-github-账号绑定失败\"><a href=\"#daocloud-账号与-github-账号绑定失败\" class=\"headerlink\" title=\"daocloud 账号与 github 账号绑定失败\"></a>daocloud 账号与 github 账号绑定失败</h3><p>通过邮箱注册 <strong>daocloud</strong> 账号后，时间久了忘记了在这个平台注册过账号了，所以后面用 <strong>github</strong> 账号授权注册，发现邮箱已经注册过了。于是通过邮箱登录后，想与 github 账号进行绑定，但是一直提示 <strong>github</strong> 账号已经被绑定，通过 <strong>github</strong> 平台解除授权也不行，后来通过另一个邮箱与 <strong>github</strong> 账号进行了绑定。</p>\n<h3 id=\"流程定义\"><a href=\"#流程定义\" class=\"headerlink\" title=\"流程定义\"></a>流程定义</h3><p>通过本地 <code>daocloud.yml</code> 定义流程时，<code>Tab</code> 键必须是 <code>2个空格</code>,否则会提示格式异常，无法构建。</p>\n<h3 id=\"根据通过DaoCloud的持续集成发布Hexo博客-操作中遇到的问题\"><a href=\"#根据通过DaoCloud的持续集成发布Hexo博客-操作中遇到的问题\" class=\"headerlink\" title=\"根据通过DaoCloud的持续集成发布Hexo博客 操作中遇到的问题\"></a>根据<a href=\"#ref_link_1\">通过DaoCloud的持续集成发布Hexo博客</a> 操作中遇到的问题</h3><h4 id=\"1-Dockerfile-构建不成功——npm\"><a href=\"#1-Dockerfile-构建不成功——npm\" class=\"headerlink\" title=\"1. Dockerfile 构建不成功——npm\"></a>1. <code>Dockerfile</code> 构建不成功——npm</h4><p><strong>错误提示如下</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Step 5/8 : RUN npm install</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 09dab438166d</span><br><span class=\"line\">\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mnotice\u001b[0m\u001b[91m </span><br><span class=\"line\">\u001b[0m\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mnotice\u001b[0m\u001b[91m New patch version of npm available! 7.0.3 -&gt; 7.0.5</span><br><span class=\"line\">\u001b[0m\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mnotice\u001b[0m\u001b[91m Changelog: &lt;https://github.com/npm/cli/releases/tag/v7.0.5&gt;</span><br><span class=\"line\">\u001b[0m\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mnotice\u001b[0m\u001b[91m Run `npm install -g npm@7.0.5` to update!</span><br><span class=\"line\">\u001b[0m\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mnotice\u001b[0m\u001b[91m </span><br><span class=\"line\">\u001b[0m\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mERR!\u001b[0m\u001b[91m could not detect node name from path or package</span><br><span class=\"line\">\u001b[0m\u001b[91m</span><br><span class=\"line\">\u001b[0m\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mERR!\u001b[0m\u001b[91m A complete <span class=\"built_in\">log</span> of this run can be found <span class=\"keyword\">in</span>:</span><br><span class=\"line\">\u001b[0m\u001b[91mnpm\u001b[0m\u001b[91m \u001b[0m\u001b[91mERR!\u001b[0m\u001b[91m     /root/.npm/_logs/2020-10-26T08_44_45_121Z-debug.log</span><br><span class=\"line\">\u001b[0mRemoving intermediate container 09dab438166d</span><br><span class=\"line\">The <span class=\"built_in\">command</span> <span class=\"string\">'/bin/sh -c npm install'</span> returned a non-zero code: 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020-10-26/hexo-daocloud-cicd/311604397505_.pic_hd.jpg\" alt=\"ref_link_1_image_1\"></p>\n<p><strong>解决方案</strong>:将下面的命令去掉后，构建成功。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-server</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Dockerfile-构建不成功——wget\"><a href=\"#2-Dockerfile-构建不成功——wget\" class=\"headerlink\" title=\"2. Dockerfile 构建不成功——wget\"></a>2. <code>Dockerfile</code> 构建不成功——wget</h4><p><strong>错误关键字</strong>:<code>wget returned a non-zero code: 4</code>,错误提示如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">2020-11-04 06:15:12 (53.4 MB/s) - <span class=\"string\">'node-v12.14.0-linux-x64.tar.xz'</span> saved [14446796/14446796]</span><br><span class=\"line\">\u001b[0m</span><br><span class=\"line\">Removing intermediate container 7ac448b27174</span><br><span class=\"line\">The <span class=\"built_in\">command</span> <span class=\"string\">'/bin/sh -c wget https://nodejs.org/download/release/v12.14.0/node-v12.14.0-linux-x64.tar.xz | tar -xf &amp;&amp; mv node-v12.14.0-linux-x64 nodejs &amp;&amp; rm -rf /usr/local/bin/nodejs /usr/local/bin/node /usr/local/bin/npm &amp;&amp; mv nodejs /usr/local/bin &amp;&amp; ln -s /usr/local/bin/nodejs/bin/node /usr/local/bin/ &amp;&amp; ln -s /usr/local/bin/nodejs/bin/npm /usr/local/bin/'</span> returned a non-zero code: 64</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020-10-26/hexo-daocloud-cicd/321604475576_.pic_hd.jpg\" alt=\"ref_link_1_image_1\"><br>原因: <code>wget</code> 保存数据时异常，</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误的命令</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget https://nodejs.org/download/release/v12.14.0/node-v12.14.0-linux-x64.tar.xz</span></span><br><span class=\"line\"><span class=\"comment\"># 修改后的命令</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> wget -q https://nodejs.org/download/release/v12.14.0/node-v12.14.0-linux-x64.tar.xz -O /root/node-v12.14.0-linux-x64.tar.xz</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-hexo-d-命令异常\"><a href=\"#3-hexo-d-命令异常\" class=\"headerlink\" title=\"3. hexo d 命令异常\"></a>3. <code>hexo d</code> 命令异常</h4><p><strong><code>hexo d</code> 命令异常提示如下</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ hexo d</span><br><span class=\"line\">INFO  Deploying: git</span><br><span class=\"line\">INFO  Setting up Git deployment...</span><br><span class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /daocloud/builder/src/.deploy_git/.git/</span><br><span class=\"line\">[master (root-commit) f5821fc] First commit</span><br><span class=\"line\"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class=\"line\"> create mode 100644 placeholder</span><br><span class=\"line\">INFO  Clearing .deploy_git folder...</span><br><span class=\"line\">INFO  Copying files from public folder...</span><br><span class=\"line\">FATAL Something<span class=\"string\">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class=\"line\"><span class=\"string\">TypeError [ERR_INVALID_ARG_TYPE]: The \"mode\" argument must be integer. Received an instance of Object</span></span><br><span class=\"line\"><span class=\"string\">    at copyFile (node:fs:1976:10)</span></span><br><span class=\"line\"><span class=\"string\">    at tryCatcher (/daocloud/builder/src/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class=\"line\"><span class=\"string\">    at ret (eval at makeNodePromisifiedEval (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promisify.js:184:12), &lt;anonymous&gt;:13:39)</span></span><br><span class=\"line\"><span class=\"string\">    at /daocloud/builder/src/node_modules/hexo-deployer-git/node_modules/hexo-fs/lib/fs.js:144:39</span></span><br><span class=\"line\"><span class=\"string\">    at tryCatcher (/daocloud/builder/src/node_modules/bluebird/js/release/util.js:16:23)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromiseFromHandler (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:517:31)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromise (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:574:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromise0 (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:619:10)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromises (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:699:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._fulfill (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:643:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._resolveCallback (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:437:57)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromiseFromHandler (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:529:17)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromise (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:574:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromise0 (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:619:10)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromises (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:699:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._fulfill (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:643:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._resolveCallback (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:437:57)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromiseFromHandler (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:529:17)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromise (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:574:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromise0 (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:619:10)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._settlePromises (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:699:18)</span></span><br><span class=\"line\"><span class=\"string\">    at Promise._fulfill (/daocloud/builder/src/node_modules/bluebird/js/release/promise.js:643:18)</span></span><br></pre></td></tr></table></figure>\n\n<p>原因是 <strong>node</strong> 版本太高，跟换 <code>12.14</code> 版本的 <strong>node</strong> 即可。<br>在 <strong>Dockerfile</strong> 中进行版本更改，具体如下:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> node-v12.14.0-linux-x64.tar.xz .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mv node-v12.14.0-linux-x64 nodejs &amp;&amp; rm -rf /usr/<span class=\"built_in\">local</span>/bin/nodejs /usr/<span class=\"built_in\">local</span>/bin/node /usr/<span class=\"built_in\">local</span>/bin/npm &amp;&amp; mv nodejs /usr/<span class=\"built_in\">local</span>/bin &amp;&amp; ln -s /usr/<span class=\"built_in\">local</span>/bin/nodejs/bin/node /usr/<span class=\"built_in\">local</span>/bin/ &amp;&amp; ln -s /usr/<span class=\"built_in\">local</span>/bin/nodejs/bin/npm /usr/<span class=\"built_in\">local</span>/bin/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-hexo-command-not-found\"><a href=\"#4-hexo-command-not-found\" class=\"headerlink\" title=\"4. hexo: command not found\"></a>4. <code>hexo: command not found</code></h4><p>执行脚本 <code>hexo -v</code> 时，提示 <strong>hexo: command not found</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ hexo -v</span><br><span class=\"line\">/daocloud/builder/scripts/script: line 9: hexo: <span class=\"built_in\">command</span> not found</span><br></pre></td></tr></table></figure>\n\n<p>登录到容器中查看，发现 <code>hexo</code> 在之前版本替换时，ln 被删除了，重新 ln 一下就可以了，具体操作如下:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/bin/nodejs/bin/hexo /usr/<span class=\"built_in\">local</span>/bin/hexo</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><span id=\"ref_link_1\"><a href=\"https://yisihudong.com/2019/06/27/%E9%80%9A%E8%BF%87DaoCloud%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%8F%91%E5%B8%83Hexo%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">通过DaoCloud的持续集成发布Hexo博客</a><br><a href=\"https://evestorm.github.io/posts/430/\" target=\"_blank\" rel=\"noopener\">node14+版本下hexo部署失败</a><br><a href=\"https://zhuanlan.zhihu.com/p/136552969\" target=\"_blank\" rel=\"noopener\">部署Hexo踩过的坑—node14.0配置hexo</a><br><a href=\"https://nodejs.org/zh-cn/download/releases/\" target=\"_blank\" rel=\"noopener\">node各版本下载</a></span></p>\n","tags":["docker","hexo","CI/CD"]},{"title":"Dockerhub 镜像构建","url":"/2020-11-04/dockerhub/","content":"<h1 id=\"Dockerhub-镜像构建\"><a href=\"#Dockerhub-镜像构建\" class=\"headerlink\" title=\"Dockerhub 镜像构建\"></a>Dockerhub 镜像构建</h1><h2 id=\"Dockerhub-与-Github-进行关联\"><a href=\"#Dockerhub-与-Github-进行关联\" class=\"headerlink\" title=\"Dockerhub 与 Github 进行关联\"></a>Dockerhub 与 Github 进行关联</h2><p>操作如下:<br><img src=\"/2020-11-04/dockerhub/331604477650_.pic_hd.jpg\" alt=\"link_github\"></p>\n<h2 id=\"根据-Github-中-Dockerfile-进行构建\"><a href=\"#根据-Github-中-Dockerfile-进行构建\" class=\"headerlink\" title=\"根据 Github 中 Dockerfile 进行构建\"></a>根据 Github 中 Dockerfile 进行构建</h2><p>将 <strong>Dockerhub</strong> 中对应仓库配置 <code>Build Context</code> 指定到 <strong>Github</strong> 项目的子目录中，默认是 <code>/</code> 目录。<br>对应如下图所示:<br><img src=\"/2020-11-04/dockerhub/351604477864_.pic_hd.jpg\" alt=\"dockerhub_config\"><br><img src=\"/2020-11-04/dockerhub/341604477821_.pic_hd.jpg\" alt=\"github_path\"></p>\n<p>否则会提示如下错误:<br><img src=\"/2020-11-04/dockerhub/361604477904_.pic_hd.jpg\" alt=\"error_msg\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'.'</span>...</span><br><span class=\"line\">Warning: Permanently added the RSA host key <span class=\"keyword\">for</span> IP address <span class=\"string\">'140.82.113.3'</span> to the list of known hosts.</span><br><span class=\"line\">Reset branch <span class=\"string\">'master'</span></span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Dockerfile location <span class=\"string\">'./hexo_node'</span> points to a directory.Perhaps this was supposed to be the build path or you meant <span class=\"keyword\">for</span> <span class=\"string\">'./hexo_node/Dockerfile'</span> to be the dockerfile location.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><a href=\"https://github.com/jackfromcn/dockerfile\" target=\"_blank\" rel=\"noopener\">Github Dockerfile</a><br><a href=\"https://hub.docker.com/repository/docker/spring2java/hexo_node\" target=\"_blank\" rel=\"noopener\">Dockerhub</a></p>\n","tags":["docker","CI/CD"]},{"title":"linux 常用命令(四) —— jq","url":"/2020-11-13/linux-sh/","content":"<h1 id=\"linux-常用命令-——-jq\"><a href=\"#linux-常用命令-——-jq\" class=\"headerlink\" title=\"linux 常用命令 —— jq\"></a>linux 常用命令 —— jq</h1><h2 id=\"jq-命令安装\"><a href=\"#jq-命令安装\" class=\"headerlink\" title=\"jq 命令安装\"></a>jq 命令安装</h2><p>安装命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install jq</span><br><span class=\"line\">yum install jq</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h2><p>提取 <code>json</code> 数据时，如果属性名带有 <code>-</code> 则会报错，报错信息如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jq . json.txt|jq <span class=\"string\">'.trace-id'</span></span><br><span class=\"line\"></span><br><span class=\"line\">jq: error: trace/0 is not defined at &lt;top-level&gt;, line 1:</span><br><span class=\"line\">trace-id</span><br><span class=\"line\">jq: error: id/0 is not defined at &lt;top-level&gt;, line 1:</span><br><span class=\"line\">trace-id</span><br><span class=\"line\">jq: 2 compile errors</span><br></pre></td></tr></table></figure>\n\n<p>可以修改成如下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jq . json.txt|jq <span class=\"string\">'.\"trace-id\"'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://stedolan.github.io/jq/manual/\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><a href=\"https://www.jianshu.com/p/6de3cfdbdb0e\" target=\"_blank\" rel=\"noopener\">给力的linux命令–jq简易教程</a><br><a href=\"https://baijiahao.baidu.com/s?id=1653873327974562304&wfr=spider&for=pc\" target=\"_blank\" rel=\"noopener\">jq：命令行下解析JSON的神器</a></p>\n","tags":["linux"]},{"title":"使用mvn deploy命令将本地jar包上传到maven私服","url":"/2020-11-13/maven-deploy-jar/","content":"<h1 id=\"使用mvn-deploy命令将本地jar包上传到maven私服\"><a href=\"#使用mvn-deploy命令将本地jar包上传到maven私服\" class=\"headerlink\" title=\"使用mvn deploy命令将本地jar包上传到maven私服\"></a>使用mvn deploy命令将本地jar包上传到maven私服</h1><h2 id=\"deploy-jar包\"><a href=\"#deploy-jar包\" class=\"headerlink\" title=\"deploy jar包\"></a>deploy jar包</h2><p>项目开发过程中，除了需要将自己定义 <strong>maven</strong> 发布到内网的私有仓库中，也会有下载第三方 <code>jar</code> 包的情况，这时候如果想通过 <strong>maven</strong> 的 <code>pom.xml</code> 文件进行统一管理时，就需要将第三方 <code>jar</code> 包发布到私有仓库中，再进行依赖管理。<br><code>deploy</code> 命令如下，细节可以在<a href=\"#link_1\">使用mvn deploy命令将本地jar包上传到maven私服</a>查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn deploy:deploy-file -Dfile=G:\\hive_service.jar -DgroupId=com.cloudera.hive -DartifactId=hive-service -Dversion=v4-cdh-5.13.1 -Dpackaging=jar -Durl=http://192.168.110.240:9091/repository/maven-releases/ -DrepositoryId=nexus</span><br><span class=\"line\"></span><br><span class=\"line\">一一解释命令参数</span><br><span class=\"line\">-Dfile                  jar包文件路径</span><br><span class=\"line\">-DgroupId               groupId</span><br><span class=\"line\">-DartifactId            artifactId</span><br><span class=\"line\">-Dversion               version</span><br><span class=\"line\">-Dpackaging             jar</span><br><span class=\"line\">-Durl                   仓库地址</span><br><span class=\"line\">-DrepositoryId          配置的私服ID，即刚刚在setting.xml中的&lt;mirror&gt;下的&lt;id&gt;标签中配置的内容</span><br></pre></td></tr></table></figure>\n\n<p>安装 <code>jar</code> 包到本地仓库，记录备忘。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=C:\\Users\\zhangsf\\Desktop\\ipdatabase.jar -DgroupId=zhang.jar -DartifactId=ipdatabase -Dversion=1.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"deploy-中的错误\"><a href=\"#deploy-中的错误\" class=\"headerlink\" title=\"deploy 中的错误\"></a>deploy 中的错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file (default-cli) on project standalone-pom: The parameters &apos;url&apos; for goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy-file are missing or invalid -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n\n<p>缺少 <code>-Durl</code> 参数，在命令中添加即可，问题细节可以查看<a href=\"#link_3\">【maven】maven 项目 deploy 报错：Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7</a></p>\n<h2 id=\"deploy-401\"><a href=\"#deploy-401\" class=\"headerlink\" title=\"deploy 401\"></a>deploy 401</h2><p>错误提示如下:<br><img src=\"/2020-11-13/maven-deploy-jar/381605235704_.pic_hd.jpg\" alt=\"deploy-401\"><br><strong>原因</strong><br>需要 <strong>maven</strong> 的 <code>setting.xml</code> 文件中用户名密码。参考<a href=\"#link_2\">实战maven私有仓库三部曲之二：上传到私有仓库</a>。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/aljy/p/9669560.html\" target=\"_blank\" rel=\"noopener\">使用mvn deploy命令将本地jar包上传到maven私服</a><span id=\"link_1\"><br><a href=\"https://www.cnblogs.com/yhaing/p/8568043.html\" target=\"_blank\" rel=\"noopener\">实战maven私有仓库三部曲之二：上传到私有仓库</a><span id=\"link_2\"><br><a href=\"https://my.oschina.net/u/566545/blog/371514\" target=\"_blank\" rel=\"noopener\">Maven：利用mvn deploy命令将jar包上传到nexus服务器</a><br><a href=\"https://www.cnblogs.com/jackszc/p/9075521.html\" target=\"_blank\" rel=\"noopener\">mvn deploy部署jar包到私库</a><br><a href=\"https://zhangvalue.blog.csdn.net/article/details/81296120\" target=\"_blank\" rel=\"noopener\">自定义jar包发布到自己指定maven本地仓库</a><br><a href=\"https://www.cnblogs.com/sxdcgaq8080/p/12641149.html\" target=\"_blank\" rel=\"noopener\">【maven】maven 项目 deploy 报错：Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7</a><span id=\"link_3\"></span></span></span></p>\n"},{"title":"Gitlab强制推送提示\"You are not allowed to force push code to a protected branch on this project.\"","url":"/2020-11-17/git-push-f/","content":"<h1 id=\"Gitlab强制推送提示”You-are-not-allowed-to-force-push-code-to-a-protected-branch-on-this-project-”\"><a href=\"#Gitlab强制推送提示”You-are-not-allowed-to-force-push-code-to-a-protected-branch-on-this-project-”\" class=\"headerlink\" title=\"Gitlab强制推送提示”You are not allowed to force push code to a protected branch on this project.”\"></a>Gitlab强制推送提示”You are not allowed to force push code to a protected branch on this project.”</h1><p><strong>git master</strong>分支回滚操作:<br><img src=\"/2020-11-17/git-push-f/391605621038_.pic.jpg\" alt=\"history\"><br><img src=\"/2020-11-17/git-push-f/401605621232_.pic_hd.jpg\" alt=\"commitId\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git reset --hard f76c662640c6b78106ca8fe17f2fc5260a107cb2</span><br><span class=\"line\">git push -u origin master -f</span><br></pre></td></tr></table></figure>\n\n<p>推送命令后出现了这样的情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">E:\\xxx&gt;git push -f origin master</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'http://xxx@git.xxx.cn'</span>:</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote: GitLab: You are not allowed to force push code to a protected branch on this project.</span><br><span class=\"line\">To http://git.xxx.cn/xxx/xxx</span><br><span class=\"line\"> ! [remote rejected] master -&gt; master (pre-receive hook declined)</span><br><span class=\"line\">error: failed to push some refs to <span class=\"string\">'http://xxx@git.xxx.cn/xxx/xxx.git'</span></span><br></pre></td></tr></table></figure>\n\n<p>“GitLab: You are not allowed to force push code to a protected branch on this project.”<br>提示没有权限强制推送</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>只要一个分支加到 protect 中，就不能再 force push 了。此时能不能 push 是由前面的选项来决定的，选择了你的身份能 push，那就能 push；选择了能 merge，那就能 merge。<br>git push不上去的原因在于所push的分支权限为protected,只有项目的管理员或者项目的管理员指派的具有相应权限的人才能进行push,要进行项目的push,有如下两种方法：</p>\n<h3 id=\"1-将所要push的内容所在的分支的protected权限关闭\"><a href=\"#1-将所要push的内容所在的分支的protected权限关闭\" class=\"headerlink\" title=\"1.将所要push的内容所在的分支的protected权限关闭\"></a>1.将所要push的内容所在的分支的protected权限关闭</h3><p>(1)进入所在项目的settings<br>(2)点击进入Protected branches,点击unprotected将master分支的权限改变，即关闭master的protected权限</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://github.com/LeachZhou/blog/issues/11\" target=\"_blank\" rel=\"noopener\">Gitlab强制推送提示”You are not allowed to force push code to a protected branch on this project.”</a></p>\n","tags":["git"]},{"title":"linux 常用命令(四) —— netstat","url":"/2020-11-24/linux-sh/","content":"<h1 id=\"linux-常用命令-四-——-netstat\"><a href=\"#linux-常用命令-四-——-netstat\" class=\"headerlink\" title=\"linux 常用命令(四) —— netstat\"></a>linux 常用命令(四) —— netstat</h1><p>通过netstat -anp可以查看机器的当前连接状态。</p>\n<p>各字段：</p>\n<ul>\n<li>Proto</li>\n<li>Recv-Q</li>\n<li>Send-Q</li>\n<li>Local Address</li>\n<li>Foreign Address</li>\n<li>State</li>\n<li>PID/Program name</li>\n</ul>\n<p><code>Recv-Q</code> <code>Send-Q</code> 分别表示网络接收队列，发送队列。Q是Queue的缩写。<br>这两个值通常应该为0，如果不为0可能是有问题的。<code>packets</code> 在两个队列里都不应该有堆积状态。<br>可接受短暂的非0情况。如文中的示例，短暂的<code>Send-Q</code>队列发送<code>pakets</code>非0是正常状态。</p>\n<p>如果接收队列 <code>Recv-Q</code> 一直处于阻塞状态，可能是遭受了拒绝服务 denial-of-service 攻击。<br>如果发送队列 <code>Send-Q</code> 不能很快的清零，可能是有应用向外发送数据包过快，或者是对方接收数据包不够快。</p>\n<p><code>Recv-Q</code>：表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走，<code>recv()</code> 。<br><code>Send-Q</code>：对方没有收到的数据或者说没有Ack的,还是本地缓冲区。</p>\n<p>通过 <code>netstat</code> 的这两个值就可以简单判断程序收不到包到底是包没到还是包没有被进程recv。</p>\n<h1 id=\"统计-TCP-连接的状态\"><a href=\"#统计-TCP-连接的状态\" class=\"headerlink\" title=\"统计 TCP 连接的状态\"></a>统计 TCP 连接的状态</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -n | awk <span class=\"string\">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br></pre></td></tr></table></figure>\n\n","tags":["linux"]},{"title":"hexo-flow","url":"/2020-12-02/hexo-flow/","content":"<h1 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Title:时序图示例</span><br><span class=\"line\">客户端-&gt;服务端: 我想找你拿下数据 SYN</span><br><span class=\"line\">服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN</span><br><span class=\"line\">客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACK</span><br><span class=\"line\">Note right of 服务端: 我是一个服务端</span><br><span class=\"line\">Note left of 客户端: 我是一个客户端</span><br><span class=\"line\">Note over 服务端,客户端: TCP 三次握手</span><br><span class=\"line\">participant 观察者</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">ipt=&gt;inputoutput: 输入一个x</span><br><span class=\"line\">op=&gt;operation: 处理加工x+1</span><br><span class=\"line\">cond=&gt;condition: 溢出（是或否？）</span><br><span class=\"line\">sub=&gt;subroutine: 子流程</span><br><span class=\"line\">io=&gt;inputoutput: 输出x</span><br><span class=\"line\">ed=&gt;end: 结束</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;ipt-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;io-&gt;ed</span><br><span class=\"line\">cond(no)-&gt;sub-&gt;io-&gt;ed</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">ipt=&gt;inputoutput: 输入一个x</span><br><span class=\"line\">op=&gt;operation: 处理加工x+1</span><br><span class=\"line\">cond=&gt;condition: 溢出（是或否？）</span><br><span class=\"line\">sub=&gt;subroutine: 子流程</span><br><span class=\"line\">io=&gt;inputoutput: 输出x</span><br><span class=\"line\">ed=&gt;end: 结束</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;ipt-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;io-&gt;ed</span><br><span class=\"line\">cond(no)-&gt;sub-&gt;io-&gt;ed</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">ipt=&gt;inputoutput: 输入一个x</span><br><span class=\"line\">op=&gt;operation: 处理加工x+1</span><br><span class=\"line\">cond=&gt;condition: 溢出（是或否？）</span><br><span class=\"line\">sub=&gt;subroutine: 子流程</span><br><span class=\"line\">io=&gt;inputoutput: 输出x</span><br><span class=\"line\">ed=&gt;end: 结束</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;ipt-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;io-&gt;ed</span><br><span class=\"line\">cond(no)-&gt;sub-&gt;io-&gt;ed</span><br></pre></td></tr></table></figure>\n\n"},{"title":"spring transaction 事务(-)","url":"/2020-12-02/spring-transaction/","content":"<h1 id=\"spring-transaction-事务\"><a href=\"#spring-transaction-事务\" class=\"headerlink\" title=\"spring transaction 事务\"></a>spring transaction 事务</h1><p>methodA:<br>org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor#intercept<br>    org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation#proceed<br>        org.springframework.aop.framework.ReflectiveMethodInvocation#proceed<br>            org.springframework.transaction.interceptor.TransactionInterceptor#invoke<br>                org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction<br>                    org.springframework.transaction.interceptor.TransactionAspectSupport#createTransactionIfNecessary<br>                    org.springframework.aop.framework.CglibAopProxy.CglibMethodInvocation#proceed<br>                        org.springframework.aop.framework.ReflectiveMethodInvocation#proceed<br>                            org.springframework.aop.framework.ReflectiveMethodInvocation#invokeJoinpoint 调用实现方法</p>\n<p>执行完成:<br>org.springframework.transaction.interceptor.TransactionAspectSupport#cleanupTransactionInfo 清理事务<br>org.springframework.transaction.interceptor.TransactionAspectSupport#commitTransactionAfterReturning 提交事务<br>    org.springframework.transaction.support.AbstractPlatformTransactionManager#commit<br>        org.springframework.transaction.support.AbstractPlatformTransactionManager#processCommit</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process an actual commit.</span></span><br><span class=\"line\"><span class=\"comment\"> * Rollback-only flags have already been checked and applied.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> status object representing the transaction</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> TransactionException in case of commit failure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processCommit</span><span class=\"params\">(DefaultTransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">boolean</span> beforeCompletionInvoked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">boolean</span> unexpectedRollback = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">             prepareForCommit(status);</span><br><span class=\"line\">             triggerBeforeCommit(status);</span><br><span class=\"line\">             triggerBeforeCompletion(status);</span><br><span class=\"line\">             beforeCompletionInvoked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">             <span class=\"keyword\">if</span> (status.hasSavepoint()) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">                     logger.debug(<span class=\"string\">\"Releasing transaction savepoint\"</span>);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class=\"line\">                 status.releaseHeldSavepoint();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status.isNewTransaction()) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">                     logger.debug(<span class=\"string\">\"Initiating transaction commit\"</span>);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class=\"line\">                 doCommit(status);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class=\"line\">                 unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">             <span class=\"comment\">// Throw UnexpectedRollbackException if we have a global rollback-only</span></span><br><span class=\"line\">             <span class=\"comment\">// marker but still didn't get a corresponding exception from commit.</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (unexpectedRollback) &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnexpectedRollbackException(</span><br><span class=\"line\">                         <span class=\"string\">\"Transaction silently rolled back because it has been marked as rollback-only\"</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">catch</span> (UnexpectedRollbackException ex) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// can only be caused by doCommit</span></span><br><span class=\"line\">             triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">catch</span> (TransactionException ex) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// can only be caused by doCommit</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (isRollbackOnCommitFailure()) &#123;</span><br><span class=\"line\">                 doRollbackOnCommitException(status, ex);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                 triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class=\"line\">                 triggerBeforeCompletion(status);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             doRollbackOnCommitException(status, ex);</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">         <span class=\"comment\">// Trigger afterCommit callbacks, with an exception thrown there</span></span><br><span class=\"line\">         <span class=\"comment\">// propagated to callers but the transaction still considered as committed.</span></span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             triggerAfterCommit(status);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">             triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         cleanupAfterCompletion(status);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></code></pre><p><img src=\"/2020-12-02/spring-transaction/transaction.png\" alt=\"transaction流程\"><br><a href=\"/download/2020/2020-12-02-spring-transaction/事务管理器.pos\"><strong>transaction流程图</strong></a></p>\n","tags":["transation 事务"]},{"title":"hexo next 内容文本样式——左对齐","url":"/2020-12-08/hexo-style/","content":"<h1 id=\"hexo-next-内容文本样式——左对齐\"><a href=\"#hexo-next-内容文本样式——左对齐\" class=\"headerlink\" title=\"hexo next 内容文本样式——左对齐\"></a>hexo next 内容文本样式——左对齐</h1><p><strong>hexo</strong> 的 <strong>Pisces</strong> 样式是居中对齐的，但是写文章时，经常会引入代码片段，导致中英文及符号格式混合，文章居中对齐时，会出现如下图所示内容分割导致样式奇丑无比:<br><img src=\"/2020-12-08/hexo-style/431607421433_.pic_hd.jpg\" alt=\"link_style_demo\"><br>通过检索后修改 <code>themes/next/source/css/_schemes/Pisces/_posts.styl</code> 内容如下，发现并不好使。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 修改前</span><br><span class=\"line\">.post-body &#123;</span><br><span class=\"line\">  +mobile() &#123;</span><br><span class=\"line\">    text-align: justify;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改后</span><br><span class=\"line\">.post-body &#123;</span><br><span class=\"line\">  +mobile() &#123;</span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终通过下面<a href=\"#link_1\">文章</a>解决了问题。<br><img src=\"/2020-12-08/hexo-style/421607420848_.pic_hd.jpg\" alt=\"link_jpg\"><br>每个人的博客修改可能不太相同，我本次修改是这样的，修改 <code>themes/next/source/css/_schemes/Mist/_posts-expanded.styl</code> 文件内容,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 修改前</span><br><span class=\"line\">  .post-body &#123;</span><br><span class=\"line\">    +mobile() &#123; font-size: $font-size-small; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改后</span><br><span class=\"line\">  .post-body &#123;</span><br><span class=\"line\">    +mobile() &#123; font-size: $font-size-small; &#125;</span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><span id=\"link_1\"> <a href=\"https://www.jianshu.com/p/19089f2b99c6\" target=\"_blank\" rel=\"noopener\">next主题中设置mist主题内容居中</a></span></p>\n","tags":["hexo"]},{"title":"skywalking 监控工具","url":"/2020-12-11/skywalking/","content":"<h1 id=\"skywalking-监控工具\"><a href=\"#skywalking-监控工具\" class=\"headerlink\" title=\"skywalking 监控工具\"></a>skywalking 监控工具</h1><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.cnblogs.com/hellxz/p/11164478.html\" target=\"_blank\" rel=\"noopener\">Docker-Compose搭建单体SkyWalking 6.2</a><br><a href=\"https://www.jianshu.com/p/953dec0d54ce\" target=\"_blank\" rel=\"noopener\">skywalking实现分布式系统链路追踪</a></p>\n","tags":["skywalking","监控","tools"]},{"title":"vagrant","url":"/2020-12-11/vagrant/","content":"<h2 id=\"常用的几个vagrant命令\"><a href=\"#常用的几个vagrant命令\" class=\"headerlink\" title=\"常用的几个vagrant命令\"></a>常用的几个vagrant命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vagrant init      <span class=\"comment\"># 初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ vagrant up        <span class=\"comment\"># 启动虚拟机</span></span><br><span class=\"line\">$ vagrant halt      <span class=\"comment\"># 关闭虚拟机</span></span><br><span class=\"line\">$ vagrant reload    <span class=\"comment\"># 重启虚拟机</span></span><br><span class=\"line\">$ vagrant ssh       <span class=\"comment\"># SSH 至虚拟机</span></span><br><span class=\"line\">$ vagrant <span class=\"built_in\">suspend</span>   <span class=\"comment\"># 挂起虚拟机</span></span><br><span class=\"line\">$ vagrant resume    <span class=\"comment\"># 唤醒虚拟机</span></span><br><span class=\"line\">$ vagrant status    <span class=\"comment\"># 查看虚拟机运行状态</span></span><br><span class=\"line\">$ vagrant destroy   <span class=\"comment\"># 销毁当前虚拟机</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#box管理命令</span></span><br><span class=\"line\">$ vagrant box list    <span class=\"comment\"># 查看本地box列表</span></span><br><span class=\"line\">$ vagrant box add     <span class=\"comment\"># 添加box到列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ vagrant box remove  <span class=\"comment\"># 从box列表移除</span></span><br></pre></td></tr></table></figure>\n\n","tags":["vagrant"]},{"title":"netty 源码","url":"/2020-12-14/netty/","content":"<h1 id=\"netty-源码\"><a href=\"#netty-源码\" class=\"headerlink\" title=\"netty 源码\"></a>netty 源码</h1><h2 id=\"NIO-与-BIO-的对比\"><a href=\"#NIO-与-BIO-的对比\" class=\"headerlink\" title=\"NIO 与 BIO 的对比\"></a>NIO 与 BIO 的对比</h2><table>\n<thead>\n<tr>\n<th><strong>NIO</strong></th>\n<th><strong>BIO</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基于缓冲区(Buffer)</td>\n<td>基于流（Stream）</td>\n</tr>\n<tr>\n<td>非阻塞IO</td>\n<td>阻塞IO</td>\n</tr>\n<tr>\n<td>选择器(Selector)</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h3 id=\"基于-Buffer-与基于-Stream\"><a href=\"#基于-Buffer-与基于-Stream\" class=\"headerlink\" title=\"基于 Buffer 与基于 Stream\"></a>基于 Buffer 与基于 Stream</h3><ol>\n<li><p>什么是<strong>基于 Stream</strong> 呢？<br>在一般的 Java IO 操作中，我们以<strong>流式</strong>的方式，<strong>顺序</strong>的从一个 Stream 中读取一个或者多个字节，直至读取所有字节。因为它没有缓存区，所以我们就不能随意改变读取指针的位置。</p>\n</li>\n<li><p>什么是<strong>基于 Buffer</strong> 呢？<br>基于 Buffer 就显得有点不同了。我们在从 Channel 中读取数据到 Buffer 中，这样 Buffer 中就有了数据后，我们就可以对这些数据进行操作了。并且不同于一般的 Java IO 操作那样是<strong>顺序</strong>操作，NIO 中我们可以随意的读取任意位置的数据，这样大大增加了处理过程中的灵活性。</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://svip.iocoder.cn/categories/Netty/\" target=\"_blank\" rel=\"noopener\">精尽 Netty 源码分析</a></p>\n","tags":["netty"]},{"title":"MySQL锁机制知识","url":"/2020-12-17/mysql-lock/","content":"","tags":["mysql"]},{"title":"短链接服务实现方案","url":"/2020-12-17/short-link/","content":"<h1 id=\"短链接服务实现方案\"><a href=\"#短链接服务实现方案\" class=\"headerlink\" title=\"短链接服务实现方案\"></a>短链接服务实现方案</h1><p>短链接是一个中转服务，在用户访问短链接的时候，通过 302 重定向至长链接<br>实现原理: 把原始链接压缩为 5 个字符的短链接(有额外的域名)，并存储短链接和原始链接的对应关系，当用户访问短链接时，通过 302 重定向至原始链接<br>结构: java + redis + mysql</p>\n<ol>\n<li>生成一个短链接时,将 <strong>短链接</strong> 和 原始链接的映射关系储存至 mysql,同时缓存至redis</li>\n<li>当用户访问一个短链接接时,从db读(redis缓存)出其对应的长链接,向用户发送302重定向</li>\n</ol>\n<p>编码方法:</p>\n<ol>\n<li>短链接目前编码长度为5字符，采用64进制，字符集 <code>0-9a-zA-Z_-</code>; 编码空间 64^5=1,073,741,824</li>\n<li>映射算法,将 <em>url</em> 与一个随机数量进行 <em>md5*，取 *md5</em> 结果的前 3 个字节(3<em>8=24位),转换成 64 进制的 4 个字符(4</em>6=24位);编码冲突的时候,更换随机数重新生成 </li>\n<li>映射前会查询该url是否已经存在,相同 <em>url</em> 多次申请短链接,得到得结果相同</li>\n</ol>\n<p><strong>安全</strong><br>仅允许指定相关域名(为测试方便,目前未做限制)</p>\n<p><strong>统计</strong><br>统计应减少对转发速度的影响,因此使用本地缓存,异步记录到mysql</p>\n<p><strong>扩展</strong><br>如果未来应用广泛，并发量过高，可以很方便地扩展 </p>\n<ol>\n<li>在 <em>jetty</em> 之前挡一层 <em>nginx</em>,<em>nginx*做缓存,可使得经常访问的链接不走 *jetty</em> 和 <em>redis</em>,提高速度 </li>\n<li>如果加入 <em>nginx</em> 性能还不够理想,可以使用 <em>nginx</em> 使用 <em>lua</em> 直接访问 <em>redis</em>,完全绕过<em>jetty</em></li>\n</ol>\n<p><strong>接口</strong></p>\n<ol>\n<li>申请url接口 </li>\n<li>用户访问</li>\n<li>管理接口</li>\n<li>统计查询</li>\n</ol>\n<p><strong>短连接简单demo</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.common.io.BaseEncoding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.NoSuchAlgorithmException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShortLinkController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, String&gt; cache = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] pem_array = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[]&#123;<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>, <span class=\"string\">'H'</span>, <span class=\"string\">'I'</span>, <span class=\"string\">'J'</span>, <span class=\"string\">'K'</span>, <span class=\"string\">'L'</span>, <span class=\"string\">'M'</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'O'</span>, <span class=\"string\">'P'</span>, <span class=\"string\">'Q'</span>, <span class=\"string\">'R'</span>, <span class=\"string\">'S'</span>, <span class=\"string\">'T'</span>, <span class=\"string\">'U'</span>, <span class=\"string\">'V'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'X'</span>, <span class=\"string\">'Y'</span>, <span class=\"string\">'Z'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'p'</span>, <span class=\"string\">'q'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>, <span class=\"string\">'u'</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'_'</span>, <span class=\"string\">'-'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/short-url/create\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">create</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = pem_array[<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">64</span>)];</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] md5s = MessageDigest.getInstance(<span class=\"string\">\"md5\"</span>).digest(url.getBytes());</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">            System.arraycopy(md5s, <span class=\"number\">0</span>, bytes, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">            String encode = BaseEncoding.base64Url().encode(bytes);</span><br><span class=\"line\">            String shortUrl = encode + c;</span><br><span class=\"line\">            cache.put(shortUrl, url);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> shortUrl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;shortUrl&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">redirectUrl</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"shortUrl\"</span>)</span> String shortUrl) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache.containsKey(shortUrl)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache.get(shortUrl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建短连接</span></span><br><span class=\"line\">curl -XPOST <span class=\"string\">\"http://localhost:8080/short-url/create?url=http://www.baidu.com\"</span></span><br><span class=\"line\"><span class=\"comment\"># 获取短连接</span></span><br><span class=\"line\">curl -XGET <span class=\"string\">\"http://localhost:8080/v6ies\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压力测试</span></span><br><span class=\"line\"> ab -n 4000 -c 200 http://localhost:8080/v6ies</span><br></pre></td></tr></table></figure>","tags":["短连接","技术"]},{"title":"(转)自己开通 Apple Watch ECG 功能","url":"/2020-12-18/iwatch-ecg/","content":"<h1 id=\"转-自己开通-Apple-Watch-ECG-功能\"><a href=\"#转-自己开通-Apple-Watch-ECG-功能\" class=\"headerlink\" title=\"(转)自己开通 Apple Watch ECG 功能\"></a>(转)自己开通 Apple Watch ECG 功能</h1><p>本文為全球首發教學，轉載請附上原本連結，謝謝。此外，在開始本教學之前，有幾點非常重要，請大家看清楚。</p>\n<p>本教學僅供技術研究使用，在未經許可的國家開啟 ECG 功能，甚至販賣「開通的服務」可能觸犯當地相關法律<br>Apple 有可能隨時改變遊戲規則<br>跟 iCloud 污染法不同，這個方法如果換手機配對手錶可能需要重新操作一次，即使兩隻手機是用同一個 iCloud 帳號也是。<br>必備條件：</p>\n<p>Apple Watch S4 以上版本<br>任何可以 Apple Watch 4 代以上的 iPhone<br>可開通的 iOS + watchOS 版本組合（請看下表）<br>iMazing (購買優惠網址，運費選 0 元，它不會真的寄出，賣家會訊息給你正版序號)，PC / Mac 應該都可以，Windows 請確定你的系統是 64bit 的才行<br>ECG 啟用檔案 (<a href=\"/download/2020/2020-12-18-iwatch-ecg/ECG_Activate.zip\">v1</a>、<a href=\"/download/2020/2020-12-18-iwatch-ecg/ECG_Activate_v2.zip\">v2</a>) 下載之後請解壓縮，會得到一個 .plist 檔案<br>手機的「健康」App 必須要有任何紀錄（正常應該都會有啦…）</p>\n<p>版本組合與可用狀態：</p>\n<table>\n<thead>\n<tr>\n<th>iOS</th>\n<th>watchOS</th>\n<th>可用此法開通</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>12.2 ~ 13.1.1</td>\n<td>5.2 ~ 6.0</td>\n<td>未知（可能可以）</td>\n</tr>\n<tr>\n<td>13.1.2 ~ 13.3.1</td>\n<td>6.0.1 ~ 6.1.3</td>\n<td>可，限定可開通 ECG 國家</td>\n</tr>\n<tr>\n<td>13.4 ~ 13.4.1</td>\n<td>6.2 ~ 6.2.1</td>\n<td>不可</td>\n</tr>\n<tr>\n<td>13.5 ~ 13.7</td>\n<td>6.2.5 ~ 6.2.8</td>\n<td>可，任何國家</td>\n</tr>\n<tr>\n<td>14.0 ~</td>\n<td>6.2.5 ~ 6.2.8</td>\n<td>可，任何國家</td>\n</tr>\n<tr>\n<td>14.0 ~</td>\n<td>7.0 ~ 7.0.1</td>\n<td>不可，這是 watchOS 的 bug，請升級</td>\n</tr>\n<tr>\n<td>14.0 ~ 14.2</td>\n<td>7.0.2~7.1</td>\n<td>可</td>\n</tr>\n<tr>\n<td>14.3 ~</td>\n<td>7.2 ~</td>\n<td>可，使用 v2 檔案</td>\n</tr>\n</tbody></table>\n<p>注意：已知iOS 14 以上很容易恢復備份後死機，這是 iOS 14 的 bug，並不是 iMazing 的問題，請先預留足夠的時間進行重複操作，以防萬一。</p>\n<p>測試環境：</p>\n<ol>\n<li>台版 iPhone XR iOS 13.1.2（完全乾淨重刷，手機地區完全不影響）</li>\n<li>Apple Watch 4 代港版 watchOS 6.0.1</li>\n<li>日本 iCloud 帳號（日本為非開通地區，帳號地區完全不影響）</li>\n</ol>\n<p>在之前跟 x43x61x69 大大的研究中，我注意到了開啟 ECG 功能之後會在「健康」紀錄裡面寫入兩個標記。所以反過來說，我們只要把「健康」資料裡面寫入那兩個標記，不就開通了嗎？</p>\n<p>經過詳細的研究之後，我發現確實跟這兩個標記有關，但是並非直接改「健康」資料，而是用更簡單的方法。但無論如何，需要修改手機的備份檔案。這時候就要用第三方軟體 iMazing 了，如果你沒有購買的話，可以點這邊購買正版，官網賣 45 美金（約 1400 台幣），透過折價券只要 94 人民幣（400 台幣左右），如果你有兩台電腦，買雙授權更划算！</p>\n<p>更新：iMazing 偷吃步免付費法可以繼續往下看</p>\n<p>為了讓手錶能夠正確讀取我們之後導入的 ECG 開通資訊，請先<strong>解除手錶的配對</strong>。接著，用 iMazing 對手機做一次加密備份，打開 iMazing 應該會跳出如下的畫面叫你設定備份選項。</p>\n<p>▼ 接著注意設定如下，<strong>備份加密的選項一定要開，否則你之前的「健康」紀錄不會備份到</strong>，其他選項可以照自己的意思隨意調整，預設狀態不用動也可以。<br><img src=\"/2020-12-18/iwatch-ecg/iMazing_Backup_Settings_jpg.jpg\" alt></p>\n<p>▼ 設定完成之後，就按備份以建立一份加密備份<br><img src=\"/2020-12-18/iwatch-ecg/iMazing_Click_Backup.jpg\" alt></p>\n<p>▼ 接著，按上面的按鈕以顯示所有備份，再選擇我們剛剛的備份，最後再選擇編輯<br><img src=\"/2020-12-18/iwatch-ecg/iMazing_Device_Backups.jpg\" alt></p>\n<p>接下來會 iMazing 會跟你說亂改備份很危險，要先叫你做「備份的備份」，就直接按繼續，等他跑完。</p>\n<p>▼ 再來，看到 iMazing 左邊往下滑，會出現「可以編輯的備份」，按照下圖選到 <code>HomeDomain/Library/Preferences</code> 裡面<br><img src=\"/2020-12-18/iwatch-ecg/ECG_activation_file_path.jpg\" alt></p>\n<p>接著，找到我們上面說要下載的「ECG 啟用檔案」，解壓縮得到一個 <code>com.apple.private.health.heart-rhythm.plist</code></p>\n<p>▼ 把這個檔案複製到備份檔的 <code>HomeDomain/Library/Preferences</code> 資料夾底下，如果出現警告說要覆蓋，就確定讓他覆蓋吧<br><img src=\"/2020-12-18/iwatch-ecg/Select_ECG_activation_file.jpg\" alt></p>\n<p>▼ 選回我們修改過的備份，然後按「還原」，接下來選機器<br><img src=\"/2020-12-18/iwatch-ecg/iMazing_Restore_Backup.jpg\" alt></p>\n<p>▼ 補充 iMazing 偷吃步免費法：對剛剛修改好的備份選擇用資料夾方式輸出，然後放到 <code>~/Library/Application Support/MobileSync/Backup/</code> 底下，之後再用 Finder/iTunes 還原備份（不透過 iMazing 還原），這樣過程就完全不需要用到 iMazing 付費功能！（路徑為 macOS 用，Windows 版請爬文找對應路徑）<br><img src=\"/2020-12-18/iwatch-ecg/iMazing_Export_Folder.jpg\" alt></p>\n<p>▼ 如果你有用 eSIM，請不要勾選 iMazing 的「清除內容」，有可能導致 eSIM 消失，如果空間不足，先去刪照片、或者同步的音樂之類的，反正備份會還原照片，甚至 DFU 重刷也可以，DFU 不會導致 eSIM 消失<br><img src=\"/2020-12-18/iwatch-ecg/iMazing_do_not_erase.jpg\" alt></p>\n<p>還原完成之後，重新配對 Apple Watch，請選擇新的 Apple Watch，<strong>不要還原手錶備份</strong>。</p>\n<p>配對完成之後，你就可以使用 ECG 功能了。如果配對完成後發現心電圖 App 一直卡在安裝中，嘗試重開機，重開機若無效，需要重新配對，但應該就會正常。<br><img src=\"/2020-12-18/iwatch-ecg/ECG-Testing.jpg\" alt></p>\n<p>附註：若出現 com.apple.security.xpc error 訊息，請直接在手機裡面選擇清除所有資料與內容，再嘗試還原備份</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://hiraku.tw/2019/10/4911/\" target=\"_blank\" rel=\"noopener\">不求人，自己開通海外版本 Apple Watch ECG 功能</a></p>\n","tags":["iwatch","ECG"]},{"title":"(转)拯救marginnote3","url":"/2021-02-01/marginnote3/","content":"<h1 id=\"转-拯救marginnote3\"><a href=\"#转-拯救marginnote3\" class=\"headerlink\" title=\"(转)拯救marginnote3\"></a>(转)拯救marginnote3</h1><blockquote>\n<p>原文链接：<a href=\"https://www.cmboy.com/962.html\" target=\"_blank\" rel=\"noopener\">https://www.cmboy.com/962.html</a><br>鉴于很多网友看文章不仔细，导致安装ipa文件后无法恢复购买，特在文章前强调：<br>安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！ 安装ipa请用电脑+imazing！</p>\n</blockquote>\n<p>8月7日的 MarginNote 3 更新升级得爽不爽? 一大堆小伙伴在公众号后台留言叫惨，啧啧，然后嚷嚷着要自己买，哈哈，88块钱，用的频繁的话就自己买一个吧，支持开发者！也可以退而求其次用 MarginNote Pro…<br><img src=\"/2021-02-01/marginnote3/1585892924-1568455537-20B94358-8449-422E-9667-35099ABC08D3-768x1024-1.jpeg\" alt=\"拯救marginnote3-草蜢资源\"><br><img src=\"/2021-02-01/marginnote3/1585892924-B522BB32-00FA-4A67-A132-194B694F6F3D-768x1024-1.jpeg\" alt=\"拯救marginnote3-草蜢资源\"></p>\n<p>不过，MarginNote 3 还是可以用的，收到小伙伴反馈之后，草蜢就把上个版本的.ipa文件抓下来了，当初买 MarginNote 3 让大家点恢复购买是不是没找到地方在哪啊？嘿嘿，这次机会来了！</p>\n<p><code>接下来请一步一步跟着我做：</code></p>\n<p>1.在微信公众号“<a href=\"https://ios.zjexam.cn/wp-content/themes/blackmirror/assets/images/qr.png\" target=\"_blank\" rel=\"noopener\">草蜢资源</a>”后台发送：“MarginNote3 ”获取 MarginNote 3 的已内购账号密码，登录 App Store。<br><img src=\"/2021-02-01/marginnote3/1585892924-D58981C1-B142-421E-8B6C-B52232C26DD3-768x1024-1.jpeg\" alt=\"拯救marginnote3-草蜢资源\"></p>\n<p>2.下载两个ipa文件。<br><img src=\"/2021-02-01/marginnote3/1585892924-3F28F684-659B-44C3-862B-9163CC4D1CA2.png\" alt=\"拯救marginnote3-草蜢资源\"></p>\n<p>文件1：<a href=\"/download/2021/2021-02-01-marginnote3/MarginNote1.ipa\">MarginNote1.ipa</a></p>\n<p>文件2：<a href=\"/download/2021/2021-02-01-marginnote3/MarginNote2.ipa\">MarginNote2.ipa</a></p>\n<p>3.通过 iMazing 安装 .ipa 文件（为什么是iMazing？因为目前我测试了几种方法安装ipa，目前只有通过iMazing安装ipa之后，成功恢复内购…）</p>\n<p>iMazing官网：<a href=\"https://imazing.com/zh/download\" target=\"_blank\" rel=\"noopener\">https://imazing.com/zh/download</a><br><img src=\"/2021-02-01/marginnote3/1585892924-2D330532-7ECB-401F-BC8A-745B8D7999D2.png\" alt=\"拯救marginnote3-草蜢资源\"></p>\n<p>4.管理应用程序 - 设备 - 安装 .ipa 文件<br><img src=\"/2021-02-01/marginnote3/1585892925-1A8F1048-3613-402F-B235-36FBB5C5144F.png\" alt=\"拯救marginnote3-草蜢资源\"></p>\n<p>5.先安装MarginNote1.ipa 到你的iPhone 或者 iPad。</p>\n<p>完成后打开应用 - 三个点 - 应用内购买 - 点恢复内购！<br><img src=\"/2021-02-01/marginnote3/1585892925-BC0DD934-D82E-4FE2-8256-8CA054C38AF2-768x1024-1.jpeg\" alt=\"拯救marginnote3-草蜢资源\"><br><img src=\"/2021-02-01/marginnote3/1585892925-5C11C9F8-F2C0-4844-B029-C34EB29F885D-768x1024-1.jpeg\" alt=\"拯救marginnote3-草蜢资源\"></p>\n<p>恢复内购之后你就找不到应用内购买的入口了，说明恢复成功！</p>\n<p>6.恢复购买之后不要去看 App Store 更新！<strong>继续覆盖安装 MarginNote2.ipa</strong></p>\n<p>然后就是你可以永久用这个版本的 MarginNote 3 了，而且以后不会有让你更新升级的提示~ 避免强迫症晚期的你手抖地总想升级 Ta … </p>\n","tags":["tools"]},{"title":"GitHub's file size limit of 100.00 MB解决办法","url":"/2021-02-02/GitHub-s-file-size-limit-of-100MB/","content":"<h1 id=\"GitHub’s-file-size-limit-of-100-00-MB解决办法\"><a href=\"#GitHub’s-file-size-limit-of-100-00-MB解决办法\" class=\"headerlink\" title=\"GitHub’s file size limit of 100.00 MB解决办法\"></a>GitHub’s file size limit of 100.00 MB解决办法</h1><blockquote>\n<p><a href=\"https://juejin.cn/post/6844904205476478989\" target=\"_blank\" rel=\"noopener\">GitHub’s file size limit of 100.00 MB解决办法</a><br><a href=\"https://docs.github.com/cn/github/managing-large-files/installing-git-large-file-storage\" target=\"_blank\" rel=\"noopener\">lfs官方文档</a></p>\n</blockquote>\n<h2 id=\"1-下载-amp-安装-Git-LFS\"><a href=\"#1-下载-amp-安装-Git-LFS\" class=\"headerlink\" title=\"1. 下载&amp;安装 Git LFS\"></a>1. 下载&amp;安装 Git LFS</h2><p><a href=\"/download/2021/2021-02-02-GitHub-s-file-size-limit-of-100MB/git-lfs-darwin-amd64-v2.13.2.zip\">Git LFS安装包</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/Downloads/git-lfs-1.X.X</span><br><span class=\"line\"><span class=\"comment\"># 安装该文件</span></span><br><span class=\"line\">$ ./install.sh</span><br><span class=\"line\"> &gt; Git LFS initialized.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装成功</span></span><br><span class=\"line\">$ git lfs install</span><br><span class=\"line\">&gt; Git LFS initialized.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-上传大文件\"><a href=\"#2-上传大文件\" class=\"headerlink\" title=\"2. 上传大文件\"></a>2. 上传大文件</h2><blockquote>\n<p><a href=\"https://docs.github.com/cn/github/managing-large-files/configuring-git-large-file-storage\" target=\"_blank\" rel=\"noopener\">配置 Git Large File Storage</a></p>\n</blockquote>\n<ol>\n<li>打开 Terminal（终端）。</li>\n<li>将当前工作目录更改为要用于 Git LFS 的现有仓库。</li>\n<li>要将仓库中的文件类型与 Git LFS 相关联，请输入 git lfs track，后跟要自动上传到 Git LFS 的文件扩展名。<br>例如，要关联 .psd 文件，请输入以下命令：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git lfs track <span class=\"string\">\"*.psd\"</span></span><br><span class=\"line\">&gt; Adding path *.psd</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>要与 Git LFS 关联的每个文件类型都需要添加 git lfs track。 此命令将修改仓库的 .gitattributes 文件，并将大文件与 Git LFS 相关联。</p>\n<blockquote>\n<p>提示：我们强烈建议您将本地 .gitattributes 文件提交到仓库中。 依赖与 Git LFS 关联的全局 .gitattributes 文件，可能会导致在参与其他 Git 项目时发生冲突。</p>\n</blockquote>\n<ol start=\"4\">\n<li><p>将文件添加到与关联的扩展名相匹配的仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git add path/to/file.psd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交文件并将其推送到 GitHub：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"add file.psd\"</span></span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>您会看到一些有关文件上传的诊断信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; Sending file.psd</span><br><span class=\"line\">&gt; 44.74 MB / 81.04 MB  55.21 % 14s</span><br><span class=\"line\">&gt; 64.74 MB / 81.04 MB  79.21 % 3s</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong><br>大文件提交必须在创建好 <code>git lfs</code> 之后才行，不然没法提交。<br>即使通过 <code>git rm --cache 文件名</code> 删除本地缓存，实际上也是先添加再删除，因此还是会提交失败。<br>可以在提交前先检查一下是否存在大文件后再提交。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 目标项目path</span><br><span class=\"line\">find ./ -size +100M</span><br></pre></td></tr></table></figure>\n\n","tags":["问题"]},{"title":"IntelliJ IDEA搭建kafka源码环境","url":"/2019-09-27/IntelliJ-IDEA%E6%90%AD%E5%BB%BAkafka%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83/","content":"<h2 id=\"fork-kafka源码\"><a href=\"#fork-kafka源码\" class=\"headerlink\" title=\"fork kafka源码\"></a>fork <a href=\"https://github.com/apache/kafka\" target=\"_blank\" rel=\"noopener\">kafka源码</a></h2><p><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/fork-kafkasource-2019-09-27.jpg\" alt=\"fork kafka源码\"></p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><ol>\n<li>jdk 环境配置</li>\n<li>scala 环境配置</li>\n<li>gradle 安装配置</li>\n<li>maven 安装配置</li>\n<li>zookeeper 安装配置</li>\n<li>IntelliJ IDEA中安装scala插件<br> <img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/Intellij-IDEA-install-scala-plugins.jpg\" alt=\"Intellij-IDEA-install-scala-plugins\"></li>\n</ol>\n<h2 id=\"idea-导入-kafka-源码\"><a href=\"#idea-导入-kafka-源码\" class=\"headerlink\" title=\"idea 导入 kafka 源码\"></a>idea 导入 kafka 源码</h2><h3 id=\"导入前优化\"><a href=\"#导入前优化\" class=\"headerlink\" title=\"导入前优化\"></a>导入前优化</h3><h4 id=\"gradle-配置加速\"><a href=\"#gradle-配置加速\" class=\"headerlink\" title=\"gradle 配置加速\"></a>gradle 配置加速</h4><p>将项目路径下 <code>gradle/wrapper</code> 目录下的 <code>gradle-wrapper.properties</code> 文件的 <strong>distributionUrl</strong> 指定为本地的 gradle 压缩包。如下所示:<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/gradleWrapper-distributionUrl.jpg\" alt=\"gradleWrapper distributionUrl 指定本地压缩包\"></p>\n<h5 id=\"项目-scala-版本与-本地-scala-运行环境版本配置保持一致\"><a href=\"#项目-scala-版本与-本地-scala-运行环境版本配置保持一致\" class=\"headerlink\" title=\"项目 scala 版本与 本地 scala 运行环境版本配置保持一致\"></a>项目 scala 版本与 本地 scala 运行环境版本配置保持一致</h5><p>将项目路径下的 <code>gradle.properties</code> 的 <strong>scalaVersion</strong> 指定为本地 scala 环境保持一致</p>\n<h4 id=\"gradle-repositories-加速\"><a href=\"#gradle-repositories-加速\" class=\"headerlink\" title=\"gradle repositories 加速\"></a>gradle repositories 加速</h4><p>修改项目路径下的 <code>build.gradle</code> 的 <strong>repositories</strong>，修改后内容如下:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">  maven &#123; url <span class=\"string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class=\"line\">  maven&#123; url <span class=\"string\">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>![gradle-repositories](2019-09-27-IntelliJ-IDEA搭建kafka源码环境/gradle-repositories.jpg)</code></pre><h3 id=\"导入源码\"><a href=\"#导入源码\" class=\"headerlink\" title=\"导入源码\"></a>导入源码</h3><p>上面的优化完成后，将 kafka 源码导入 idea，等待 gradle 完成依赖下载。下载源修改为 阿里云 后，就比较快了。如果用的是 maven 仓库中心，则下载速度会比较慢，一般会下载几个小时，中间可能会失败，需要重新下载。</p>\n<h3 id=\"运行环境配置\"><a href=\"#运行环境配置\" class=\"headerlink\" title=\"运行环境配置\"></a>运行环境配置</h3><p>核心调试代码在 core 模块下</p>\n<h4 id=\"日志文件-log4j-properties-配置文件添加\"><a href=\"#日志文件-log4j-properties-配置文件添加\" class=\"headerlink\" title=\"日志文件 log4j.properties 配置文件添加\"></a>日志文件 log4j.properties 配置文件添加</h4><p>kafka 运行日志输出使用的是 log4j，需要 log4j 的配置文件，将项目路径下的 config/log4j.properties 拷贝到项目路径 <code>core/src/main/scala</code> 目录下。</p>\n<h4 id=\"server-启动配置文件-server-properties-修改\"><a href=\"#server-启动配置文件-server-properties-修改\" class=\"headerlink\" title=\"server 启动配置文件 server.properties 修改\"></a>server 启动配置文件 server.properties 修改</h4><p>可以直接修改项目路径下 <code>config/server.properties</code> 的配置内容</p>\n<h4 id=\"server-启动配置\"><a href=\"#server-启动配置\" class=\"headerlink\" title=\"server 启动配置\"></a>server 启动配置</h4><p>【idea】操作路径: run -&gt; Edit Configrations.. -&gt; + -&gt; Application<br>配置内容：</p>\n<ul>\n<li><strong>Main class</strong>: <code>kafka.Kafka</code></li>\n<li><strong>Program arguments</strong>: <code>config/server.properties</code></li>\n<li><strong>Use classpath of module</strong>: <code>core_main</code><br>配置如下:<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/kafka-server-config.jpg\" alt=\"kafka server 启动配置\"></li>\n</ul>\n<h4 id=\"producer-启动配置\"><a href=\"#producer-启动配置\" class=\"headerlink\" title=\"producer 启动配置\"></a>producer 启动配置</h4><p>【idea】操作路径和上面 server 启动配置一致<br>配置内容：</p>\n<ul>\n<li><strong>Main class</strong>: <code>kafka.tools.ConsoleProducer</code></li>\n<li><strong>Program arguments</strong>: <code>--topic kafka-debug --broker-list localhost:9092</code></li>\n<li><strong>Use classpath of module</strong>: <code>core_main</code><br>配置如下:<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/kafka-producer-config.jpg\" alt=\"kafka producer 启动配置\"></li>\n</ul>\n<h4 id=\"consumer-启动配置\"><a href=\"#consumer-启动配置\" class=\"headerlink\" title=\"consumer 启动配置\"></a>consumer 启动配置</h4><p>【idea】操作路径和上面 server 启动配置一致<br>配置内容：</p>\n<ul>\n<li><strong>Main class</strong>: <code>kafka.tools.ConsoleConsumer</code></li>\n<li><strong>Program arguments</strong>: <code>--bootstrap-server localhost:9092 --topic kafka-debug --from-beginning</code></li>\n<li><strong>Use classpath of module</strong>: <code>core_main</code><br>配置如下:<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/kafka-consumer-config.jpg\" alt=\"kafka consumer 启动配置\"></li>\n</ul>\n<h4 id=\"启动测试\"><a href=\"#启动测试\" class=\"headerlink\" title=\"启动测试\"></a>启动测试</h4><ol>\n<li>启动 server</li>\n<li>启动 producer</li>\n<li>启动 consumer<br>启动正常后，producer 控制台发送消息，consumer 控制台观察监听消息，如下图所示：<br>kafka server 启动控制台<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/kafka-server-start-console.jpg\" alt=\"kafka server 启动控制台\"></li>\n</ol>\n<p>kafka producer 启动控制台<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/kafka-producer-start-console.jpg\" alt=\"kafka producer 启动控制台\"></p>\n<p>kafka consumer 启动控制台<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/kafka-consumer-start-console.jpg\" alt=\"kafka consumer 启动控制台\"></p>\n<h4 id=\"启动过程中提示测错误\"><a href=\"#启动过程中提示测错误\" class=\"headerlink\" title=\"启动过程中提示测错误\"></a>启动过程中提示测错误</h4><h5 id=\"Error-scalac-Error-org-jetbrains-jps-incremental-scala-remote-ServerException-java-lang-StackOverflowError\"><a href=\"#Error-scalac-Error-org-jetbrains-jps-incremental-scala-remote-ServerException-java-lang-StackOverflowError\" class=\"headerlink\" title=\"Error:scalac: Error:org.jetbrains.jps.incremental.scala.remote.ServerException:java.lang.StackOverflowError\"></a>Error:scalac: Error:org.jetbrains.jps.incremental.scala.remote.ServerException:java.lang.StackOverflowError</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error:scalac: Error: org.jetbrains.jps.incremental.scala.remote.ServerException</span><br><span class=\"line\">java.lang.StackOverflowError</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.typed1(Erasure.scala:773)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.runTyper<span class=\"variable\">$1</span>(Typers.scala:5584)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInternal(Typers.scala:5616)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.body<span class=\"variable\">$2</span>(Typers.scala:5557)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed(Typers.scala:5562)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.<span class=\"variable\">$anonfun</span><span class=\"variable\">$typed1</span><span class=\"variable\">$38</span>(Typers.scala:4708)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.silent(Typers.scala:698)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.normalTypedApply<span class=\"variable\">$1</span>(Typers.scala:4710)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedApply<span class=\"variable\">$1</span>(Typers.scala:4757)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInAnyMode<span class=\"variable\">$1</span>(Typers.scala:5530)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed1(Typers.scala:5547)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.typed1(Erasure.scala:773)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.runTyper<span class=\"variable\">$1</span>(Typers.scala:5584)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInternal(Typers.scala:5616)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.body<span class=\"variable\">$2</span>(Typers.scala:5557)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed(Typers.scala:5562)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedQualifier(Typers.scala:5667)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedQualifier(Typers.scala:5675)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.adaptMember(Erasure.scala:698)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.typed1(Erasure.scala:773)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.runTyper<span class=\"variable\">$1</span>(Typers.scala:5584)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInternal(Typers.scala:5616)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.body<span class=\"variable\">$2</span>(Typers.scala:5557)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed(Typers.scala:5562)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.<span class=\"variable\">$anonfun</span><span class=\"variable\">$typed1</span><span class=\"variable\">$38</span>(Typers.scala:4708)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.silent(Typers.scala:698)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.normalTypedApply<span class=\"variable\">$1</span>(Typers.scala:4710)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedApply<span class=\"variable\">$1</span>(Typers.scala:4757)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInAnyMode<span class=\"variable\">$1</span>(Typers.scala:5530)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed1(Typers.scala:5547)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.typed1(Erasure.scala:773)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.runTyper<span class=\"variable\">$1</span>(Typers.scala:5584)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInternal(Typers.scala:5616)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.body<span class=\"variable\">$2</span>(Typers.scala:5557)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed(Typers.scala:5562)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedQualifier(Typers.scala:5667)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedQualifier(Typers.scala:5675)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.adaptMember(Erasure.scala:698)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.typed1(Erasure.scala:773)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.runTyper<span class=\"variable\">$1</span>(Typers.scala:5584)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInternal(Typers.scala:5616)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.body<span class=\"variable\">$2</span>(Typers.scala:5557)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed(Typers.scala:5562)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.<span class=\"variable\">$anonfun</span><span class=\"variable\">$typed1</span><span class=\"variable\">$38</span>(Typers.scala:4708)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.silent(Typers.scala:698)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.normalTypedApply<span class=\"variable\">$1</span>(Typers.scala:4710)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedApply<span class=\"variable\">$1</span>(Typers.scala:4757)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInAnyMode<span class=\"variable\">$1</span>(Typers.scala:5530)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed1(Typers.scala:5547)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.typed1(Erasure.scala:773)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.runTyper<span class=\"variable\">$1</span>(Typers.scala:5584)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInternal(Typers.scala:5616)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.body<span class=\"variable\">$2</span>(Typers.scala:5557)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed(Typers.scala:5562)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedQualifier(Typers.scala:5667)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedQualifier(Typers.scala:5675)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.adaptMember(Erasure.scala:698)</span><br><span class=\"line\">\tat scala.tools.nsc.transform.Erasure<span class=\"variable\">$Eraser</span>.typed1(Erasure.scala:773)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.runTyper<span class=\"variable\">$1</span>(Typers.scala:5584)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typedInternal(Typers.scala:5616)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.body<span class=\"variable\">$2</span>(Typers.scala:5557)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.typed(Typers.scala:5562)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.<span class=\"variable\">$anonfun</span><span class=\"variable\">$typed1</span><span class=\"variable\">$38</span>(Typers.scala:4708)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.silent(Typers.scala:698)</span><br><span class=\"line\">\tat scala.tools.nsc.typechecker.Typers<span class=\"variable\">$Typer</span>.normalTypedApply<span class=\"variable\">$1</span>(Typers.scala:4710)</span><br><span class=\"line\">\tat ...</span><br></pre></td></tr></table></figure>\n\n<p>在网上查询的出的结论如下：</p>\n<blockquote>\n<p>Error:scalac: Error: org.jetbrains.jps.incremental.scala.remote.ServerException<br>reason：JDK与Scala的版本不匹配。</p>\n</blockquote>\n<p>但是实践发现并不好使，错误提示是 <strong><code>java.lang.StackOverflowError</code></strong> 异常。但是一直没找到 <strong>scala</strong> 的配置。<br>在 google stackoverflow 上都是说将 scala compile 的配置一下即可。但是一直找不到。</p>\n<p>最后在 idea 右下角找到了 <code>scala compile server</code>。如下图所示:<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/idea-scala-compile-server.png\" alt=\"idea-scala-compile-server\"><br>通过上面操作可以发现，scala 编译配置路径: <code>Preferences | Build, Execution, Deployment</code> ——&gt; <code>Compiler</code> ——&gt; <code>Scala Compiler</code> ——&gt; <code>Scala Compile Server</code>。将 <code>JVM Options</code> 配置中的栈内存大小调大即可。如下图所示：<br><img src=\"/2019-09-27/IntelliJ-IDEA搭建kafka源码环境/scala-compile-jvmoptions.png\" alt=\"scala-compile-jvmoptions\"></p>\n","categories":["kafka"],"tags":["kafka","源码"]},{"title":"linux 常用命令(二) —— nc","url":"/2019-10-16/linux-sh/","content":"<h2 id=\"nc命令用法举例\"><a href=\"#nc命令用法举例\" class=\"headerlink\" title=\"nc命令用法举例\"></a>nc命令用法举例</h2><blockquote>\n<p>转自：<a href=\"https://www.cnblogs.com/nmap/p/6148306.html\" target=\"_blank\" rel=\"noopener\">nc命令用法举例</a></p>\n</blockquote>\n<h1 id=\"什么是nc\"><a href=\"#什么是nc\" class=\"headerlink\" title=\"什么是nc\"></a>什么是nc</h1><p>nc是netcat的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具</p>\n<h1 id=\"nc的作用\"><a href=\"#nc的作用\" class=\"headerlink\" title=\"nc的作用\"></a>nc的作用</h1><ul>\n<li>（1）实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口 </li>\n<li>（2）端口的扫描，nc可以作为client发起TCP或UDP连接</li>\n<li>（3）机器之间传输文件</li>\n<li>（4）机器之间网络测速                                                                                                             </li>\n</ul>\n<h1 id=\"nc的控制参数不少，常用的几个参数如下所列：\"><a href=\"#nc的控制参数不少，常用的几个参数如下所列：\" class=\"headerlink\" title=\"nc的控制参数不少，常用的几个参数如下所列：\"></a>nc的控制参数不少，常用的几个参数如下所列：</h1><ul>\n<li>1) -l<br>  用于指定nc将处于侦听模式。指定该参数，则意味着nc被当作server，侦听并接受连接，而非向其它地址发起连接。</li>\n<li>2) -p <port><br>  暂未用到（老版本的nc可能需要在端口号前加-p参数，下面测试环境是centos6.6，nc版本是nc-1.84，未用到-p参数）</port></li>\n<li>3) -s<br>  指定发送数据的源IP地址，适用于多网卡机 </li>\n<li>4) -u<br>  指定nc使用UDP协议，默认为TCP</li>\n<li>5) -v<br>  输出交互或出错信息，新手调试时尤为有用</li>\n<li>6）-w<br>  超时秒数，后面跟数字 </li>\n<li>7）-z<br>  表示zero，表示扫描时不发送任何数据</li>\n</ul>\n<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><p>准备两台机器，用于测试nc命令的用法<br>主机A：ip地址 10.0.1.161<br>主机B：ip地址 10.0.1.162</p>\n<p>两台机器先安装nc和nmap的包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install nc -y</span><br><span class=\"line\">yum install nmap -y</span><br></pre></td></tr></table></figure>\n\n<p>如果提示如下-bash： nc： command not found 表示没安装nc的包<br><img src=\"/2019-10-16/linux-sh/1076878-20161209095517663-1040120011.png\" alt=\"img\"></p>\n<h1 id=\"nc用法1，网络连通性测试和端口扫描\"><a href=\"#nc用法1，网络连通性测试和端口扫描\" class=\"headerlink\" title=\"nc用法1，网络连通性测试和端口扫描\"></a><strong>nc用法1，网络连通性测试和端口扫描</strong></h1><p><strong>nc可以作为server端启动一个tcp的监听（注意，此处重点是起tcp，下面还会讲udp）</strong><br>先关闭A的防火墙，或者放行下面端口，然后测试B机器是否可以访问A机器启动的端口<br>在A机器上启动一个端口监听，比如 9999端口（注意：下面的-l 是小写的L，不是数字1）</p>\n<p>默认情况下下面监听的是一个tcp的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -l 9999</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209095543554-1037638344.png\" alt=\"img\"></p>\n<p><strong>客户端测试，**</strong>测试方法1**<br>在B机器上telnet A机器此端口，如下显示表示B机器可以访问A机器此端口<br><img src=\"/2019-10-16/linux-sh/1076878-20161209095601413-784407778.png\" alt=\"img\"></p>\n<p><strong><em>\\</em>客户端测试，\\</strong>测试方法2**<br>B机器上也可以使用nmap扫描A机器的此端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap 10.0.1.161 -p9999</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209095617601-914929817.png\" alt=\"img\"></p>\n<p><strong><em>\\</em>客户端测试，\\</strong>测试方法3**</p>\n<p>使用nc命令作为客户端工具进行端口探测</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （-v可视化，-z扫描时不发送数据，-w超时几秒，后面跟数字）</span></span><br><span class=\"line\">nc -vz -w 2 10.0.1.161 9999</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209095634851-958356921.png\" alt=\"img\"></p>\n<p>上面命令也可以写成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -vzw 2 10.0.1.161 9999</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209095651569-1755893958.png\" alt=\"img\"></p>\n<p><strong><em>\\</em>客户端测试，\\</strong>测试方法4（和方法3相似，但用处更大）**</p>\n<p>nc可以可以扫描连续端口，这个作用非常重要。常常可以用来扫描服务器端口，然后给服务器安全加固</p>\n<p>在A机器上监听2个端口，一个9999，一个9998，使用&amp;符号丢入后台<br><img src=\"/2019-10-16/linux-sh/1076878-20161209095712866-936204965.png\" alt=\"img\"></p>\n<p>在客户端B机器上扫描连续的两个端口，如下<br><img src=\"/2019-10-16/linux-sh/1076878-20161209095732429-1764157681.png\" alt=\"img\"></p>\n<p><strong>nc作为server端启动一个udp的监听（注意，此处重点是起udp，上面主要讲了tcp）</strong></p>\n<p>启动一个udp的端口监听</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc  -ul  9998</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209095753835-1671845784.png\" alt=\"img\"></p>\n<p>复制当前窗口输入 netstat -antup |grep 9998 可以看到是启动了udp的监听<br><img src=\"/2019-10-16/linux-sh/1076878-20161209095812632-1749454663.png\" alt=\"img\"></p>\n<p><strong>客户端测试，测试方法1</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#（telnet是运行于tcp协议的）</span></span><br><span class=\"line\"><span class=\"comment\">#（u表示udp端口，v表示可视化输出，z表示扫描时不发送数据）</span></span><br><span class=\"line\">nc -vuz 10.0.1.161 9998</span><br></pre></td></tr></table></figure>\n\n<p>由于udp的端口无法在客户端使用telnet去测试，我们可以使用nc命令去扫描（前面提到nc还可以用来扫描端口）<br><img src=\"/2019-10-16/linux-sh/1076878-20161209100707882-1433264712.png\" alt=\"img\"></p>\n<p>上面在B机器扫描此端口的时候，看到A机器下面出现一串XXXXX字符串<br><img src=\"/2019-10-16/linux-sh/1076878-20161209100725866-2147390474.png\" alt=\"img\"></p>\n<p><strong>客户端测试，测试方法2</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmap -sU 10.0.1.161 -p 9998 -Pn</span><br></pre></td></tr></table></figure>\n\n<p>（它暂无法测试nc启动的udp端口，每次探测nc作为server端启动的udp端口时，会导致对方退出侦听，有这个bug，对于一些程序启动的udp端口在使用nc扫描时不会有此bug）</p>\n<p>下面，A机器启动一个udp的端口监听，端口为9998<br>在复制的窗口上可以确认已经在监听了<br><img src=\"/2019-10-16/linux-sh/1076878-20161209100746272-590584994.png\" alt=\"img\"></p>\n<p>B机器使用nmap命令去扫描此udp端口，在扫描过程中，导致A机器的nc退出监听。所以显示端口关闭了（我推测是扫描时发数据导致的）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -sU ：表示udp端口的扫描</span></span><br><span class=\"line\"><span class=\"comment\"># -Pn ：如果服务器禁PING或者放在防火墙下面的，不加-Pn 参数的它就会认为这个扫描的主机不存活就不会进行扫描了，如果不加-Pn就会像下面的结果一样，它也会进行提示你添加上-Pn参数尝试的</span></span><br><span class=\"line\">nmap -sU 10.0.1.161 -p 9998 -Pn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209100804726-1083735542.png\" alt=\"img\"></p>\n<p>注意：如果A机器开启了防火墙，扫描结果可能会是下面状态。（不能确定对方是否有监听9998端口）<br><img src=\"/2019-10-16/linux-sh/1076878-20161209100817866-337685966.png\" alt=\"img\"></p>\n<p>既然上面测试无法使用nmap扫描nc作为服务端启动的端口，我们可以使用nmap扫描其余的端口<br>（额，有点跑题了，讲nmap的用法了，没关系，主要为了说明nmap是也可以用来扫描udp端口的，只是扫描nc启动的端口会导致对方退出端口监听）</p>\n<p>下面，A机器上rpcbind服务，监听在udp的111端口<br><img src=\"/2019-10-16/linux-sh/1076878-20161209100833757-599551176.png\" alt=\"img\"></p>\n<p>在B机器上使用nmap扫描此端口，是正常的检测到处于open状态<br><img src=\"/2019-10-16/linux-sh/1076878-20161209100847319-1809046272.png\" alt=\"img\"></p>\n<p><strong>客户端测试，测试方法3</strong></p>\n<p><strong>nc扫描大量udp端口</strong></p>\n<p>扫描过程比较慢，可能是1秒扫描一个端口，下面表示扫描A机器的1到1000端口（暂未发现可以在一行命令中扫描分散的几个端口的方法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -vuz 10.0.1.161 1-1000</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209100901819-1505522198.png\" alt=\"img\"></p>\n<h1 id=\"nc用法2，使用nc传输文件和目录\"><a href=\"#nc用法2，使用nc传输文件和目录\" class=\"headerlink\" title=\"nc用法2，使用nc传输文件和目录\"></a><strong>nc用法2，使用nc传输文件和目录</strong></h1><p><strong>方法1，传输文件演示（先启动接收命令）</strong></p>\n<p>使用nc传输文件还是比较方便的，因为不用scp和rsync那种输入密码的操作了<br>把A机器上的一个rpm文件发送到B机器上<br>需注意操作次序，receiver先侦听端口，sender向receiver所在机器的该端口发送数据。  </p>\n<p><strong>步骤1，先在B机器上启动一个接收文件的监听，格式如下</strong></p>\n<p>意思是把赖在9995端口接收到的数据都写到file文件里（这里文件名随意取）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -l port &gt;file</span><br><span class=\"line\">nc -l 9995 &gt;zabbix.rpm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209100917507-1008395936.png\" alt=\"img\"></p>\n<p><strong><em>\\</em>步骤2，\\</strong>在A机器上往B机器的9995端口发送数据，把下面rpm包发送过去**</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc 10.0.1.162 9995 &lt; zabbix-release-2.4-1.el6.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209100931116-1268991306.png\" alt=\"img\"></p>\n<p>B机器接收完毕，它会自动退出监听，文件大小和A机器一样，md5值也一样<br><img src=\"/2019-10-16/linux-sh/1076878-20161209100944897-733297904.png\" alt=\"img\"></p>\n<p><strong>方法2，传输文件演示（先启动发送命令）</strong></p>\n<p><strong>步骤1，先在B机器上，启动发送文件命令</strong></p>\n<p>下面命令表示通过本地的9992端口发送test.mv文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -l 9992 &lt;test.mv</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101002038-290824858.png\" alt=\"img\"></p>\n<p><strong>步骤2，A机器上连接B机器，取接收文件</strong></p>\n<p>下面命令表示通过连接B机器的9992端口接收文件，并把文件存到本目录下，文件名为test2.mv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc 10.0.1.162 9992 &gt;test2.mv</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101017632-493505389.png\" alt=\"img\"></p>\n<p><strong>方法3，传输目录演示（方法发送文件类似）</strong></p>\n<p><strong>步骤1，B机器先启动监听，如下</strong><br>A机器给B机器发送多个文件<br>传输目录需要结合其它的命令，比如tar<br>经过我的测试管道后面最后必须是 - ，不能是其余自定义的文件名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -l 9995 | tar xfvz -</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101035476-313895763.png\" alt=\"img\"></p>\n<p><strong>步骤2，A机器打包文件并连接B机器的端口</strong></p>\n<p>管道前面表示把当前目录的所有文件打包为 - ，然后使用nc发送给B机器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar cfz - * | nc 10.0.1.162 9995</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101051101-1053431813.png\" alt=\"img\"></p>\n<p>B机器这边已经自动接收和解压<br><img src=\"/2019-10-16/linux-sh/1076878-20161209101107241-716031832.png\" alt=\"img\"></p>\n<h1 id=\"nc用法3，测试网速\"><a href=\"#nc用法3，测试网速\" class=\"headerlink\" title=\"nc用法3，测试网速\"></a><strong>nc用法3，测试网速</strong></h1><p>测试网速其实利用了传输文件的原理，就是把来自一台机器的/dev/zero 发送给另一台机器的/dev/null<br>就是把一台机器的无限个0，传输给另一个机器的空设备上，然后新开一个窗口使用dstat命令监测网速<br>在这之前需要保证机器先安装dstat工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y dstat</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>方法1，测试网速演示（先启动接收命令方式）</strong></p>\n<p>步骤1，A机器先启动接收数据的命令，监听自己的9991端口，把来自这个端口的数据都输出给空设备（这样不写磁盘，测试网速更准确）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -l 9991 &gt;/dev/null</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101124179-1971991069.png\" alt=\"img\"></p>\n<p>步骤2，B机器发送数据，把无限个0发送给A机器的9991端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc 10.0.1.161 9991 &lt;/dev/zero</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101150304-1813015616.png\" alt=\"img\"></p>\n<p>在复制的窗口上使用dstat命令查看当前网速，dstat命令比较直观，它可以查看当前cpu，磁盘，网络，内存页和系统的一些当前状态指标。<br>我们只需要看下面我选中的这2列即可，recv是receive的缩写，表示接收的意思，send是发送数据，另外注意数字后面的单位B，KB，MB<br><img src=\"/2019-10-16/linux-sh/1076878-20161209101211132-150010168.png\" alt=\"img\"></p>\n<p>可以看到A机器接收数据，平均每秒400MB左右<br><img src=\"/2019-10-16/linux-sh/1076878-20161209101227069-1285313680.png\" alt=\"img\"></p>\n<p>B机器新打开的窗口上执行dstat，看到每秒发送400MB左右的数据</p>\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101252491-2064947286.png\" alt=\"img\"></p>\n<p><strong>方法2，测试网速演示（先启动发送命令方式）</strong></p>\n<p>步骤1，先启动发送的数据，谁连接这个端口时就会接收来自zero设备的数据（二进制的无限个0）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -l 9990 &lt;/dev/zero</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101318991-1622147288.png\" alt=\"img\"></p>\n<p>步骤2，下面B机器连接A机器的9990端口，把接收的数据输出到空设备上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc 10.0.1.161 9990 &gt;/dev/null</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019-10-16/linux-sh/1076878-20161209101335976-869694121.png\" alt=\"img\"></p>\n<p>同样可以使用dstat观察数据发送时的网速<br><img src=\"/2019-10-16/linux-sh/1076878-20161209101801304-671989613.png\" alt=\"img\"></p>\n","tags":["linux"]},{"title":"hystrix 原理","url":"/2020-10-20/hystrix/","content":"<h1 id=\"hystrix-原理\"><a href=\"#hystrix-原理\" class=\"headerlink\" title=\"hystrix 原理\"></a>hystrix 原理</h1><h2 id=\"初探Hystrix\"><a href=\"#初探Hystrix\" class=\"headerlink\" title=\"初探Hystrix\"></a>初探Hystrix</h2><p><strong>Hystrix设计目标</strong></p>\n<ul>\n<li>对来自依赖的延迟和故障进行防护和控制——这些依赖通常都是通过网络访问的</li>\n<li>阻止故障的连锁反应</li>\n<li>快速失败并迅速恢复</li>\n<li>回退并优雅降级</li>\n<li>提供近实时的监控与告警</li>\n</ul>\n<p><strong>Hystrix遵循的设计原则</strong></p>\n<ul>\n<li>防止任何单独的依赖耗尽资源（线程）</li>\n<li>过载立即切断并快速失败，防止排队</li>\n<li>尽可能提供回退以保护用户免受故障</li>\n<li>使用隔离技术（例如隔板，泳道和断路器模式）来限制任何一个依赖的影响</li>\n<li>通过近实时的指标，监控和告警，确保故障被及时发现</li>\n<li>通过动态修改配置属性，确保故障及时恢复</li>\n<li>防止整个依赖客户端执行失败，而不仅仅是网络通信</li>\n</ul>\n<p><strong>Hystrix如何实现这些设计目标？</strong></p>\n<ul>\n<li>使用命令模式将所有对外部服务（或依赖关系）的调用包装在 <code>HystrixCommand</code> 或 <code>HystrixObservableCommand</code> 对象中，并将该对象放在单独的线程中执行；</li>\n<li>每个依赖都维护着一个线程池（或信号量），线程池被耗尽则拒绝请求（而不是让请求排队）。</li>\n<li>记录请求成功，失败，超时和线程拒绝。</li>\n<li>服务错误百分比超过了阈值，熔断器开关自动打开，一段时间内停止对该服务的所有请求。</li>\n<li>请求失败，被拒绝，超时或熔断时执行降级逻辑。</li>\n<li>近实时地监控指标和配置的修改。</li>\n</ul>\n<h2 id=\"Hystrix流程\"><a href=\"#Hystrix流程\" class=\"headerlink\" title=\"Hystrix流程\"></a>Hystrix流程</h2><p><img src=\"/2020-10-20/hystrix/174915_Bvjy_2663573.png\" alt=\"Hystrix流程图\"></p>\n<center>图片来源Hystrix官网: https://github.com/Netflix/Hystrix/wiki</center>\n\n<p><strong>Hystrix整个工作流如下</strong></p>\n<ol>\n<li><span id=\"t2_step1\">构造一个 <code>HystrixCommand</code> 或 <code>HystrixObservableCommand</code> 对象，用于封装请求，并在构造方法配置请求被执行需要的参数；</span></li>\n<li><span id=\"t2_step2\">执行命令，<code>Hystrix</code> 提供了4种执行命令的方法，后面详述；</span></li>\n<li><span id=\"t2_step3\">判断是否使用缓存响应请求，若启用了缓存，且缓存可用，直接使用缓存响应请求。<code>Hystrix</code> 支持请求缓存，但需要用户自定义启动；</span></li>\n<li><span id=\"t2_step4\">判断熔断器是否打开，如果打开，跳到<a href=\"#t2_step8\">第8步</a>；</span></li>\n<li><span id=\"t2_step5\">判断线程池/队列/信号量是否已满，已满则跳到<a href=\"#t2_step8\">第8步</a>；</span></li>\n<li><span id=\"t2_step6\">执行 <code>HystrixObservableCommand.construct()</code> 或 <code>HystrixCommand.run()</code>，如果执行失败或者超时，跳到<a href=\"#t2_step8\">第8步</a>；否则，跳到<a href=\"#t2_step9\">第9步</a>；</span></li>\n<li><span id=\"t2_step7\">统计熔断器监控指标；</span></li>\n<li><span id=\"t2_step8\">走 Fallback 备用逻辑</span></li>\n<li><span id=\"t2_step9\">返回请求响应</span></li>\n</ol>\n<p>从流程图上可知道，第5步线程池/队列/信号量已满时，还会执行第7步逻辑，更新熔断器统计信息，而第6步无论成功与否，都会更新熔断器统计信息。</p>\n<h2 id=\"Hystrix容错\"><a href=\"#Hystrix容错\" class=\"headerlink\" title=\"Hystrix容错\"></a>Hystrix容错</h2><p>Hystrix 的容错主要是通过添加容许延迟和容错方法，帮助控制这些分布式服务之间的交互。 还通过隔离服务之间的访问点，阻止它们之间的级联故障以及提供回退选项来实现这一点，从而提高系统的整体弹性。Hystrix主要提供了以下几种容错方法</p>\n<ul>\n<li>资源隔离</li>\n<li>熔断</li>\n<li>降级</li>\n</ul>\n<h3 id=\"资源隔离\"><a href=\"#资源隔离\" class=\"headerlink\" title=\"资源隔离\"></a>资源隔离</h3><p>资源隔离主要指对线程的隔离。Hystrix 提供了两种线程隔离方式：线程池和信号量。</p>\n<h4 id=\"线程隔离-线程池\"><a href=\"#线程隔离-线程池\" class=\"headerlink\" title=\"线程隔离-线程池\"></a>线程隔离-线程池</h4><p>Hystrix 通过命令模式对发送请求的对象和执行请求的对象进行解耦，将不同类型的业务请求封装为对应的命令请求。如订单服务查询商品，查询商品请求-&gt;商品Command；商品服务查询库存，查询库存请求-&gt;库存Command。并且为每个类型的Command配置一个线程池，当第一次创建Command时，根据配置创建一个线程池，并放入 ConcurrentHashMap，如商品Command：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ConcurrentHashMap&lt;String, HystrixThreadPool&gt; threadPools = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, HystrixThreadPool&gt;();</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!threadPools.containsKey(key)) &#123;</span><br><span class=\"line\">    threadPools.put(key, <span class=\"keyword\">new</span> HystrixThreadPoolDefault(threadPoolKey, propertiesBuilder));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续查询商品的请求创建Command时，将会重用已创建的线程池。线程池隔离之后的服务依赖关系：</p>\n<h5 id=\"线程池隔离优缺点\"><a href=\"#线程池隔离优缺点\" class=\"headerlink\" title=\"线程池隔离优缺点\"></a>线程池隔离优缺点</h5><p><strong>优点</strong></p>\n<ul>\n<li>保护应用程序以免受来自依赖故障的影响，指定依赖线程池饱和不会影响应用程序的其余部分。</li>\n<li>当引入新客户端lib时，即使发生问题，也是在本lib中，并不会影响到其他内容。</li>\n<li>当依赖从故障恢复正常时，应用程序会立即恢复正常的性能。</li>\n<li>当应用程序一些配置参数错误时，线程池的运行状况会很快检测到这一点（通过增加错误，延迟，超时，拒绝等），同时可以通过动态属性进行实时纠正错误的参数配置。</li>\n<li>如果服务的性能有变化，需要实时调整，比如增加或者减少超时时间，更改重试次数，可以通过线程池指标动态属性修改，而且不会影响到其他调用请求。</li>\n<li>除了隔离优势外，hystrix 拥有专门的线程池可提供内置的并发功能，使得可以在同步调用之上构建异步门面（外观模式），为异步编程提供了支持（Hystrix 引入了 Rxjava 异步框架）。</li>\n</ul>\n<p><strong>注意</strong>：尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置或响应线程中断，不能无限制的阻塞以致线程池一直饱和。</p>\n<p><strong>缺点</strong><br>线程池的主要缺点是增加了计算开销。每个命令的执行都在单独的线程完成，增加了排队、调度和上下文切换的开销。因此，要使用Hystrix，就必须接受它带来的开销，以换取它所提供的好处。</p>\n<p>通常情况下，线程池引入的开销足够小，不会有重大的成本或性能影响。但对于一些访问延迟极低的服务，如只依赖内存缓存，线程池引入的开销就比较明显了，这时候使用线程池隔离技术就不适合了，我们需要考虑更轻量级的方式，如信号量隔离。</p>\n<h5 id=\"线程隔离-信号量\"><a href=\"#线程隔离-信号量\" class=\"headerlink\" title=\"线程隔离-信号量\"></a>线程隔离-信号量</h5><p>上面提到了线程池隔离的缺点，当依赖延迟极低的服务时，线程池隔离技术引入的开销超过了它所带来的好处。这时候可以使用信号量隔离技术来代替，通过设置信号量来限制对任何给定依赖的并发调用量。下图说明了线程池隔离和信号量隔离的主要区别：<br><img src=\"/2020-10-20/hystrix/111924_txyW_2663573.png\" alt=\"线程隔离-信号量\"></p>\n<center>图片来源Hystrix官网https://github.com/Netflix/Hystrix/wiki</center>\n\n<p>由于Hystrix默认使用线程池做线程隔离，使用信号量隔离需要显示地将属性 <code>execution.isolation.strategy</code> 设置为 <code>ExecutionIsolationStrategy.SEMAPHORE</code>，同时配置信号量个数，默认为10。客户端需向依赖服务发起请求时，首先要获取一个信号量才能真正发起调用，由于信号量的数量有限，当并发请求量超过信号量个数时，后续的请求都会直接拒绝，进入 fallback 流程。</p>\n<p>信号量隔离主要是通过控制并发请求量，防止请求线程大面积阻塞，从而达到限流和防止雪崩的目的。</p>\n<h5 id=\"线程隔离总结\"><a href=\"#线程隔离总结\" class=\"headerlink\" title=\"线程隔离总结\"></a>线程隔离总结</h5><p>线程池和信号量都可以做线程隔离，但各有各的优缺点和支持的场景，对比如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>线程切换</th>\n<th>支持异步</th>\n<th>支持超时</th>\n<th>支持熔断</th>\n<th>限流</th>\n<th>开销</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>信号量</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>小</td>\n</tr>\n<tr>\n<td>线程池</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>大</td>\n</tr>\n</tbody></table>\n<p>线程池和信号量都支持熔断和限流。相比线程池，信号量不需要线程切换，因此避免了不必要的开销。但是信号量不支持异步，也不支持超时，也就是说当所请求的服务不可用时，信号量会控制超过限制的请求立即返回，但是已经持有信号量的线程只能等待服务响应或从超时中返回，即可能出现长时间等待。线程池模式下，当超过指定时间未响应的服务，Hystrix 会通过响应中断的方式通知线程立即结束并返回。</p>\n<h3 id=\"熔断\"><a href=\"#熔断\" class=\"headerlink\" title=\"熔断\"></a>熔断</h3><h4 id=\"熔断器简介\"><a href=\"#熔断器简介\" class=\"headerlink\" title=\"熔断器简介\"></a>熔断器简介</h4><p>现实生活中，可能大家都有注意到家庭电路中通常会安装一个保险盒，当负载过载时，保险盒中的保险丝会自动熔断，以保护电路及家里的各种电器，这就是熔断器的一个常见例子。Hystrix 中的熔断器(Circuit Breaker)也是起类似作用，Hystrix 在运行过程中会向每个 <code>commandKey</code> 对应的熔断器报告成功、失败、超时和拒绝的状态，熔断器维护并统计这些数据，并根据这些统计信息来决策熔断开关是否打开。如果打开，熔断后续请求，快速返回。隔一段时间（默认是5s）之后熔断器尝试半开，放入一部分流量请求进来，相当于对依赖服务进行一次健康检查，如果请求成功，熔断器关闭。</p>\n<h4 id=\"熔断器配置\"><a href=\"#熔断器配置\" class=\"headerlink\" title=\"熔断器配置\"></a>熔断器配置</h4><p>Circuit Breaker主要包括如下6个参数：</p>\n<ol>\n<li><code>circuitBreaker.enabled</code><br> 是否启用熔断器，默认是 <strong>TRUE</strong>。</li>\n<li><code>circuitBreaker.forceOpen</code><br> 熔断器强制打开，始终保持打开状态，不关注熔断开关的实际状态。默认值 <strong>FLASE</strong>。</li>\n<li><code>circuitBreaker.forceClosed</code><br> 熔断器强制关闭，始终保持关闭状态，不关注熔断开关的实际状态。默认值 <strong>FLASE</strong>。</li>\n<li><code>circuitBreaker.errorThresholdPercentage</code><br> 错误率，默认值 50%，例如一段时间（10s）内有 100 个请求，其中有 54 个超时或者异常，那么这段时间内的错误率是 54%，大于了默认值 50%，这种情况下会触发熔断器打开。</li>\n<li><code>circuitBreaker.requestVolumeThreshold</code><br> 默认值 20。含义是一段时间内至少有20个请求才进行 <code>errorThresholdPercentage</code> 计算。比如一段时间了有 19 个请求，且这些请求全部失败了，错误率是 100%，但熔断器不会打开，总请求数不满足 20。</li>\n<li><code>circuitBreaker.sleepWindowInMilliseconds</code><br> 半开状态试探睡眠时间，默认值 5000ms。如：当熔断器开启 5000ms 之后，会尝试放过去一部分流量进行试探，确定依赖服务是否恢复。</li>\n</ol>\n<h4 id=\"熔断器工作原理\"><a href=\"#熔断器工作原理\" class=\"headerlink\" title=\"熔断器工作原理\"></a>熔断器工作原理</h4><p>下图展示了 HystrixCircuitBreaker 的工作原理:<br><img src=\"/2020-10-20/hystrix/155833_vCne_2663573.png\" alt=\"HystrixCircuitBreaker的工作原理\"></p>\n<p><strong>熔断器工作的详细过程如下</strong><br><strong>第一步</strong>，调用 <code>allowRequest()</code> 判断是否允许将请求提交到线程池</p>\n<ol>\n<li>如果熔断器强制打开，<code>circuitBreaker.forceOpen</code> 为true，不允许放行，返回。</li>\n<li>如果熔断器强制关闭，<code>circuitBreaker.forceClosed</code> 为true，允许放行。此外不必关注熔断器实际状态，也就是说熔断器仍然会维护统计数据和开关状态，只是不生效而已。</li>\n</ol>\n<p><strong>第二步</strong>，调用 <code>isOpen()</code> 判断熔断器开关是否打开</p>\n<ol>\n<li>如果熔断器开关打开，进入第三步，否则继续；</li>\n<li>如果一个周期内总的请求数小于 <code>circuitBreaker.requestVolumeThreshold</code> 的值，允许请求放行，否则继续；</li>\n<li>如果一个周期内错误率小于 <code>circuitBreaker.errorThresholdPercentage</code> 的值，允许请求放行。否则，打开熔断器开关，进入第三步。</li>\n</ol>\n<p><strong>第三步</strong>，调用 <code>allowSingleTest()</code> 判断是否允许单个请求通行，检查依赖服务是否恢复</p>\n<ol>\n<li>如果熔断器打开，且距离熔断器打开的时间或上一次试探请求放行的时间超过 circuitBreaker.sleepWindowInMilliseconds 的值时，熔断器器进入半开状态，允许放行一个试探请求；否则，不允许放行。</li>\n</ol>\n<p>此外，为了提供决策依据，每个熔断器默认维护了10个 bucket，每秒一个 bucket，当新的 bucket 被创建时，最旧的 bucket 会被抛弃。其中每个blucket维护了请求成功、失败、超时、拒绝的计数器，Hystrix 负责收集并统计这些计数器。</p>\n<h3 id=\"回退降级\"><a href=\"#回退降级\" class=\"headerlink\" title=\"回退降级\"></a>回退降级</h3><p>降级，通常指务高峰期，为了保证核心服务正常运行，需要停掉一些不太重要的业务，或者某些服务不可用时，执行备用逻辑从故障服务中快速失败或快速返回，以保障主体业务不受影响。Hystrix提供的降级主要是为了容错，保证当前服务不受依赖服务故障的影响，从而提高服务的健壮性。要支持回退或降级处理，可以重写 HystrixCommand 的 getFallBack 方法或 HystrixObservableCommand的resumeWithFallback 方法。</p>\n<p>Hystrix在以下几种情况下会走降级逻辑：</p>\n<ul>\n<li>执行 <code>construct()</code> 或 <code>run()</code> 抛出异常</li>\n<li>熔断器打开导致命令短路</li>\n<li>命令的线程池和队列或信号量的容量超额，命令被拒绝</li>\n<li>命令执行超时</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文介绍了 Hystrix 及其工作原理，还介绍了 Hystrix 线程池隔离、信号量隔离和熔断器的工作原理，以及如何使用Hystrix的资源隔离，熔断和降级等技术实现服务容错，从而提高系统的整体健壮性。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://my.oschina.net/7001/blog/1619842\" target=\"_blank\" rel=\"noopener\">Hystrix原理与实战</a></p>\n","tags":["源码","Tools","spring","hystrix"]},{"title":"kafka 消费者源码分析(一)","url":"/2021-03-05/kafka-comsume-analysis/","content":"<h1 id=\"kafka-消费者源码分析-一\"><a href=\"#kafka-消费者源码分析-一\" class=\"headerlink\" title=\"kafka 消费者源码分析(一)\"></a>kafka 消费者源码分析(一)</h1><h2 id=\"kafka-消费消费流程\"><a href=\"#kafka-消费消费流程\" class=\"headerlink\" title=\"kafka 消费消费流程\"></a>kafka 消费消费流程</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># kafka 消费线程逻辑</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#run</span><br><span class=\"line\">    # 数据拉取并执行</span><br><span class=\"line\">    org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#pollAndInvoke</span><br><span class=\"line\">        # 数据拉取</span><br><span class=\"line\">        org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#doPoll</span><br><span class=\"line\">            # apache kafka consume 客户端 api</span><br><span class=\"line\">            org.apache.kafka.clients.consumer.KafkaConsumer#poll(org.apache.kafka.common.utils.Timer, boolean)</span><br><span class=\"line\">                # 拉取消息</span><br><span class=\"line\">                org.apache.kafka.clients.consumer.KafkaConsumer#pollForFetches</span><br><span class=\"line\">                    # 返回拉取到的消息</span><br><span class=\"line\">                    org.apache.kafka.clients.consumer.internals.Fetcher#fetchedRecords</span><br><span class=\"line\">                        # 获取下一个要处理的 nextInLineRecords</span><br><span class=\"line\">                        org.apache.kafka.clients.consumer.internals.Fetcher#parseCompletedFetch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021-03-05/kafka-comsume-analysis/20200911145613243.png\" alt=\"KafkaConsumer相关类图\"></p>\n","tags":["kafka","源码"]},{"title":"spring-kafka","url":"/2021-03-23/spring-kafka/","content":"<h1 id=\"spring-kafka-源码分析\"><a href=\"#spring-kafka-源码分析\" class=\"headerlink\" title=\"spring-kafka 源码分析\"></a>spring-kafka 源码分析</h1><h2 id=\"kafka-配置初始化\"><a href=\"#kafka-配置初始化\" class=\"headerlink\" title=\"kafka 配置初始化\"></a>kafka 配置初始化</h2><p>入口注解，<code>org.springframework.kafka.annotation.EnableKafka</code> 导入配置 <code>@Import(KafkaBootstrapConfiguration.class)</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> KafkaListener</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> KafkaListenerAnnotationBeanPostProcessor</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> org.springframework.kafka.config.KafkaListenerEndpointRegistrar</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> org.springframework.kafka.config.KafkaListenerEndpointRegistry</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(KafkaBootstrapConfiguration.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableKafka &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过注释可以了解到关键类。</p>\n<ol>\n<li><code>@KafkaListener</code>: 注释</li>\n<li><code>KafkaListenerAnnotationBeanPostProcessor</code>: consumer 配置关键类。</li>\n<li><code>KafkaListenerEndpointRegistrar</code>: 注册器，主要作用缓存/获取配置。</li>\n<li><code>KafkaListenerEndpointRegistry</code>: 注册表，注册 KafkaListener。</li>\n</ol>\n<h2 id=\"KafkaListenerAnnotationBeanPostProcessor-注解配置类\"><a href=\"#KafkaListenerAnnotationBeanPostProcessor-注解配置类\" class=\"headerlink\" title=\"KafkaListenerAnnotationBeanPostProcessor 注解配置类\"></a>KafkaListenerAnnotationBeanPostProcessor 注解配置类</h2><p>实现关键接口:</p>\n<ol>\n<li>BeanPostProcessor<ul>\n<li><code>postProcessAfterInitialization</code>: </li>\n</ul>\n</li>\n<li>SmartInitializingSingleton<ul>\n<li><code>afterSingletonsInstantiated</code>:<br>执行顺序: <code>postProcessAfterInitialization</code> -&gt; <code>afterSingletonsInstantiated</code>。</li>\n</ul>\n</li>\n</ol>\n<p><code>KafkaListenerAnnotationBeanPostProcessor#postProcessAfterInitialization()</code><br>    <code>KafkaListenerAnnotationBeanPostProcessor#processKafkaListener()</code> // 处理 @KafkaListener 注解方法与 consumer 后台绑定。<br>        endpoint参数填充(MethodKafkaListenerEndpoint)，(method, beanObj, beanFactory, messageHandlerMethodFactory-&gt;KafkaHandlerMethodFactoryAdapter)<br>        注册Endpoint，非立即注册，则缓存到list中，在 <code>afterSingletonsInstantiated()</code> 方法中注册。</p>\n<p><code>KafkaListenerAnnotationBeanPostProcessor#afterSingletonsInstantiated()</code><br>    registrar 填充参数(KafkaListenerEndpointRegistrar),(beanFactory, endpointRegistry)<br>    <code>registrar#afterPropertiesSet()</code>: 循环将未注册的配置，将 <code>@KafkaListener</code> 注解上下文，对象方法与后台consumer任务绑定。<br>    与 containerGroup 绑定。<br>        <code>KafkaListenerEndpointRegistry#createListenerContainer()</code>: 最终调用 endpoint 方法，<code>MethodKafkaListenerEndpoint#createMessageListener()</code>。</p>\n<h2 id=\"KafkaListenerEndpointRegistry-注册表\"><a href=\"#KafkaListenerEndpointRegistry-注册表\" class=\"headerlink\" title=\"KafkaListenerEndpointRegistry 注册表\"></a>KafkaListenerEndpointRegistry 注册表</h2><p>实现关键接口:</p>\n<ol>\n<li>SmartLifecycle</li>\n</ol>\n<h3 id=\"KafkaListenerEndpointRegistry-start\"><a href=\"#KafkaListenerEndpointRegistry-start\" class=\"headerlink\" title=\"KafkaListenerEndpointRegistry#start\"></a><code>KafkaListenerEndpointRegistry#start</code></h3><p>循环将 listenerContainer 启动。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.springframework.kafka.config.KafkaListenerEndpointRegistry#start</span><br><span class=\"line\">org.springframework.kafka.config.KafkaListenerEndpointRegistry#startIfNecessary</span><br><span class=\"line\">org.springframework.kafka.listener.AbstractMessageListenerContainer#start</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer#doStart</span><br><span class=\"line\">    org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer <span class=\"comment\">// 初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#run</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#pollAndInvoke</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#invokeListener</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#invokeRecordListener</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#doInvokeWithRecords</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#doInvokeRecordListener</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#invokeOnMessage</span><br><span class=\"line\">org.springframework.kafka.listener.KafkaMessageListenerContainer.ListenerConsumer#doInvokeOnMessage</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021-03-23/spring-kafka/spring-kafka%E5%8F%82%E6%95%B0.png\" alt=\"kafka参数\"></p>\n","tags":["kafka","源码"]},{"title":"feign client XML格式传输","url":"/2021-04-25/feign-xml/","content":"<h1 id=\"feign-client-XML格式传输\"><a href=\"#feign-client-XML格式传输\" class=\"headerlink\" title=\"feign client XML格式传输\"></a>feign client XML格式传输</h1><h2 id=\"1-引入依赖\"><a href=\"#1-引入依赖\" class=\"headerlink\" title=\"1.引入依赖\"></a>1.引入依赖</h2><p>项目中用到jackson解析XML以及组建XML</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-dataformat-xml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-构建XML结构体\"><a href=\"#2-构建XML结构体\" class=\"headerlink\" title=\"2. 构建XML结构体\"></a>2. 构建XML结构体</h2><h3 id=\"2-1-JacksonXmlProperty\"><a href=\"#2-1-JacksonXmlProperty\" class=\"headerlink\" title=\"2.1 JacksonXmlProperty\"></a>2.1 JacksonXmlProperty</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略get/set方法</span></span><br><span class=\"line\"><span class=\"meta\">@JacksonXmlRootElement</span>(localName = <span class=\"string\">\"Class\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"chair\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String chair;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">效果：</span><br><span class=\"line\">&lt;Class&gt;</span><br><span class=\"line\">\t&lt;chair&gt;数据&lt;chair&gt;</span><br><span class=\"line\">&lt;/Class&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-1-JacksonXmlProperty-属性：isAttribute-true\"><a href=\"#2-1-1-JacksonXmlProperty-属性：isAttribute-true\" class=\"headerlink\" title=\"2.1.1 @JacksonXmlProperty 属性：isAttribute = true\"></a>2.1.1 @JacksonXmlProperty 属性：isAttribute = true</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略get/set方法</span></span><br><span class=\"line\"><span class=\"meta\">@JacksonXmlRootElement</span>(localName = <span class=\"string\">\"Class\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"chair\"</span>,isAttribute = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String chair;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">效果：</span><br><span class=\"line\">&lt;Class chair=<span class=\"string\">\"数据\"</span>&gt;</span><br><span class=\"line\">&lt;/Class&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-JacksonXmlElementWrapper\"><a href=\"#2-2-JacksonXmlElementWrapper\" class=\"headerlink\" title=\"2.2 JacksonXmlElementWrapper\"></a>2.2 JacksonXmlElementWrapper</h3><p>JacksonXmlElementWrapper用于List属性</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略get/set方法</span></span><br><span class=\"line\"><span class=\"meta\">@JacksonXmlRootElement</span>(localName = <span class=\"string\">\"Class\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"chairS\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlElementWrapper</span>(useWrapping = <span class=\"keyword\">false</span>) <span class=\"comment\">//default is false</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; chairS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">效果：</span><br><span class=\"line\">&lt;Class&gt;</span><br><span class=\"line\">\t&lt;chairS&gt;</span><br><span class=\"line\">\t\t&lt;chairS&gt;数据&lt;/chairS&gt;</span><br><span class=\"line\">\t\t&lt;chairS&gt;数据&lt;/chairS&gt;</span><br><span class=\"line\">\t\t&lt;chairS&gt;数据&lt;/chairS&gt;</span><br><span class=\"line\">\t\t。。。</span><br><span class=\"line\">\t&lt;/chairS&gt;</span><br><span class=\"line\">&lt;/Class&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-JacksonXmlElementWrapper属性：useWrapping-false\"><a href=\"#2-2-1-JacksonXmlElementWrapper属性：useWrapping-false\" class=\"headerlink\" title=\"2.2.1.JacksonXmlElementWrapper属性：useWrapping=false\"></a>2.2.1.JacksonXmlElementWrapper属性：useWrapping=false</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略get/set方法</span></span><br><span class=\"line\"><span class=\"meta\">@JacksonXmlRootElement</span>(localName = <span class=\"string\">\"Class\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"chairS\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlElementWrapper</span>(useWrapping = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; chairS;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">效果：</span><br><span class=\"line\">&lt;Class&gt;</span><br><span class=\"line\">\t\t&lt;chairS&gt;数据&lt;/chairS&gt;</span><br><span class=\"line\">\t\t&lt;chairS&gt;数据&lt;/chairS&gt;</span><br><span class=\"line\">\t\t&lt;chairS&gt;数据&lt;/chairS&gt;</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">&lt;/Class&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>useWrapping 属性默认时false。需注意</p>\n</blockquote>\n<h2 id=\"3-考虑feign传输XML，restful接口接收XML结构体的方法\"><a href=\"#3-考虑feign传输XML，restful接口接收XML结构体的方法\" class=\"headerlink\" title=\"3. 考虑feign传输XML，restful接口接收XML结构体的方法\"></a>3. 考虑feign传输XML，restful接口接收XML结构体的方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"eureka-service\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MemberFeign</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/getUserList\"</span>,produces = MediaType.APPLICATION_JSON_VALUE,consumes = MediaType.APPLICATION_XML_VALUE)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getOrderByUserList</span><span class=\"params\">(Member member)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/cov\"</span>, consumes = &#123; MediaType.APPLICATION_XML_VALUE &#125;, produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> BuildEntity <span class=\"title\">sendCovBody</span><span class=\"params\">(@RequestBody BuildEntity buildEntity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上示例中重点在于 <code>consumes = { MediaType.APPLICATION_XML_VALUE }, produces = MediaType.APPLICATION_JSON_VALUE</code><br>| consumes |表示调用服务eureka-service的接口 /cov接口，需要XML格式入参 |<br>| produces |表示调用服务 eureka-service的接口 /cov接口，返回格式时json |</p>\n","tags":["feign"]},{"title":"Asciidoctor Docs","url":"/2021-05-11/asciidoctor-docs/","content":"<h1 id=\"Asciidoctor-Docs\"><a href=\"#Asciidoctor-Docs\" class=\"headerlink\" title=\"Asciidoctor Docs\"></a>Asciidoctor Docs</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># linux 安装 asciidoctor</span></span><br><span class=\"line\">sudo apt-get install -y asciidoctor</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">asciidoctor --version</span><br><span class=\"line\"><span class=\"comment\"># adoc 文档生成 html</span></span><br><span class=\"line\">asciidoctor *.adoc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.Terminal Output </span><br><span class=\"line\">.... </span><br><span class=\"line\">From github.com:asciidoctor/asciidoctor</span><br><span class=\"line\"> * branch        master   -&gt; FETCH_HEAD</span><br><span class=\"line\">Already up to date.</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源代码块\"><a href=\"#源代码块\" class=\"headerlink\" title=\"源代码块\"></a>源代码块</h2><p>.Specify GitLab CI stages </p>\n<h2 id=\"source-yaml\"><a href=\"#source-yaml\" class=\"headerlink\" title=\"[source,yaml] \"></a>[source,yaml] </h2><p>image: node:10.16.3-buster<br>stages: [ init, verify, deploy ]<br>spring:</p>\n<h2 id=\"port-8080\"><a href=\"#port-8080\" class=\"headerlink\" title=\"  port: 8080\"></a>  port: 8080</h2><h2 id=\"循环嵌套块\"><a href=\"#循环嵌套块\" class=\"headerlink\" title=\"循环嵌套块\"></a>循环嵌套块</h2><p>====</p>\n<h1 id=\"This-is-an-example\"><a href=\"#This-is-an-example\" class=\"headerlink\" title=\"This is an example\"></a>This is an example</h1><h1 id=\"This-is-an-example-inside-an-example\"><a href=\"#This-is-an-example-inside-an-example\" class=\"headerlink\" title=\"This is an example inside an example\"></a>This is an example inside an example</h1><p>====</p>\n","tags":["adoc"]},{"title":"feign 扩展","url":"/2021-05-14/fegin-ext/","content":"<h1 id=\"feign-扩展\"><a href=\"#feign-扩展\" class=\"headerlink\" title=\"feign 扩展\"></a>feign 扩展</h1><h2 id=\"FactoryBean-threw-exception-on-object-creation-nested-exception-is-java-lang-IllegalStateException-Method-has-too-many-Body-parameters\"><a href=\"#FactoryBean-threw-exception-on-object-creation-nested-exception-is-java-lang-IllegalStateException-Method-has-too-many-Body-parameters\" class=\"headerlink\" title=\"FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Method has too many Body parameters\"></a><code>FactoryBean threw exception on object creation; nested exception is java.lang.IllegalStateException: Method has too many Body parameters</code></h2><h3 id=\"源码跟踪\"><a href=\"#源码跟踪\" class=\"headerlink\" title=\"源码跟踪\"></a>源码跟踪</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.springframework.cloud.openfeign.support.SpringMvcContract#parseAndValidateMetadata</span><br><span class=\"line\">    feign.Contract.BaseContract#parseAndValidateMetadata</span><br><span class=\"line\">        <span class=\"comment\">// 循环每个methoad进行解析</span></span><br><span class=\"line\">        org.springframework.cloud.openfeign.support.SpringMvcContract#processAnnotationsOnParameter </span><br><span class=\"line\">            <span class=\"comment\">// Annotation --&gt; AnnotatedParameterProcessor</span></span><br><span class=\"line\">            org.springframework.cloud.openfeign.AnnotatedParameterProcessor#processArgument</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>根据定位发现问题原因，对应请求参数列表 <code>Annotation</code> 处理器没有进行处理。问题原因:</p>\n<ol>\n<li>Annotation –&gt; AnnotatedParameterProcessor 找不到, 对 <code>AnnotatedParameterProcessor</code> 进行配置。</li>\n<li><code>AnnotatedParameterProcessor</code> 处理不了，检查业务逻辑是否有问题。</li>\n</ol>\n<p><strong>准对问题1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> PathVariable</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PathVariableParameterProcessor <span class=\"title\">pathVariableParameterProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PathVariableParameterProcessor();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> RequestParam</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestParamParameterProcessor <span class=\"title\">requestParamParameterProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RequestParamParameterProcessor();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> RequestHeader</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestHeaderParameterProcessor <span class=\"title\">requestHeaderParameterProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RequestHeaderParameterProcessor();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> SpringQueryMap</span></span><br><span class=\"line\"><span class=\"comment\"> * url 参数列表,将对象POJO或者Map转成url参数列表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> QueryMapParameterProcessor <span class=\"title\">queryMapParameterProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> QueryMapParameterProcessor();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * RequestPart</span></span><br><span class=\"line\"><span class=\"comment\"> * form表单,将MultipartFile,POJO,参数转成form表单</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RequestPartParameterProcessor <span class=\"title\">requestPartParameterProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RequestPartParameterProcessor();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>RequestPartParameterProcessor</code> 处理器可以解决文件上传时，添加 <strong>form</strong> 表单参数提示 <code>Method has too many Body parameters</code> 的问题。</p>\n","tags":["feign"]},{"title":"mac_command_line_tools","url":"/2023-02-15/mac-command-line-tools/","content":"<h1 id=\"Xcode命令行工具Command-Line-Tools（xcode-select）\"><a href=\"#Xcode命令行工具Command-Line-Tools（xcode-select）\" class=\"headerlink\" title=\"Xcode命令行工具Command Line Tools（xcode-select）\"></a>Xcode命令行工具Command Line Tools（xcode-select）</h1><p>一般Xcode安装后，第一次打开时，会弹窗提示安装Command Line Tools，直接安装即可。<br>如果当时没有安装，后面也可以单独安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">xcode-select --install\t// 安装命令</span><br><span class=\"line\"></span><br><span class=\"line\">xcode-select --version\t// 查看版本</span><br></pre></td></tr></table></figure>\n\n<p>有时Command Line Tools出了问题，可以先尝试恢复默认设置来解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 恢复默认设置（需要sudo权限）</span><br><span class=\"line\">sudo xcode-select --reset</span><br></pre></td></tr></table></figure>\n\n<p>还是解决不了，可以考虑删掉后重新安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 强制删除安装目录下的文件</span><br><span class=\"line\">sudo rm -rf /Library/Developer/CommandLineTools</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新安装</span><br><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>除了终端命令的安装方式，也可以到<a href=\"https://developer.apple.com/download/more/\" target=\"_blank\" rel=\"noopener\">苹果开发者官网的下载专区</a>搜索Command Line Tools并下载安装包。</p>\n","tags":["tools","mac"]},{"title":"linux 常用命令(五) —— jq","url":"/2023-03-31/jq-command/","content":"<h1 id=\"linux-常用命令-——-jq\"><a href=\"#linux-常用命令-——-jq\" class=\"headerlink\" title=\"linux 常用命令 —— jq\"></a>linux 常用命令 —— jq</h1><h2 id=\"一、判断json数组长度\"><a href=\"#一、判断json数组长度\" class=\"headerlink\" title=\"一、判断json数组长度\"></a>一、判断json数组长度</h2><p>可以使用 <code>jq &#39;.|length&#39;</code> 来判断。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'[&#123;\"key1\":\"v1\",\"version\":\"1.5.024\"&#125;,&#123;\"key1\":\"v2\",\"version\":\"1.5.026\"&#125;]'</span>|jq <span class=\"string\">'length'</span></span><br><span class=\"line\"><span class=\"comment\"># result</span></span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、获取数组指定数据\"><a href=\"#二、获取数组指定数据\" class=\"headerlink\" title=\"二、获取数组指定数据\"></a>二、获取数组指定数据</h2><p>可以使用 <code>jq &#39;.[0]&#39;</code> 来获取下标为0的json数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'[&#123;\"key1\":\"v1\",\"version\":\"1.5.024\"&#125;,&#123;\"key1\":\"v2\",\"version\":\"1.5.026\"&#125;]'</span>|jq <span class=\"string\">'.[0]'</span></span><br><span class=\"line\"><span class=\"comment\"># result</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"key1\"</span>: <span class=\"string\">\"v1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.5.024\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>jq &#39;.[]&#39;</code> 是获取json的数组的所有数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'[&#123;\"key1\":\"v1\",\"version\":\"1.5.024\"&#125;,&#123;\"key1\":\"v2\",\"version\":\"1.5.026\"&#125;]'</span>|jq <span class=\"string\">'.[]'</span></span><br><span class=\"line\"><span class=\"comment\"># result</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"key1\"</span>: <span class=\"string\">\"v1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.5.024\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"key1\"</span>: <span class=\"string\">\"v2\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.5.026\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、筛选json数组中符合条件的一项\"><a href=\"#三、筛选json数组中符合条件的一项\" class=\"headerlink\" title=\"三、筛选json数组中符合条件的一项\"></a>三、筛选json数组中符合条件的一项</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'&#123;\"status\":true,\"code\":\"0\",\"message\":\"ok\",\"data\":[&#123;\"key1\":\"v1\",\"version\":\"1.5.024\"&#125;,&#123;\"key1\":\"v2\",\"version\":\"1.5.026\"&#125;]&#125;'</span>| jq <span class=\"string\">'.data[]| select(.key1 == \"v1\")'</span>|jq <span class=\"string\">'.version'</span></span><br><span class=\"line\"><span class=\"comment\"># result </span></span><br><span class=\"line\"><span class=\"string\">\"1.5.024\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bash 使用map包装后，结果是符合条件的数组</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'&#123;\"status\":true,\"code\":\"0\",\"message\":\"ok\",\"data\":[&#123;\"key1\":\"v1\",\"version\":\"1.5.024\"&#125;,&#123;\"key1\":\"v2\",\"version\":\"1.5.026\"&#125;]&#125;'</span>|jq <span class=\"string\">'.data'</span>|jq <span class=\"string\">'map(select(.key1 == \"v1\"))'</span></span><br><span class=\"line\"><span class=\"comment\"># result </span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">\"key1\"</span>: <span class=\"string\">\"v1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.5.024\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/yangxiayi1987/p/14776340.html\" target=\"_blank\" rel=\"noopener\">jq 常用操作</a><br><a href=\"https://mozillazg.com/2018/01/jq-use-examples-cookbook.html\" target=\"_blank\" rel=\"noopener\"></a></p>\n","tags":["linux"]},{"title":"linux 常用命令(五) —— 查看磁盘大小","url":"/2023-03-31/du-size/","content":"<h1 id=\"linux-常用命令-五-——-查看磁盘大小\"><a href=\"#linux-常用命令-五-——-查看磁盘大小\" class=\"headerlink\" title=\"linux 常用命令(五) —— 查看磁盘大小\"></a>linux 常用命令(五) —— 查看磁盘大小</h1><h2 id=\"一、ls-命令：列出当前工作目录下的所有文件-文件夹的名称\"><a href=\"#一、ls-命令：列出当前工作目录下的所有文件-文件夹的名称\" class=\"headerlink\" title=\"一、ls 命令：列出当前工作目录下的所有文件/文件夹的名称\"></a>一、ls 命令：列出当前工作目录下的所有文件/文件夹的名称</h2><p>使用<code>ls -l</code>，会显示成字节大小，<code>ls- lh</code>会以KB、MB等为单位进行显示更加直观。</p>\n<h2 id=\"二、du-命令：查看当前目录和子目录文件夹-文件大小情况\"><a href=\"#二、du-命令：查看当前目录和子目录文件夹-文件大小情况\" class=\"headerlink\" title=\"二、du 命令：查看当前目录和子目录文件夹/文件大小情况\"></a>二、du 命令：查看当前目录和子目录文件夹/文件大小情况</h2><p>du = disk usage 磁盘使用率，输出每个文件或者目录总大小。其用法如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-c, --total 累计大小</span></span><br><span class=\"line\"><span class=\"comment\">#-d, --max-depth=N 决定统计每个目录的深度</span></span><br><span class=\"line\"><span class=\"comment\">#-B, --block-size=SIZE 决定显示文件大小的单位;比如 ‘-BM’，就是MB，'-BK’就是KB</span></span><br><span class=\"line\"><span class=\"comment\">#-h, --human-readable 以高可读方式打印 (比如1K 234M 2G)</span></span><br><span class=\"line\"><span class=\"comment\">#-s, --summarize 显示总大小</span></span><br><span class=\"line\">du -sh：查看当前目录总大小。</span><br><span class=\"line\">du -sh *：查看当前目录所有子目录大小。</span><br><span class=\"line\">du -ach *：查看当前目录和所有子目录大小，最后一行会显示当前目录的总大小，不包括隐藏文件。</span><br></pre></td></tr></table></figure>","tags":["linux"]},{"title":"messagepack序列化——字段丢失","url":"/2023-04-14/messagepack-error/","content":"<h1 id=\"messagepack序列化——字段丢失\"><a href=\"#messagepack序列化——字段丢失\" class=\"headerlink\" title=\"messagepack序列化——字段丢失\"></a>messagepack序列化——字段丢失</h1><blockquote>\n<p><a href=\"https://msgpack.org/\" target=\"_blank\" rel=\"noopener\">messagepack官网</a><br>因<code>messagepack</code>序列化速度快,消息体小等优点，因此在项目中自定义协议中,使用<code>messagepack</code>对消息体进行序列化和反序列化。</p>\n</blockquote>\n<p>在使用<code>messagepack</code>过程中,突然发现一个业务接口数据返回异常,经过排查后最终定位到是 <code>PushResult</code> 对象中传输的字段数据丢失,导致业务处理结果与实际结果相反。具体序列化实体类定义如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Message</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PushResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 成功的设备集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; successDeviceIdSet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 失败的设备集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;String&gt; failDeviceIdSet = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String errorMsg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        PushResult result = PushResult.init(Sets.newHashSet(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = MsgPack.write(result);</span><br><span class=\"line\">        PushResult read = MsgPack.read(bytes, PushResult.class);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>序列化数据丢失如下图:<br><img src=\"/2023-04-14/messagepack-error/error.png\" alt=\"error\"></p>\n<p>原本以为是 <code>Set</code> 或者 <code>List</code> 没有实现 <code>java.io.Serializable</code> 接口,但经过业务排查,有其他业务正常的接口返回定义也是使用了 <code>Set</code> 和 <code>List</code>,其返回值都正常(因为实际的实现类使用的 <code>ArrayList</code> 和 <code>HashSet</code> 都实现了 <code>java.io.Serializable</code> 接口)。<br>经过一系列排查后,最终定位到原因是类属性 <code>successDeviceIdSet</code> 被 <code>final</code>修饰。处理后,最后得到正确结果。如下图所示:<br><img src=\"/2023-04-14/messagepack-error/normal.png\" alt=\"normal\"></p>\n","tags":["messagepack"]},{"title":"分析通过jmap等命令获取的JVM heap dump文件中，Class name列 [Z [B [C [L [D [F [I [J [S字符的含义","url":"/2023-04-17/jmap-histo/","content":"<h1 id=\"分析通过jmap等命令获取的JVM-heap-dump文件中，Class-name列-Z-B-C-L-D-F-I-J-S字符的含义\"><a href=\"#分析通过jmap等命令获取的JVM-heap-dump文件中，Class-name列-Z-B-C-L-D-F-I-J-S字符的含义\" class=\"headerlink\" title=\"分析通过jmap等命令获取的JVM heap dump文件中，Class name列 [Z [B [C [L [D [F [I [J [S字符的含义\"></a>分析通过jmap等命令获取的JVM heap dump文件中，Class name列 [Z [B [C [L [D [F [I [J [S字符的含义</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取java服务的进程号</span></span><br><span class=\"line\">jps -lvm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简单的查看一下堆</span></span><br><span class=\"line\">jmap -histo 进程号 | head -n 20</span><br></pre></td></tr></table></figure>\n\n<p>通过jmap等命令获得的heap dump文件后，打开的内容如下：<br><img src=\"/2023-04-17/jmap-histo/jmap_histo.png\" alt=\"jmap\"></p>\n<ol start=\"2\">\n<li>class name数据的含义分析<br>在class name栏里，有很多特殊的字符：[C、[B、[Ljava.lang.Object;、[I等，这些字符其实就是返回由Class类代表的类、接口、数组对象、基本类型或void的实体类型名称。所有更详细内容可以查看Class.getName()这个方法的注释。</li>\n</ol>\n<p>首先， “[”这个符号其实代表的就是数组。 一个“[”代表一维数组，两个代表二维数组，以此类推。在Java中的表现形式就是：[][]。</p>\n<p>而C、B、L这些字母其在Java中的类型和编码对应关系如下：</p>\n<table>\n<thead>\n<tr>\n<th>Element Type</th>\n<th>Encoding</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>boolean</td>\n<td>Z</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>B</td>\n</tr>\n<tr>\n<td>char</td>\n<td>C</td>\n</tr>\n<tr>\n<td>class or interface</td>\n<td>Lclassname;</td>\n</tr>\n<tr>\n<td>double</td>\n<td>D</td>\n</tr>\n<tr>\n<td>float</td>\n<td>F</td>\n</tr>\n<tr>\n<td>int</td>\n<td>I</td>\n</tr>\n<tr>\n<td>long</td>\n<td>J</td>\n</tr>\n<tr>\n<td>short</td>\n<td>S</td>\n</tr>\n</tbody></table>\n","tags":["java","jmap"]},{"title":"java应用cpu告警案例","url":"/2023-05-17/java-cpu-alarm/","content":"<h1 id=\"java应用cpu告警案例\"><a href=\"#java应用cpu告警案例\" class=\"headerlink\" title=\"java应用cpu告警案例\"></a>java应用cpu告警案例</h1><p>在日常服务巡查过程,突然发现有台服务cpu占用非常高,如下图所示:<br><img src=\"/2023-05-17/java-cpu-alarm/cpu_alarm.png\" alt=\"cpu_alarm\"></p>\n<p>于是登陆节点上进行观察,通过 <code>arthas</code> 排查发现日志输出占用cpu较高,同时通过 <code>grafana</code> 观察到当前节点 <code>debug</code> 日志输出较高。如下图所示:<br><img src=\"/2023-05-17/java-cpu-alarm/debug_log.png\" alt=\"debug_log\"></p>\n<p>回忆发现,确实有通过 <code>arthas</code> 修改日志级别,导致其中一台服务器日志级别设置错了,设置成了 <code>debug</code>。于是重新修改日志级别,命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[arthas@11]$ logger -c 292d1c71 --name ROOT --level info</span><br><span class=\"line\">Update logger level success.</span><br></pre></td></tr></table></figure>\n\n<p>日志级别修改后,cpu立刻开始下降。</p>\n","tags":["jvm"]},{"title":"(转)Feign和Hystrix的结合使用","url":"/2021-02-03/feign-hystrix/","content":"<h1 id=\"Feign和Hystrix的结合使用\"><a href=\"#Feign和Hystrix的结合使用\" class=\"headerlink\" title=\"Feign和Hystrix的结合使用\"></a>Feign和Hystrix的结合使用</h1><blockquote>\n<p><a href=\"http://www.saily.top/2020/04/19/springcloud/hystrix05/\" target=\"_blank\" rel=\"noopener\">Feign和Hystrix结合使用</a><br><a href=\"http://www.saily.top/2020/04/12/springcloud/feign01/\" target=\"_blank\" rel=\"noopener\">Feign01-流程大体分析和源码分析入口</a></p>\n</blockquote>\n<h1 id=\"Feign和Hystrix结合使用\"><a href=\"#Feign和Hystrix结合使用\" class=\"headerlink\" title=\"Feign和Hystrix结合使用\"></a>Feign和Hystrix结合使用</h1><h2 id=\"在-FeignClient中增加fallback配置，指定降级方法的执行\"><a href=\"#在-FeignClient中增加fallback配置，指定降级方法的执行\" class=\"headerlink\" title=\"在@FeignClient中增加fallback配置，指定降级方法的执行\"></a>在@FeignClient中增加fallback配置，指定降级方法的执行</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserFeign</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">getUserByID</span><span class=\"params\">( String id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>降级方法的编写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserFeignFallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserFeign</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserByID</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setId(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"fallback 回调用户\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign和Hystrix整合的配置\"><a href=\"#Feign和Hystrix整合的配置\" class=\"headerlink\" title=\"Feign和Hystrix整合的配置\"></a>Feign和Hystrix整合的配置</h2><p>超时时间设置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\"><span class=\"attr\">  hystrix:</span></span><br><span class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">hystrix:</span></span><br><span class=\"line\"><span class=\"attr\">  command:</span></span><br><span class=\"line\"><span class=\"attr\">    default:</span></span><br><span class=\"line\"><span class=\"attr\">      execution:</span></span><br><span class=\"line\"><span class=\"attr\">        isolation:</span></span><br><span class=\"line\"><span class=\"attr\">          thread:</span></span><br><span class=\"line\"><span class=\"attr\">            timeoutInMilliseconds:</span> <span class=\"number\">20000</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      execution:</span></span><br><span class=\"line\"><span class=\"attr\">        isolation:</span></span><br><span class=\"line\"><span class=\"attr\">          thread:</span></span><br><span class=\"line\"><span class=\"attr\">            timeoutInMilliseconds:</span> <span class=\"number\">20000</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要特定某个服务的配置，就不写default，这个user是FeignClient的服务名，对应一个HystrixGroup，具体的key就是方法名。</p>\n<p>那么如果想针对服务的某一个方法配置怎么办？</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hystrix:</span></span><br><span class=\"line\"><span class=\"attr\">  command:</span></span><br><span class=\"line\">    <span class=\"string\">ServiceA#sayHello(Long,String):</span></span><br><span class=\"line\"><span class=\"attr\">      execution:</span></span><br><span class=\"line\"><span class=\"attr\">        isolation:</span></span><br><span class=\"line\"><span class=\"attr\">          thread:</span></span><br><span class=\"line\"><span class=\"attr\">            timeoutInMilliseconds:</span> <span class=\"number\">20000</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程池配置\"><a href=\"#线程池配置\" class=\"headerlink\" title=\"线程池配置\"></a>线程池配置</h2><ul>\n<li>hystrix.threadpool.default.coreSize：线程池大小，默认10</li>\n<li>hystrix.threadpool.default.maximumSize：线程池最大大小，默认10</li>\n<li>hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize：是否允许动态调整线程数量，默认false，只有设置为true了，上面的maximumSize才有效</li>\n<li>hystrix.threadpool.default.keepAliveTimeMinutes ：默认是1，超出coreSize的线程，空闲1分钟后释放掉</li>\n<li>hystrix.threadpool.default.maxQueueSize 默认－1，不能动态修改</li>\n<li>hystrix.threadpool.default.queueSizeRejectionThreshold 可以动态修改，默认是5，先进入请求队列，然后再由线程池执行</li>\n</ul>\n<h3 id=\"如何计算线程池数量？\"><a href=\"#如何计算线程池数量？\" class=\"headerlink\" title=\"如何计算线程池数量？\"></a>如何计算线程池数量？</h3><h4 id=\"高峰期每秒的请求数量-1000毫秒-TP99请求延时-buffer空间\"><a href=\"#高峰期每秒的请求数量-1000毫秒-TP99请求延时-buffer空间\" class=\"headerlink\" title=\"高峰期每秒的请求数量 / 1000毫秒 / TP99请求延时 + buffer空间\"></a>高峰期每秒的请求数量 / 1000毫秒 / TP99请求延时 + buffer空间</h4><p>比如说处理一个请求，要50ms，那么TP99，也就是99%的请求里处理一个请求耗时最长是50ms。<br>我们给一点缓冲空间10ms，那就是处理请求接口耗时60ms。<br>所以一秒钟一个线程可以处理：1000 / 60 = 16，一个线程一秒钟可以处理16个请求。</p>\n<p>假设高峰期，每秒最多1200个请求，一个线程每秒可以处理16个请求，需要多少个线程才能处理每秒1200个请求呢？1200 / 16 = 75，最多需要75个线程，每个线程每秒处理16个请求，75个线程每秒才可以处理1200个请求。</p>\n<p>最多需要多少个线程数量，就是这样子算出来</p>\n<h4 id=\"如果是服务B-gt-服务A的话，服务B线程数量怎么设置\"><a href=\"#如果是服务B-gt-服务A的话，服务B线程数量怎么设置\" class=\"headerlink\" title=\"如果是服务B -&gt; 服务A的话，服务B线程数量怎么设置\"></a>如果是服务B -&gt; 服务A的话，服务B线程数量怎么设置</h4><p>服务B调用服务A的线程池需要多少个线程呢？</p>\n<p>高峰期，服务B最多要调用服务A每秒钟1200次，服务A处理一个请求是60ms，服务B每次调用服务A的时候，用一个线程发起一次请求，那么这个服务B的这个线程，要60ms才能返回。</p>\n<p>服务B而言，一个线程对服务A发起一次请求需要60ms，一个线程每秒钟可以请求服务A达到16次，但是现在服务B每秒钟需要请求服务A达到1200次，那么服务B就需要75个线程，在高峰期并发请求服务A，才可以完成每秒1200次的调用。</p>\n<p>服务B，部署多台机器，每台机器调用服务A的线程池有10个线程，比如说搞个10个线程，一共部署10台机器，那么服务B调用服务A的线程数量，一共有100个线程，轻轻松松可以支撑高峰期调用服务A的1200次的场景</p>\n<p>每个线程调用服务A一次，耗时60ms，每个线程每秒可以调用服务A一共是16次，100个线程，每秒最多可以调用服务A是1600次，高峰的时候只要支持调用服务A的1200次就可以了，所以这个机器部署就绰绰有余了</p>\n<h2 id=\"执行配置\"><a href=\"#执行配置\" class=\"headerlink\" title=\"执行配置\"></a>执行配置</h2><ul>\n<li>hystrix.command.default.execution.isolation.strategy：隔离策略，默认Thread，可以选择Semaphore信号量</li>\n<li>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds：超时时间，默认1000ms</li>\n<li>hystrix.command.default.execution.timeout.enabled：是否启用超时，默认ture</li>\n<li>hystrix.command.default.execution.isolation.thread.interruptOnTimeout：超时的时候是否中断执行，默认true</li>\n<li>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests：信号量隔离策略下，允许的最大并发请求数量，默认10</li>\n</ul>\n<h2 id=\"降级配置\"><a href=\"#降级配置\" class=\"headerlink\" title=\"降级配置\"></a>降级配置</h2><ul>\n<li>hystrix.command.default.fallback.enabled 默认true</li>\n</ul>\n<h2 id=\"熔断配置\"><a href=\"#熔断配置\" class=\"headerlink\" title=\"熔断配置\"></a>熔断配置</h2><ul>\n<li>hystrix.command.default.circuitBreaker.enabled：是否启用熔断器默认true</li>\n<li>hystrix.command.default.circuitBreaker.requestVolumeThreshold：10秒钟内，请求数量达到多少才能去尝试触发熔断，默认20</li>\n<li>hystrix.command.default.circuitBreaker.errorThresholdPercentage：10秒钟内，请求数量达到20，同时异常比例达到50%，就会触发熔断，默认50</li>\n<li>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds：触发熔断之后，5s内直接拒绝请求，走降级逻辑，5s后尝试half-open放过少量流量试着恢复，默认5000</li>\n<li>hystrix.command.default.circuitBreaker.forceOpen：强制打开熔断器</li>\n<li>hystrix.command.default.circuitBreaker.forceClosed：强制关闭熔断器</li>\n</ul>\n<h2 id=\"监控配置\"><a href=\"#监控配置\" class=\"headerlink\" title=\"监控配置\"></a>监控配置</h2><ul>\n<li>hystrix.threadpool.default.metrics.rollingStats.timeInMillisecond：线程池统计指标的时间，默认10000，就是10s</li>\n<li>hystrix.threadpool.default.metrics.rollingStats.numBuckets：将rolling window划分为n个buckets，默认10</li>\n<li>hystrix.command.default.metrics.rollingStats.timeInMilliseconds：command的统计时间，熔断器是否打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</li>\n<li>hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</li>\n<li>hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否enable指标的计算和跟踪，默认true</li>\n<li>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds 设置rolling percentile window的时间，默认60000</li>\n<li>hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</li>\n<li>hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</li>\n<li>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds 记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</li>\n</ul>\n<h2 id=\"高阶特性配置\"><a href=\"#高阶特性配置\" class=\"headerlink\" title=\"高阶特性配置\"></a>高阶特性配置</h2><p>hystrix.command.default.requestCache.enabled 默true</p>\n<p>hystrix.command.default.requestLog.enabled 记录日志到HystrixRequestLog，默认true</p>\n<p>hystrix.collapser.default.maxRequestsInBatch 单次批处理的最大请求数，达到该数量触发批处理，默认Integer.MAX_VALUE</p>\n<p>hystrix.collapser.default.timerDelayInMilliseconds 触发批处理的延迟，也可以为创建批处理的时间＋该值，默认10</p>\n<p>hystrix.collapser.default.requestCache.enabled 是否对HystrixCollapser.execute() and HystrixCollapser.queue()的cache，默认true</p>\n<h1 id=\"Feign和Hystrix结合的原理\"><a href=\"#Feign和Hystrix结合的原理\" class=\"headerlink\" title=\"Feign和Hystrix结合的原理\"></a>Feign和Hystrix结合的原理</h1><p>Feign在和Hystrix整合的时候，feign动态代理里面有一些Hystrix相关的代码，请求走feign动态代理的时候，就会基于Hystrix Command发送请求，实现服务间调用的隔离、限流、超时、降级、熔断、统计等。<br><img src=\"/2021-02-03/feign-hystrix/Feign%E5%92%8CHystrix%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.jpg\" alt=\"Feign和Hystrix的核心原理\"></p>\n<h2 id=\"Feign中基于Hystrix的动态代理\"><a href=\"#Feign中基于Hystrix的动态代理\" class=\"headerlink\" title=\"Feign中基于Hystrix的动态代理\"></a>Feign中基于Hystrix的动态代理</h2><p>在Feign的动态代理代码中，HystrixTargeter默认情况下，在没有开启Hystrix的时候，会使用自带的Feign.Builder。在启用Hystrix走，就使用HystrixFeign.Builder。</p>\n<p><strong>HystrixFeign.Builder是在这里创建的。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FeignClientsConfiguration.java</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HystrixFeignConfiguration</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Feign.<span class=\"function\">Builder <span class=\"title\">feignHystrixBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> HystrixFeign.builder();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在HystrixTargeter中，用Hystrix构造动态代理的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HystrixTargeter.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">target</span><span class=\"params\">(FeignClientFactoryBean factory, Feign.Builder feign, FeignContext context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">               Target.HardCodedTarget&lt;T&gt; target)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 没有开启Hystrix的话，走这个逻辑</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!(feign <span class=\"keyword\">instanceof</span> feign.hystrix.HystrixFeign.Builder)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> feign.target(target);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 在有Hystrix的条件下，就开始往这下面走。</span></span><br><span class=\"line\">   feign.hystrix.HystrixFeign.Builder builder = (feign.hystrix.HystrixFeign.Builder) feign;</span><br><span class=\"line\">   <span class=\"comment\">// 用于读取yaml文件中的Hystrix相关的配置，在执行命令的时候会用到</span></span><br><span class=\"line\">   SetterFactory setterFactory = getOptional(factory.getName(), context,</span><br><span class=\"line\">      SetterFactory.class);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (setterFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      builder.setterFactory(setterFactory);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 有降级的话，就用降级包装下</span></span><br><span class=\"line\">   Class&lt;?&gt; fallback = factory.getFallback();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (fallback != <span class=\"keyword\">void</span>.class) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> targetWithFallback(factory.getName(), context, target, builder, fallback);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Class&lt;?&gt; fallbackFactory = factory.getFallbackFactory();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (fallbackFactory != <span class=\"keyword\">void</span>.class) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> targetWithFallbackFactory(factory.getName(), context, target, builder, fallbackFactory);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> feign.target(target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个fallback的实例，从和服务相关联的Spring上下文里获取ServiceAClient的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HystrixTargeter.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">targetWithFallback</span><span class=\"params\">(String feignClientName, FeignContext context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                         Target.HardCodedTarget&lt;T&gt; target,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                         HystrixFeign.Builder builder, Class&lt;?&gt; fallback)</span> </span>&#123;</span><br><span class=\"line\">   T fallbackInstance = getFromContext(<span class=\"string\">\"fallback\"</span>, feignClientName, context, fallback, target.type());</span><br><span class=\"line\">   <span class=\"keyword\">return</span> builder.target(target, fallbackInstance);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用工厂创建一个实例，并校验是否是ServiceAClient接口的实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HystrixTargeter.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">targetWithFallbackFactory</span><span class=\"params\">(String feignClientName, FeignContext context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              Target.HardCodedTarget&lt;T&gt; target,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              HystrixFeign.Builder builder,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              Class&lt;?&gt; fallbackFactoryClass)</span> </span>&#123;</span><br><span class=\"line\">   FallbackFactory&lt;? extends T&gt; fallbackFactory = (FallbackFactory&lt;? extends T&gt;)</span><br><span class=\"line\">      getFromContext(<span class=\"string\">\"fallbackFactory\"</span>, feignClientName, context, fallbackFactoryClass, FallbackFactory.class);</span><br><span class=\"line\">   <span class=\"comment\">/* We take a sample fallback from the fallback factory to check if it returns a fallback</span></span><br><span class=\"line\"><span class=\"comment\">   that is compatible with the annotated feign interface. */</span></span><br><span class=\"line\">   <span class=\"comment\">// 创建一个对象出来看看，检测一下创建出来的对象是否符合要求</span></span><br><span class=\"line\">   Object exampleFallback = fallbackFactory.create(<span class=\"keyword\">new</span> RuntimeException());</span><br><span class=\"line\">   Assert.notNull(exampleFallback,</span><br><span class=\"line\">      String.format(</span><br><span class=\"line\">      <span class=\"string\">\"Incompatible fallbackFactory instance for feign client %s. Factory may not produce null!\"</span>,</span><br><span class=\"line\">         feignClientName));</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!target.type().isAssignableFrom(exampleFallback.getClass())) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">         String.format(</span><br><span class=\"line\">            <span class=\"string\">\"Incompatible fallbackFactory instance for feign client %s. Factory produces instances of '%s', but should produce instances of '%s'\"</span>,</span><br><span class=\"line\">            feignClientName, exampleFallback.getClass(), target.type()));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> builder.target(target, fallbackFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在确认fallbackFactory创建出来的对象没有问题后，调用HystrixFeign的target方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HystrixFeign.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">target</span><span class=\"params\">(Target&lt;T&gt; target, T fallback)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> build(fallback != <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> FallbackFactory.Default&lt;T&gt;(fallback) : <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      .newInstance(target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里主要注意build方法，里面就包含了两局关键的代码，他重新设置了invocationHandlerFactory和contract</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HystrixFeign.java</span></span><br><span class=\"line\"><span class=\"function\">Feign <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">final</span> FallbackFactory&lt;?&gt; nullableFallbackFactory)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.invocationHandlerFactory(<span class=\"keyword\">new</span> InvocationHandlerFactory() &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> InvocationHandler <span class=\"title\">create</span><span class=\"params\">(Target target,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;Method, MethodHandler&gt; dispatch)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 关键代码 HystrixInvocationHandler，包含了基于HystrixCommand的封装，实际还是调用dispatch</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HystrixInvocationHandler(target, dispatch, setterFactory, nullableFallbackFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 关键代码HystrixDelegatingContract，用于解析Hystrix相关的注解</span></span><br><span class=\"line\">  <span class=\"keyword\">super</span>.contract(<span class=\"keyword\">new</span> HystrixDelegatingContract(contract));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021-02-03/feign-hystrix/%E5%90%AF%E7%94%A8Hystrix%E4%B9%8B%E5%90%8Efeign%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E8%BF%87%E7%A8%8B.jpg\" alt=\"启用Hystrix之后feign生成动态代理的过程\"></p>\n<p>再往后的代码就和Hystrix没有关系了，就在feign的动态代理那一套东西，下面继续看HystrixInvocationHandler封装的细节。</p>\n<h2 id=\"Feign中HystrixCommand的执行细节\"><a href=\"#Feign中HystrixCommand的执行细节\" class=\"headerlink\" title=\"Feign中HystrixCommand的执行细节\"></a>Feign中HystrixCommand的执行细节</h2><p>HystrixInvocationHandler，作为一个动态代理的接口，看下它的invoke方法，他构造了一个HystrixCommand，利用Hystrix包装了请求的执行，在HystrixCommand的run方法里，就包含了执行调用的代码（SynchronousMethodHandler）。如果执行请求的时候报错的话，就会调用getFallbac方法，就会执行之前配置的降级方法，执行降级的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HystrixInvocationHandler.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(<span class=\"keyword\">final</span> Object proxy, <span class=\"keyword\">final</span> Method method, <span class=\"keyword\">final</span> Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// early exit if the invoked method is from java.lang.Object</span></span><br><span class=\"line\">  <span class=\"comment\">// code is the same as ReflectiveFeign.FeignInvocationHandler</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"equals\"</span>.equals(method.getName())) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Object otherHandler =</span><br><span class=\"line\">          args.length &gt; <span class=\"number\">0</span> &amp;&amp; args[<span class=\"number\">0</span>] != <span class=\"keyword\">null</span> ? Proxy.getInvocationHandler(args[<span class=\"number\">0</span>]) : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> equals(otherHandler);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"hashCode\"</span>.equals(method.getName())) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashCode();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"toString\"</span>.equals(method.getName())) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 构造一个HystrixCommand匿名内部类,每一个Method对象，都对应了一个HystrixCommand.Setter，也就是说每一个方法都对应了一个HystrixCommand的配置，例如超时时间等</span></span><br><span class=\"line\">  HystrixCommand&lt;Object&gt; hystrixCommand = <span class=\"keyword\">new</span> HystrixCommand&lt;Object&gt;(setterMethodMap.get(method)) &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用SynchronousMethodHandler,也就是发起Http请求的代码</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HystrixInvocationHandler.<span class=\"keyword\">this</span>.dispatch.get(method).invoke(args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> (Error) t;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 降级机制</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">getFallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果降级方法不存在的话，父类会直接报错UnsupportedOperationException。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fallbackFactory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getFallback();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建fallback</span></span><br><span class=\"line\">        Object fallback = fallbackFactory.create(getExecutionException());</span><br><span class=\"line\">        <span class=\"comment\">// 调用之前定义的fallback方法</span></span><br><span class=\"line\">        Object result = fallbackMethodMap.get(method).invoke(fallback, args);</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isReturnsHystrixCommand(method)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> ((HystrixCommand) result).execute();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isReturnsObservable(method)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Create a cold Observable</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> ((Observable) result).toBlocking().first();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isReturnsSingle(method)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Create a cold Observable as a Single</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> ((Single) result).toObservable().toBlocking().first();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isReturnsCompletable(method)) &#123;</span><br><span class=\"line\">          ((Completable) result).await();</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// shouldn't happen as method is public due to being an interface</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(e);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Exceptions on fallback are tossed by Hystrix</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(e.getCause());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">// 检查Feign方法的返回类型，可以拿到Hystrix的相关的返回类型，比如HystrixCommand、Observable、Single、Completable。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isReturnsHystrixCommand(method)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hystrixCommand;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isReturnsObservable(method)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a cold Observable</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hystrixCommand.toObservable();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isReturnsSingle(method)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a cold Observable as a Single</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hystrixCommand.toObservable().toSingle();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isReturnsCompletable(method)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hystrixCommand.toObservable().toCompletable();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> hystrixCommand.execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在HystrixInvocationHandler构造的时候，构造了一个setterMethodMap，每一个Method对象，都对应了一个HystrixCommand.Setter，也就是说每一个方法都对应了一个HystrixCommand的key和groupkey的配置，例如超时时间等，线程池配置等，Setter被创建的时候，用的就是@FeignClient的name作为groupKey，也就是ServiceA，commandKey用于是类名+方法名（ServiceA#sayHello(Long,String)），这个groupKey就对应了一个线程池的配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SetterFactory.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> HystrixCommand.<span class=\"function\">Setter <span class=\"title\">create</span><span class=\"params\">(Target&lt;?&gt; target, Method method)</span> </span>&#123;</span><br><span class=\"line\">  String groupKey = target.name();</span><br><span class=\"line\">  String commandKey = Feign.configKey(target.type(), method);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> HystrixCommand.Setter</span><br><span class=\"line\">      .withGroupKey(HystrixCommandGroupKey.Factory.asKey(groupKey))</span><br><span class=\"line\">      .andCommandKey(HystrixCommandKey.Factory.asKey(commandKey));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>基于Method对象对应的setterMethodMap，构造一个HystrixCommand匿名内部类</li>\n<li>内部类实现了run方法和getFallback方法</li>\n<li>run方法直接调用调用SynchronousMethodHandler发起http请求</li>\n<li>如果run方法执行异常，getFallback方法调用之前在FeignClient中定义的降级方法</li>\n<li>检查Feign方法的返回类型，可以拿到Hystrix的相关的返回类型，比如HystrixCommand、Observable、Single、Completable。<br>到这里已经看到调用了HystrixCommand的execute方法，所以接下来的内容，将会进入到Hystrix的源码中，下一篇文章细说。</li>\n</ol>\n","tags":["Feign","Hystrix"]},{"title":"kafka 生产者源码分析(一)","url":"/2021-03-12/kafka-producer-analysis/","content":"<h1 id=\"kafka-生产者源码分析-一\"><a href=\"#kafka-生产者源码分析-一\" class=\"headerlink\" title=\"kafka 生产者源码分析(一)\"></a>kafka 生产者源码分析(一)</h1><p><img src=\"/2021-03-12/kafka-producer-analysis/10781615532737_.pic_hd.jpg\" alt=\"kafka producer大致流程\"></p>\n<ol>\n<li>ProducerInterceptors 对消息进行拦截</li>\n<li>Serializer 对消息的 key 和 value 进行序列化。</li>\n<li>Partitioner 对消息选择合适的 Partition。</li>\n<li>RecordAccumulator 收集消息，实现批量发送。</li>\n<li>Sender 从 RecordAccumulator 获取消息。</li>\n<li>构造 ClientRequest。</li>\n<li>将 ClientRequest 交给 NetworkClient，准备发送。</li>\n<li>NetworkClient 将请求放入 KafkaChannel 的缓存。</li>\n<li>执行网络 I/O，发送请求。</li>\n<li>收到响应，调用 ClientRequest 的回调函数。</li>\n<li>调用 RecordBatch 的回调函数，最终调用每个消息上的注册的回调函数。</li>\n</ol>\n<p><img src=\"/2021-03-12/kafka-producer-analysis/10791615532955_.pic_hd.jpg\" alt=\"kafa send流程图\"></p>\n<ol>\n<li>调用 <code>ProducerInterceptors.onSend()</code> 方法,通过 ProducerInterceptor 对消息进行拦截或修改。</li>\n<li>调用 <code>waitOnMetadata()</code> 方法获取 <strong>Kafka</strong> 集群的信息，底层会唤醒 <strong>Send</strong> 线程更新 Metadata 中保存的 <strong>Kafka</strong> 集群元数据。</li>\n<li>调用 <code>Serializer.serialize()</code> 方法序列化消息的 key 和 value。</li>\n<li>调用 <code>partition()</code> 为消息选择合适的分区。</li>\n<li>调用 <code>RecordAccumulator.append()</code> 方法，将消息追加到 <strong>RecordAccumulator</strong> 中。</li>\n<li>唤醒 <strong>Sender</strong> 线程，由 <strong>Sender</strong> 线程将 <strong>RecordAccumulator</strong> 中缓存的消息发送出去。</li>\n</ol>\n<h2 id=\"Producer-的-Metadata-元数据\"><a href=\"#Producer-的-Metadata-元数据\" class=\"headerlink\" title=\"Producer 的 Metadata 元数据\"></a>Producer 的 Metadata 元数据</h2><p>元数据记录了:</p>\n<ul>\n<li>某个 Topic 中有哪几个分区</li>\n<li>每个分区的 Leader 副本分配哪几个节点上</li>\n<li>Follower 副本分配哪些节点上</li>\n<li>哪些副本在 ISR 集合中以及这些节点的网络地址、端口</li>\n</ul>\n<h3 id=\"KafkaProducer-waitOnMetadata-方法\"><a href=\"#KafkaProducer-waitOnMetadata-方法\" class=\"headerlink\" title=\"KafkaProducer.waitOnMetadata() 方法\"></a><code>KafkaProducer.waitOnMetadata()</code> 方法</h3><p>它负责触发 Kafka 集群元数据的更新，并阻塞主线程等待更新完毕。</p>\n<ol>\n<li>检测 Metadata 中是否包含指定 Topic 的元数据，若不包含，则将 Topic 添加到 topics 集合中，下次更新时会从服务端获取指定 Topic 的元数据。</li>\n<li>尝试获取 Topic 中分区的详细信息，失败后调用 <code>requestUpdate()</code> 方法设置 <strong>Metadata.needUpdate</strong> 字段，并得到当前元数据版本号。</li>\n<li>唤醒 <strong>Sender</strong> 线程，由 <strong>Sender</strong> 线程更新 Metadata 中保存的 <strong>Kafka</strong> 集群元数据。</li>\n<li>主线程调用 <code>awaitUpdate()</code> 方法，等待 <strong>Sender</strong> 线程完成更新。</li>\n<li>从 Metadata 中获取指定 Topic 分区的详细信息(即 <strong>ParitionInfo</strong> 集合)。若失败，则回到步骤2继续尝试，若等待时间超时，则抛出异常。</li>\n</ol>\n<h2 id=\"RecordAccumulator-分析\"><a href=\"#RecordAccumulator-分析\" class=\"headerlink\" title=\"RecordAccumulator 分析\"></a>RecordAccumulator 分析</h2><p>RecordAccumulator 中有一个以 TopicPartition 为 key 的 ConcurrentMap，每个 value 是 ArrayDeque<recordbatch> (ArrayDeque 并不是线程安全的集合，后面会详细介绍其加锁处理过程)，其中缓存了发往对应 TopicPartition 的消息。每个 RecordBatch 拥有一个 MemoryRecords 对象的引用。MemoryRecords 才是消息最终存放的地方。这三个类的依赖关系如下图所示。<br><img src=\"/2021-03-12/kafka-producer-analysis/10801615537830_.pic_hd.jpg\" alt=\"RecordAccumulator 依赖关系\"></recordbatch></p>\n<h3 id=\"RecordAccumulator-append-方法\"><a href=\"#RecordAccumulator-append-方法\" class=\"headerlink\" title=\"RecordAccumulator.append() 方法\"></a><code>RecordAccumulator.append()</code> 方法</h3><p><code>KafkaProducer.send()</code> 方法最终会调用 <code>RecordAccumulator.append()</code> 方法将消息追加到 <strong>RecordAccumulator</strong> 中，其代码比较长，先来看主要逻辑:</p>\n<ol>\n<li>首先在 <em>batches</em> 集合中查找 <strong>TopicPartition</strong> 对应的 <strong>Deque</strong>，查找不到，则创建新的 <strong>Deque</strong>，并添加到 <em>batches</em> 集合中。</li>\n<li>对 <strong>Deque</strong> 加锁(使用 <strong>synchronaized</strong> 关键字加锁)。</li>\n<li>调用 <code>tryAppend()</code> 方法，尝试向 <strong>Deque</strong> 中最后一个 <strong>ProducerBatch</strong> 追加 <strong>Record</strong>。</li>\n<li><strong>synchronized</strong> 块结束，自动解锁。</li>\n<li>追加成功，则返回 <strong>RecordAppendResult</strong>(其中封装了 ProduceRequestResult)。</li>\n<li>追加失败，则尝试从 <strong>BufferPool</strong> 中申请新的 <strong>ByteBuffer</strong>。</li>\n<li>对 <strong>Deque</strong> 加锁(使用 <strong>synchronized</strong> 关键字加锁)，再次尝试第3步。</li>\n<li>追加成功，则返回; 失败，则使用第 5 步得到的 <strong>ByteBuffer</strong> 创建 <strong>ProducerBatch</strong>。</li>\n<li>将 <strong>Record</strong> 追加到新建的 <strong>ProducerBatch</strong> 中，并将新建的 <strong>ProducerBatch</strong> 追加到对应的 <strong>Deque</strong> 尾部。</li>\n<li>将新建的 <strong>ProducerBatch</strong> 追加到 <em>incomplete</em> 集合。</li>\n<li><strong>synchronized</strong> 块结束，自动解锁。</li>\n<li>返回 <strong>RecordAppendResult</strong>，<strong>RecordAppendResult</strong> 会中的字段会作为唤醒 <strong>Sender</strong> 线程的条件。</li>\n</ol>\n<p>下面是 <code>RecordAccumulator.append()</code> 方法的具体实现:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Add a record to the accumulator, return the append result</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    * The append result will contain the future metadata, and flag for whether the appended batch is full or a new batch is created</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> tp The topic/partition to which this record is being sent</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> timestamp The timestamp of the record</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> key The key for the record</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> value The value for the record</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> headers the Headers for the record</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> callback The user-supplied callback to execute when the request is complete</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> maxTimeToBlock The maximum time in milliseconds to block for buffer memory to be available</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RecordAppendResult <span class=\"title\">append</span><span class=\"params\">(TopicPartition tp,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">long</span> timestamp,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">byte</span>[] key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">byte</span>[] value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Header[] headers,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Callback callback,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">long</span> maxTimeToBlock)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// We keep track of the number of appending thread to make sure we do not miss batches in</span></span><br><span class=\"line\">    <span class=\"comment\">// abortIncompleteBatches().</span></span><br><span class=\"line\">    <span class=\"comment\">// 统计向 RecordAccumulator 中追加数据的线程数</span></span><br><span class=\"line\">    appendsInProgress.incrementAndGet();</span><br><span class=\"line\">    ByteBuffer buffer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (headers == <span class=\"keyword\">null</span>) headers = Record.EMPTY_HEADERS;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// check if we have an in-progress batch</span></span><br><span class=\"line\">        <span class=\"comment\">// 步骤1. 查找 TopicPartition 对应的 Deque</span></span><br><span class=\"line\">        Deque&lt;ProducerBatch&gt; dq = getOrCreateDeque(tp);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (dq) &#123; <span class=\"comment\">// 步骤2: 对 Deque 对象加锁</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (closed)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> KafkaException(<span class=\"string\">\"Producer closed while send in progress\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 步骤3: 向 Deque 中最后一个 ProducerBatch 追加 Record</span></span><br><span class=\"line\">            RecordAppendResult appendResult = tryAppend(timestamp, key, value, headers, callback, dq);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (appendResult != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> appendResult; <span class=\"comment\">// 追加成功则直接返回</span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// 步骤4: synchronized 块结束，解锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// we don't have an in-progress record batch try to allocate a new batch</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span> maxUsableMagic = apiVersions.maxUsableProduceMagic();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = Math.max(<span class=\"keyword\">this</span>.batchSize, AbstractRecords.estimateSizeInBytesUpperBound(maxUsableMagic, compression, key, value, headers));</span><br><span class=\"line\">        log.trace(<span class=\"string\">\"Allocating a new &#123;&#125; byte message buffer for topic &#123;&#125; partition &#123;&#125;\"</span>, size, tp.topic(), tp.partition());</span><br><span class=\"line\">        <span class=\"comment\">// 步骤6: 追加失败，从 BufferPool 中申请新空间</span></span><br><span class=\"line\">        buffer = free.allocate(size, maxTimeToBlock);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (dq) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Need to check if producer is closed again after grabbing the dequeue lock.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (closed)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> KafkaException(<span class=\"string\">\"Producer closed while send in progress\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 步骤7: 对 Deque 加锁后，再次调用 tryAppend() 方法尝试追加 Record</span></span><br><span class=\"line\">            RecordAppendResult appendResult = tryAppend(timestamp, key, value, headers, callback, dq);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (appendResult != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 步骤8: 追加成功，则返回</span></span><br><span class=\"line\">                <span class=\"comment\">// Somebody else found us a batch, return the one we waited for! Hopefully this doesn't happen often...</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> appendResult;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            MemoryRecordsBuilder recordsBuilder = recordsBuilder(buffer, maxUsableMagic);</span><br><span class=\"line\">            ProducerBatch batch = <span class=\"keyword\">new</span> ProducerBatch(tp, recordsBuilder, time.milliseconds());</span><br><span class=\"line\">            <span class=\"comment\">// 步骤9: 在新创建的 ProducerBatch 中追加 Record，并将其添加到 batches 集合中</span></span><br><span class=\"line\">            FutureRecordMetadata future = Utils.notNull(batch.tryAppend(timestamp, key, value, headers, callback, time.milliseconds()));</span><br><span class=\"line\"></span><br><span class=\"line\">            dq.addLast(batch);</span><br><span class=\"line\">            <span class=\"comment\">// 步骤10: 将新建的 ProducerBatch 追加到 incomplete 集合</span></span><br><span class=\"line\">            incomplete.add(batch);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Don't deallocate this buffer in the finally block as it's being used in the record batch</span></span><br><span class=\"line\">            buffer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 步骤12: 返回 RecordAppendResult</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RecordAppendResult(future, dq.size() &gt; <span class=\"number\">1</span> || batch.isFull(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"comment\">// 步骤11: synchronized 块结束，解锁</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buffer != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            free.deallocate(buffer);</span><br><span class=\"line\">        appendsInProgress.decrementAndGet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>实例化 <strong>BeanFactoryPostProcessor</strong> 的实现类</li>\n<li>执行 <code>BeanFactoryPostProcessor#postProcessBeanFactory</code> 方法</li>\n<li>实例化 <strong>BeanPostProcessor</strong> 的实现类</li>\n<li>实例化 <strong>InstantiationAwareBeanPostProcessorAdapter</strong> 的实现类</li>\n<li>执行 <code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation</code>方法</li>\n<li>执行 <strong>Bean</strong> 的构造器</li>\n<li>执行 <code>InstantiationAwareBeanPostProcessor#postProcessPropertyValues</code> 方法</li>\n<li>为 <strong>Bean</strong> 注入属性</li>\n<li>调用 <code>BeanNameAware#setBeanName</code> 方法</li>\n<li>调用 <code>BeanFactoryAware#setBeanFactory</code> 方法</li>\n<li>执行 <code>BeanPostProcessor#postProcessBeforeInitialization</code> 方法</li>\n<li>执行 <code>InitializingBean#afterPropertiesSet</code> 方法</li>\n<li>调用<bean>的 <code>init-method</code> 属性指定的方法</bean></li>\n<li>执行 <code>BeanPostProcessor#postProcessAfterInitialization</code> 方法</li>\n<li>执行 <code>InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation</code> 方法</li>\n<li>容器初始化完成，执行正常调用后，下面销毁容器</li>\n<li>执行 <code>DisposableBean#destroy</code> 方法</li>\n<li>调用<bean>的 <code>destory-method</code> 属性指定的方法</bean></li>\n</ol>\n","tags":["kafka","源码"]},{"title":"定制 feign client","url":"/2021-04-25/cust-feign-client/","content":"<h1 id=\"定制-feign-client\"><a href=\"#定制-feign-client\" class=\"headerlink\" title=\"定制 feign client\"></a>定制 feign client</h1><h2 id=\"1-feign-client-configuration\"><a href=\"#1-feign-client-configuration\" class=\"headerlink\" title=\"1. feign client configuration\"></a>1. feign client configuration</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.Client;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Request;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.Decoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.Encoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.optionals.OptionalDecoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.config.SocketConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.http.HttpMessageConverters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.support.ResponseEntityDecoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * spring mvc 框架初始化的 MessageConverter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 子类添加扩展的解码转换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getDecoderConverters() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 子类添加扩展的编码转换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getEncoderConverters()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getDefaultConverters(ObjectFactory&lt;HttpMessageConverters&gt; messageConverters) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(messageConverters.getObject().getConverters());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getDefaultConverters() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getDefaultConverters(<span class=\"keyword\">this</span>.messageConverters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义解码器: 用于 response 响应解码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Decoder <span class=\"title\">feignDecoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HttpMessageConverter&lt;?&gt;&gt; httpMessageConverters = getDecoderConverters();</span><br><span class=\"line\">        List&lt;HttpMessageConverter&lt;?&gt;&gt; converters = getDefaultConverters(<span class=\"keyword\">this</span>.messageConverters);</span><br><span class=\"line\">        converters.addAll(<span class=\"number\">0</span>, httpMessageConverters);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OptionalDecoder(<span class=\"keyword\">new</span> ResponseEntityDecoder(<span class=\"keyword\">new</span> CustDecoder(converters)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义编码器: 用于 request 请求编码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Encoder <span class=\"title\">feignFormEncoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;HttpMessageConverter&lt;?&gt;&gt; httpMessageConverters = getEncoderConverters();</span><br><span class=\"line\">        List&lt;HttpMessageConverter&lt;?&gt;&gt; converters = getDefaultConverters(<span class=\"keyword\">this</span>.messageConverters);</span><br><span class=\"line\">        converters.addAll(<span class=\"number\">0</span>, httpMessageConverters);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CustEncoder(converters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Request.<span class=\"function\">Options <span class=\"title\">options</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Request.Options(<span class=\"number\">3000</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Client <span class=\"title\">client</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApacheHttpClient(getHttpClient());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Logger <span class=\"title\">infoLogFeign</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FeignLogger();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 功能：获取连接</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CloseableHttpClient <span class=\"title\">getHttpClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        PoolingHttpClientConnectionManager connectionManager = <span class=\"keyword\">new</span> PoolingHttpClientConnectionManager();</span><br><span class=\"line\">        CloseableHttpClient httpClient;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxTotalConnection = <span class=\"number\">1000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> defaultMaxPerRoute = <span class=\"number\">20</span>;</span><br><span class=\"line\">        connectionManager.setMaxTotal(maxTotalConnection);</span><br><span class=\"line\">        connectionManager.setDefaultMaxPerRoute(defaultMaxPerRoute);</span><br><span class=\"line\"></span><br><span class=\"line\">        SocketConfig socketConfig = SocketConfig.custom()</span><br><span class=\"line\">                .setTcpNoDelay(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setSoReuseAddress(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .setSoTimeout(<span class=\"number\">3500</span>)</span><br><span class=\"line\">                .setSoLinger(<span class=\"number\">60</span>)</span><br><span class=\"line\">                .setSoKeepAlive(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        connectionManager.setDefaultSocketConfig(socketConfig);</span><br><span class=\"line\">        httpClient = HttpClients.custom().setConnectionManager(connectionManager)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> httpClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在原始 HttpMessageConverter 集合中增加支持的 MediaType, 且只影响配置的 feign client。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> &lt;T extends HttpMessageConverter&gt; <span class=\"function\">T <span class=\"title\">getSupportedMediaTypeConverter</span><span class=\"params\">(Class&lt;T&gt; clazz, MediaType mediaType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            T converter = clazz.newInstance();</span><br><span class=\"line\">            Field field = ReflectUtil.getField(clazz, <span class=\"string\">\"supportedMediaTypes\"</span>);</span><br><span class=\"line\">            field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            List&lt;MediaType&gt; supportedMediaTypes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty(converter.getSupportedMediaTypes())) &#123;</span><br><span class=\"line\">                supportedMediaTypes.addAll(converter.getSupportedMediaTypes());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            supportedMediaTypes.add(mediaType);</span><br><span class=\"line\">            field.set(converter, supportedMediaTypes);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> converter;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-自定义解码器-CustDecoder\"><a href=\"#2-自定义解码器-CustDecoder\" class=\"headerlink\" title=\"2. 自定义解码器: CustDecoder\"></a>2. 自定义解码器: CustDecoder</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.FeignException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Response;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.DecodeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.support.SpringDecoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.client.HttpMessageConverterExtractor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.ParameterizedType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.WildcardType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringDecoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; converters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustDecoder</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.converters = converters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">final</span> Response response, Type type)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException, FeignException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> Class || type <span class=\"keyword\">instanceof</span> ParameterizedType</span><br><span class=\"line\">                || type <span class=\"keyword\">instanceof</span> WildcardType) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span> &#125;)</span><br><span class=\"line\">            HttpMessageConverterExtractor&lt;?&gt; extractor = <span class=\"keyword\">new</span> HttpMessageConverterExtractor(</span><br><span class=\"line\">                    type, converters);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> extractor.extractData(<span class=\"keyword\">new</span> FeignResponseAdapter(response));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DecodeException(</span><br><span class=\"line\">                <span class=\"string\">\"type is not an instance of Class or ParameterizedType: \"</span> + type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignResponseAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClientHttpResponse</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Response response;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FeignResponseAdapter</span><span class=\"params\">(Response response)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.response = response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> HttpStatus <span class=\"title\">getStatusCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpStatus.valueOf(<span class=\"keyword\">this</span>.response.status());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRawStatusCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.response.status();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStatusText</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.response.reason();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.response.body().close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Ignore exception on close...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getBody</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.response.body().asInputStream();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> HttpHeaders <span class=\"title\">getHeaders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FeignUtils.getHttpHeaders(<span class=\"keyword\">this</span>.response.headers());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-自定义编码器-CustEncoder\"><a href=\"#3-自定义编码器-CustEncoder\" class=\"headerlink\" title=\"3. 自定义编码器: CustEncoder\"></a>3. 自定义编码器: CustEncoder</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.RequestTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.codec.EncodeException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.support.SpringEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.ByteArrayHttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringEncoder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; converters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustEncoder</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.converters = converters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(Object requestBody, Type bodyType, RequestTemplate request)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> EncodeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestBody != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; requestType = requestBody.getClass();</span><br><span class=\"line\">            Collection&lt;String&gt; contentTypes = request.headers().get(<span class=\"string\">\"Content-Type\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            MediaType requestContentType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (contentTypes != <span class=\"keyword\">null</span> &amp;&amp; !contentTypes.isEmpty()) &#123;</span><br><span class=\"line\">                String type = contentTypes.iterator().next();</span><br><span class=\"line\">                requestContentType = MediaType.valueOf(type);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HttpMessageConverter&lt;?&gt; messageConverter : <span class=\"keyword\">this</span>.converters) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (messageConverter.canWrite(requestType, requestContentType)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (requestContentType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            log.debug(<span class=\"string\">\"Writing [\"</span> + requestBody + <span class=\"string\">\"] as \\\"\"</span></span><br><span class=\"line\">                                    + requestContentType + <span class=\"string\">\"\\\" using [\"</span></span><br><span class=\"line\">                                    + messageConverter + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            log.debug(<span class=\"string\">\"Writing [\"</span> + requestBody + <span class=\"string\">\"] using [\"</span></span><br><span class=\"line\">                                    + messageConverter + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    FeignOutputMessage outputMessage = <span class=\"keyword\">new</span> FeignOutputMessage(request);</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">                        HttpMessageConverter&lt;Object&gt; copy = (HttpMessageConverter&lt;Object&gt;) messageConverter;</span><br><span class=\"line\">                        copy.write(requestBody, requestContentType, outputMessage);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EncodeException(<span class=\"string\">\"Error converting request body\"</span>, ex);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// clear headers</span></span><br><span class=\"line\">                    request.headers(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// converters can modify headers, so update the request</span></span><br><span class=\"line\">                    <span class=\"comment\">// with the modified headers</span></span><br><span class=\"line\">                    request.headers(FeignUtils.getHeaders(outputMessage.getHeaders()));</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// do not use charset for binary data and protobuf</span></span><br><span class=\"line\">                    Charset charset;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (messageConverter <span class=\"keyword\">instanceof</span> ByteArrayHttpMessageConverter) &#123;</span><br><span class=\"line\">                        charset = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (messageConverter <span class=\"keyword\">instanceof</span> ProtobufHttpMessageConverter &amp;&amp;</span><br><span class=\"line\">                            ProtobufHttpMessageConverter.PROTOBUF.isCompatibleWith(outputMessage.getHeaders().getContentType())) &#123;</span><br><span class=\"line\">                        charset = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        charset = StandardCharsets.UTF_8;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    request.body(outputMessage.getOutputStream().toByteArray(), charset);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String message = <span class=\"string\">\"Could not write request: no suitable HttpMessageConverter \"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"found for request type [\"</span> + requestType.getName() + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (requestContentType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                message += <span class=\"string\">\" and content type [\"</span> + requestContentType + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EncodeException(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignOutputMessage</span> <span class=\"keyword\">implements</span> <span class=\"title\">HttpOutputMessage</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ByteArrayOutputStream outputStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpHeaders httpHeaders;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FeignOutputMessage</span><span class=\"params\">(RequestTemplate request)</span> </span>&#123;</span><br><span class=\"line\">            httpHeaders = FeignUtils.getHttpHeaders(request.headers());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> OutputStream <span class=\"title\">getBody</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.outputStream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> HttpHeaders <span class=\"title\">getHeaders</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.httpHeaders;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ByteArrayOutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.outputStream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","tags":["feign"]},{"title":"messagepack编解码异常","url":"/2023-02-23/messagepack-error/","content":"<h1 id=\"messagepack编解码异常\"><a href=\"#messagepack编解码异常\" class=\"headerlink\" title=\"messagepack编解码异常\"></a>messagepack编解码异常</h1><blockquote>\n<p><a href=\"https://msgpack.org/\" target=\"_blank\" rel=\"noopener\">messagepack官网</a></p>\n</blockquote>\n<h2 id=\"一、使用注意事项\"><a href=\"#一、使用注意事项\" class=\"headerlink\" title=\"一、使用注意事项\"></a>一、使用注意事项</h2><p><code>MessagePack</code> 实例化时需要作为常量使用，不能重复创建新的对象，原因和 <code>json</code> 序列化工具类似，<code>MessagePack</code> 序列化和反序列化时需要加载类模板信息，因此为了提高效率，内部缓存了类模板缓存，如果重复实例化 <code>MessagePack</code> 对象时，会使类模板重复加载，导致 <code>JVM</code> 元空间中类模板重复加载，导致 <code>OOM</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MessagePack messagePack = <span class=\"keyword\">new</span> MessagePack();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、反序列化异常\"><a href=\"#二、反序列化异常\" class=\"headerlink\" title=\"二、反序列化异常\"></a>二、反序列化异常</h2><p><code>MessagePack</code> 序列化/反序列化对象时，没有通过对象的 <code>field</code> 属性来，而是通过类中字段定义的顺序来序列化(这样可以节省序列化开销)。<br>因此，常见反序列化异常时，首先需要检查类定义是否一致。</p>\n<p>下面是常见场景下遇到的一个异常场景。错误提示如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">o.msgpack.template.builder.BuildContext  ERROR <span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">22</span> <span class=\"number\">11</span>:<span class=\"number\">28</span>:<span class=\"number\">59.156</span> : traceId: <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                appVersion:<span class=\"number\">20230131221726</span>, message: builder: </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!$<span class=\"number\">3</span> &amp;&amp; $<span class=\"number\">1</span>.trySkipNil()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  com.demo.ws.protocol.header.FixedHeader _$$_t;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($<span class=\"number\">2</span> == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    _$$_t = <span class=\"keyword\">new</span> com.demo.ws.protocol.header.FixedHeader();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    _$$_t = (com.demo.ws.protocol.header.FixedHeader) $<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayBegin();</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"messageType\"</span>, templates[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isDup\"</span>, templates[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"qosLevel\"</span>, templates[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isRetain\"</span>, templates[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayEnd();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _$$_t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">io.netty.channel.DefaultChannelPipeline  WARN  <span class=\"number\">2023</span>-<span class=\"number\">02</span>-<span class=\"number\">22</span> <span class=\"number\">11</span>:<span class=\"number\">28</span>:<span class=\"number\">59.162</span> : traceId: <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                appVersion:<span class=\"number\">20230131221726</span>, message: <span class=\"function\">An <span class=\"title\">exceptionCaught</span><span class=\"params\">()</span> event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.</span></span><br><span class=\"line\"><span class=\"function\">io.netty.handler.codec.DecoderException: org.msgpack.MessageTypeException: org.msgpack.template.builder.TemplateBuildException: Cannot compile: </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!$<span class=\"number\">3</span> &amp;&amp; $<span class=\"number\">1</span>.trySkipNil()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  com.demo.ws.protocol.header.FixedHeader _$$_t;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($<span class=\"number\">2</span> == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    _$$_t = <span class=\"keyword\">new</span> com.demo.ws.protocol.header.FixedHeader();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    _$$_t = (com.demo.ws.protocol.header.FixedHeader) $<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayBegin();</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"messageType\"</span>, templates[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isDup\"</span>, templates[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"qosLevel\"</span>, templates[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isRetain\"</span>, templates[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayEnd();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _$$_t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:<span class=\"number\">98</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:<span class=\"number\">102</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:<span class=\"number\">266</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:<span class=\"number\">102</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:<span class=\"number\">86</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.http.websocketx.Utf8FrameValidator.channelRead(Utf8FrameValidator.java:<span class=\"number\">77</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:<span class=\"number\">293</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:<span class=\"number\">267</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">\tat io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:<span class=\"number\">1069</span>)</span><br><span class=\"line\">\tat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:<span class=\"number\">902</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:<span class=\"number\">411</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:<span class=\"number\">248</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">351</span>)</span><br><span class=\"line\">\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:<span class=\"number\">1334</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">373</span>)</span><br><span class=\"line\">\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:<span class=\"number\">359</span>)</span><br><span class=\"line\">\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:<span class=\"number\">926</span>)</span><br><span class=\"line\">\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:<span class=\"number\">129</span>)</span><br><span class=\"line\">\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:<span class=\"number\">651</span>)</span><br><span class=\"line\">\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:<span class=\"number\">574</span>)</span><br><span class=\"line\">\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:<span class=\"number\">488</span>)</span><br><span class=\"line\">\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:<span class=\"number\">450</span>)</span><br><span class=\"line\">\tat io.netty.util.concurrent.SingleThreadEventExecutor$<span class=\"number\">5</span>.run(SingleThreadEventExecutor.java:<span class=\"number\">873</span>)</span><br><span class=\"line\">\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:<span class=\"number\">144</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\">Caused by: org.msgpack.MessageTypeException: org.msgpack.template.builder.TemplateBuildException: Cannot compile: </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!$<span class=\"number\">3</span> &amp;&amp; $<span class=\"number\">1</span>.trySkipNil()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  com.demo.ws.protocol.header.FixedHeader _$$_t;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($<span class=\"number\">2</span> == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    _$$_t = <span class=\"keyword\">new</span> com.demo.ws.protocol.header.FixedHeader();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    _$$_t = (com.demo.ws.protocol.header.FixedHeader) $<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayBegin();</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"messageType\"</span>, templates[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isDup\"</span>, templates[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"qosLevel\"</span>, templates[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isRetain\"</span>, templates[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayEnd();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _$$_t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tat org.msgpack.template.TemplateRegistry.buildAndRegister(TemplateRegistry.java:<span class=\"number\">575</span>)</span><br><span class=\"line\">\tat org.msgpack.template.TemplateRegistry.lookupAfterBuilding(TemplateRegistry.java:<span class=\"number\">472</span>)</span><br><span class=\"line\">\tat org.msgpack.template.TemplateRegistry.lookup(TemplateRegistry.java:<span class=\"number\">251</span>)</span><br><span class=\"line\">\tat org.msgpack.MessagePack.read(MessagePack.java:<span class=\"number\">370</span>)</span><br><span class=\"line\">\tat com.demo.ws.decoder.Qmai20Protocol.decode(Qmai20Protocol.java:<span class=\"number\">34</span>)</span><br><span class=\"line\">\tat com.demo.ws.decoder.BinaryMessageDecoder.decode(BinaryMessageDecoder.java:<span class=\"number\">25</span>)</span><br><span class=\"line\">\tat com.demo.ws.decoder.BinaryMessageDecoder.decode(BinaryMessageDecoder.java:<span class=\"number\">19</span>)</span><br><span class=\"line\">\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:<span class=\"number\">88</span>)</span><br><span class=\"line\">\t... <span class=\"number\">44</span> common frames omitted</span><br><span class=\"line\">Caused by: org.msgpack.template.builder.TemplateBuildException: Cannot compile: </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!$<span class=\"number\">3</span> &amp;&amp; $<span class=\"number\">1</span>.trySkipNil()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  com.demo.ws.protocol.header.FixedHeader _$$_t;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($<span class=\"number\">2</span> == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    _$$_t = <span class=\"keyword\">new</span> com.demo.ws.protocol.header.FixedHeader();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    _$$_t = (com.demo.ws.protocol.header.FixedHeader) $<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayBegin();</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"messageType\"</span>, templates[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isDup\"</span>, templates[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"qosLevel\"</span>, templates[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    org.msgpack.template.builder.DefaultBuildContext.readPrivateField($<span class=\"number\">1</span>, _$$_t, com.demo.ws.protocol.header.FixedHeader.class, <span class=\"string\">\"isRetain\"</span>, templates[<span class=\"number\">3</span>]);</span><br><span class=\"line\">  $<span class=\"number\">1</span>.readArrayEnd();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _$$_t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tat org.msgpack.template.builder.BuildContext.build(BuildContext.java:<span class=\"number\">73</span>)</span><br><span class=\"line\">\tat org.msgpack.template.builder.DefaultBuildContext.buildTemplate(DefaultBuildContext.java:<span class=\"number\">56</span>)</span><br><span class=\"line\">\tat org.msgpack.template.builder.JavassistTemplateBuilder.buildTemplate(JavassistTemplateBuilder.java:<span class=\"number\">119</span>)</span><br><span class=\"line\">\tat org.msgpack.template.builder.AbstractTemplateBuilder.buildTemplate(AbstractTemplateBuilder.java:<span class=\"number\">61</span>)</span><br><span class=\"line\">\tat org.msgpack.template.TemplateRegistry.buildAndRegister(TemplateRegistry.java:<span class=\"number\">562</span>)</span><br><span class=\"line\">\t... <span class=\"number\">51</span> common frames omitted</span><br><span class=\"line\">Caused by: javassist.CannotCompileException: by java.lang.LinkageError: loader (instance of  org/springframework/boot/loader/LaunchedURLClassLoader): attempted  duplicate class definition for name: \"com/zm/natives/biz/service/ws/protocol/header/FixedHeader_$$_Template_2027735994_0\"</span><br><span class=\"line\">\tat javassist.ClassPool.toClass(ClassPool.java:<span class=\"number\">1099</span>)</span><br><span class=\"line\">\tat javassist.CtClass.toClass(CtClass.java:<span class=\"number\">1265</span>)</span><br><span class=\"line\">\tat org.msgpack.template.builder.BuildContext.createClass(BuildContext.java:<span class=\"number\">154</span>)</span><br><span class=\"line\">\tat org.msgpack.template.builder.BuildContext.build(BuildContext.java:<span class=\"number\">68</span>)</span><br><span class=\"line\">\t... <span class=\"number\">55</span> common frames omitted</span><br><span class=\"line\">Caused by: java.lang.LinkageError: loader (instance of  org/springframework/boot/loader/LaunchedURLClassLoader): attempted  duplicate class definition for name: \"com/zm/natives/biz/service/ws/protocol/header/FixedHeader_$$_Template_2027735994_0\"</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:<span class=\"number\">763</span>)</span><br><span class=\"line\">\tat sun.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">498</span>)</span><br><span class=\"line\">\tat javassist.ClassPool.toClass2(ClassPool.java:<span class=\"number\">1112</span>)</span><br><span class=\"line\">\tat javassist.ClassPool.toClass(ClassPool.java:<span class=\"number\">1093</span>)</span><br></pre></td></tr></table></figure>\n\n<p>错误原因关键字在于:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Caused by: javassist.CannotCompileException: by java.lang.LinkageError: loader (instance of  org/springframework/boot/loader/LaunchedURLClassLoader): attempted  duplicate <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">definition</span> <span class=\"title\">for</span> <span class=\"title\">name</span></span></span><br></pre></td></tr></table></figure>\n\n<p>提示类模板定义重复了，原因是项目中引用了<code>代码热部署模块</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将<code>代码热部署模块</code>注释即可。</p>\n","tags":["messagepack"]},{"title":"Jvm性能监控与故障处理","url":"/2023-04-20/jvm-analyzer/","content":"<h1 id=\"Jvm性能监控与故障处理\"><a href=\"#Jvm性能监控与故障处理\" class=\"headerlink\" title=\"Jvm性能监控与故障处理\"></a>Jvm性能监控与故障处理</h1><h3 id=\"写在开头\"><a href=\"#写在开头\" class=\"headerlink\" title=\"写在开头\"></a>写在开头</h3><blockquote>\n<p>给一个系统定位问题时，理论知识、经验是关键基础，数据是依据，工具是运用知识处理数据的手 段。 这里说的数据包括:运行日志、异常堆栈、GC日志、线程快照文件(threaddump/javacore文 件)、堆转储快照(heapdump/hprof文件)等。 工具分两大类，一类是命令行工具，一类是可视化工 具。命令行工具是运行期定位线上问题的首选工具。</p>\n</blockquote>\n<h1 id=\"一、命令行工具\"><a href=\"#一、命令行工具\" class=\"headerlink\" title=\"一、命令行工具\"></a>一、命令行工具</h1><h2 id=\"1、Sun-Jdk监控和故障处理工具\"><a href=\"#1、Sun-Jdk监控和故障处理工具\" class=\"headerlink\" title=\"1、Sun Jdk监控和故障处理工具:\"></a>1、Sun Jdk监控和故障处理工具:</h2><table>\n<thead>\n<tr>\n<th>命令名称</th>\n<th>全称</th>\n<th>主要用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>jps</td>\n<td>jvm process status tool</td>\n<td>显示指定系统内所有的hotspot虚拟机进程</td>\n</tr>\n<tr>\n<td>jstat</td>\n<td>jvm statistics monitoring tool</td>\n<td>用于收集hotspot虚拟机各方面的运行数据</td>\n</tr>\n<tr>\n<td>jinfo</td>\n<td>configuration info for java</td>\n<td>显示虚拟机配置信息</td>\n</tr>\n<tr>\n<td>jmap</td>\n<td>memory map for java</td>\n<td>生成虚拟机的内存转储快照(heapdump文件)</td>\n</tr>\n<tr>\n<td>jhat</td>\n<td>jvm heap dump browser</td>\n<td>用于分析heapmap文件，它会建立一个http/html服务器让用户可以 析结果</td>\n</tr>\n<tr>\n<td>jstack</td>\n<td>stack trace for java</td>\n<td>显示虚拟机的线程快照</td>\n</tr>\n</tbody></table>\n<h2 id=\"2、常用用法\"><a href=\"#2、常用用法\" class=\"headerlink\" title=\"2、常用用法\"></a>2、常用用法</h2><ul>\n<li>用 <code>ps</code>、<code>jps</code> 找出线程号 如果怀疑是死循环、线程类的问题，</li>\n<li>使用 <code>jstack -l</code> 来查看 如果是jvm内存问题，</li>\n<li>使用 <code>jstat</code> 来进行查看，比较常用的是 <code>jstat -gcutil</code></li>\n<li>如果线上问题通过命令行工具不能定位， 可以使用 <code>jmap</code> 导出快 照，使用其他可视化工具进行分析，或者保留一台机器做现场。 注: <code>jmap</code> 可能会 <code>stop the world</code>，暂停 <code>JVM</code>，慎用。</li>\n</ul>\n<h2 id=\"3、命令详解\"><a href=\"#3、命令详解\" class=\"headerlink\" title=\"3、命令详解\"></a>3、命令详解</h2><h3 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a>jps</h3><p>一般我们想要防止程序启动两次，或者判断某java进程是否存活，都会采用该命令获取系统当前运行的所 有java进程，然后根据进程名判断。当然也可以以此获得对应进程的id(对于本地虚拟机进程来说， LVMID和PID是一致的(用ps命令也可以拿到))，然后kill他来结束程序。其用法如下:<br>语法结构: jsp [options] [hostid] 参数: -q 只输出ID -l 显示虚拟机执行的主类 -m 显示传给main的参数 -v 输出启动的JVM参数</p>\n<h3 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a>jstack</h3><p>是和线程栈相关的，而栈里边存的则是各个线程的私有数据(局部变量表、方法出口、操作数栈、对象 引用等)，因此该命令就是用来生成当前虚拟机的线程快照的(threaddump，可用来分析虚拟机某线程 长时间停顿的原因，如死锁、死循环、资源请求时间过长等)。<br>语法结构: jstack [ option ] pid 参数: -F当’jstack [-l] pid’没有相应的时候强制打印栈信息 -l长列表. 打印 关于锁的额外的附加信息,例如属于java.util.concurrent的ownable synchronizers列表. -m打印java和native c/c++框架的所有栈信息. -h | -help打印帮助信息</p>\n<p><strong>使用示例</strong><br>jstack可以定位到线程堆栈，根据堆栈信息我们可以定位到具体代码，所以它在JVM性能调优中使用得非常多。下面我们来一个实例找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有 ps、top、printf、jstack、grep。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一步:找出该进程内最耗费CPU的线程，可以使用任意一个</span></span><br><span class=\"line\">ps -Lfp pid</span><br><span class=\"line\">top -Hp pid</span><br><span class=\"line\"><span class=\"comment\"># TIME列就是各个Java线程耗费的CPU时间，CPU时间最长的是线程ID为21742的线程。输出线程16进制结果</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%x\\n\"</span> 29105</span><br><span class=\"line\"><span class=\"comment\"># 得到29105的十六进制值为71b1，下面会用到。 下一步使用jstack，它用来输出(dump出)进程29105的当前的堆栈信息，然后根据线程ID的十六进制值grep。</span></span><br><span class=\"line\">jstack pid | grep -A5 0x71b1</span><br></pre></td></tr></table></figure>\n\n<p><strong>其他</strong><br><code>jstack -l pid</code><br><img src=\"/2023-04-20/jvm-analyzer/Snipaste_2023-04-20_16-47-49.png\" alt=\"jstack\"><br>我们一般查看用户进程，每个用户进程包括三部分内容:</p>\n<ul>\n<li>线程的状态</li>\n<li>线程的调用栈</li>\n<li>线程当前锁住的资源</li>\n</ul>\n<p><strong>一些小技巧</strong>:</p>\n<ul>\n<li>死循环: 可多次执行jstack，如果某个用户进程一直runnable，说明这个用户进程一直在运 行，考虑是不是有死循环</li>\n<li>死锁: 存在互相等待，查看锁住的资源。 jstack可以直接检测</li>\n</ul>\n<p><strong>线程状态</strong>:</p>\n<ul>\n<li>NEW: 至今尚未启动的线程的状态(jstack中不会出现)</li>\n<li>RUNNABLE: 可运行线程的线程状态。处于可运行状态的某一线程正在 Java 虚拟机中运行，但它可 能正在等待操作系统中的其他资源，比如处理器。</li>\n<li>BLOCKED: 受阻塞并且正在等待监视器锁的某一线程的线程状态。(比如synchronized (lock) {}而 lock被其他线程持有时，当前线程就会进入BLOCKED状态)</li>\n<li>WAITING 包括3种情况: <ul>\n<li>不带超时值的 Object.wait</li>\n<li>不带超时值的 Thread.join</li>\n<li>LockSupport.park </li>\n</ul>\n</li>\n<li>TIMED_WAITING 包括5种情况:<ul>\n<li>Thread.sleep</li>\n<li>带有超时值的 Object.wait </li>\n<li>带有超时值的 Thread.join </li>\n<li>LockSupport.parkNanos </li>\n<li>LockSupport.parkUntil</li>\n</ul>\n</li>\n<li>TERMINATED 线程已终止(jstack中不会出现)</li>\n</ul>\n<h3 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a>jstat</h3><p>jstat用于监控虚拟机各种运行状态信息，可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、 JIT编译等运行数据，用于定位内存泄露、FullGC等，推荐在线定位GC问题的首选工具。<br><strong>语法结构</strong>: jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]] 参数: Options — 选项，我 们一般使用 -gcutil 查看gc情况 vmid — VM的进程号，即当前运行的java进程号 interval– 间隔时间，单 位为秒或者毫秒 count — 打印次数，如果缺省则打印无数次 S0 — Heap上的 Survivor space 0 区已使用 空间的百分比</count></interval></vmid></lines></option></p>\n<h4 id=\"jstat-gc-pid-200-10\"><a href=\"#jstat-gc-pid-200-10\" class=\"headerlink\" title=\"jstat -gc pid 200 10\"></a><code>jstat -gc pid 200 10</code></h4><p><img src=\"/2023-04-20/jvm-analyzer/jstat_gc.png\" alt=\"jstat\"><br>其中各列的具体含义为:</p>\n<ul>\n<li>S0C: 年轻代S0区的容量 S1C:年轻代S1区的容量 S0U:年轻代S0区目前已使用的空间 S1U:年 轻代S1区已使用的容量 EC: 年轻代Eden的容量 EU:年轻代Eden已使用的容量 OC:年老代的容量 OU: 年老代已使用的容量</li>\n<li>PC:Perm的容量 PU:Perm已使用的容量</li>\n<li>YGC: 从启动到现在YoungGC的次数 YGCT:YoungGC所用的时间(s) FGC:从启动到现在FullGC的次数 FGCT: 从启动到现在FullGC所用的时间(s)</li>\n<li>GCT: 从启动到现在GC的总时间</li>\n</ul>\n<h4 id=\"jstat-gccapacity-pid\"><a href=\"#jstat-gccapacity-pid\" class=\"headerlink\" title=\"jstat -gccapacity pid\"></a><code>jstat -gccapacity pid</code></h4><p>查看堆各个代使用的最大最小空间</p>\n<h4 id=\"jstat-gcutil-pid\"><a href=\"#jstat-gcutil-pid\" class=\"headerlink\" title=\"jstat -gcutil pid\"></a><code>jstat -gcutil pid</code></h4><p>查看堆各个代已使用空间占总空间的百分比，最常用的命令<br><img src=\"/2023-04-20/jvm-analyzer/jstat_gcutil.png\" alt=\"jstat\"></p>\n<h4 id=\"监控各个代的情况\"><a href=\"#监控各个代的情况\" class=\"headerlink\" title=\"监控各个代的情况\"></a>监控各个代的情况</h4><p><code>jstat -gcnew</code> 新生代的GC情况<br><code>jstat -gcnewcapacity</code> 新生代的最大、最小空间 jstat -gcold 老年代的GC情况<br><code>jstat -gcoldcapacity</code> 老生代的最大、最小空间 jsata -gcpermcapacity 永久带的最大、最小空间</p>\n<h3 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a>jinfo</h3><p>这个命令可以实时查看调整JVM的运行参数</p>\n<h3 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a>jmap</h3><p>jmap用于生成堆转储快照(heapdump，用于JVM内存状态分析，是故障处理或调优的关键参考数<br>据)，还可以查询finalize队列，java堆和永久代详细信息。<br><strong>语法结构</strong>: jmap [ option ] pid 参数: -dump:[live,]format=b,file=<filename> 使用hprof二进制形式,输 出jvm的heap内容到文件=. live子选项是可选的，假如指定live选项,那么只输出活的对象到文件. - finalizerinfo 打印正等候回收的对象的信息. -heap 打印heap的概要信息，GC使用的算法，heap的配置及 wise heap的使用情况. -histo[:live] 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头 会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. -clstats 打印classload和jvm heap长久层的信 息. 包含每个classloader的名字,活泼性,地址,父classloader和加载的class数量. 另外,内部String的数量和占 用内存数也会打印出来. -F 强迫.在pid没有响应的时候使用-dump或者-histo参数. 在这个模式下,live子参 数无效. -h | -help 打印辅助信息 -J 传递参数给jmap启动的jvm.</filename></p>\n<h4 id=\"jmap-permstat-pid\"><a href=\"#jmap-permstat-pid\" class=\"headerlink\" title=\"jmap -permstat pid\"></a><code>jmap -permstat pid</code></h4><p>打印进程的类加载器和类加载器加载的持久代对象信息，输出:类加载器名称、对象是否存活(不可靠)、对象地址、父类加载器、已加载的类大小等信息</p>\n<h4 id=\"jmap-heap-pid\"><a href=\"#jmap-heap-pid\" class=\"headerlink\" title=\"jmap -heap pid\"></a><code>jmap -heap pid</code></h4><p>查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况</p>\n<h4 id=\"jmap-histo-live-pid\"><a href=\"#jmap-histo-live-pid\" class=\"headerlink\" title=\"jmap -histo[:live] pid\"></a><code>jmap -histo[:live] pid</code></h4><p>查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象</p>\n<h4 id=\"jmap-dump-format-b-file-dumpFileName-pid\"><a href=\"#jmap-dump-format-b-file-dumpFileName-pid\" class=\"headerlink\" title=\"jmap -dump:format=b,file=dumpFileName pid\"></a><code>jmap -dump:format=b,file=dumpFileName pid</code></h4><p>用jmap把进程内存使用情况dump到文件中，再用jhat或者<code>mat</code>分析查看</p>\n<h2 id=\"二、可视化工具\"><a href=\"#二、可视化工具\" class=\"headerlink\" title=\"二、可视化工具\"></a>二、可视化工具</h2><h3 id=\"MAT\"><a href=\"#MAT\" class=\"headerlink\" title=\"MAT\"></a>MAT</h3><h3 id=\"线程栈分析\"><a href=\"#线程栈分析\" class=\"headerlink\" title=\"线程栈分析\"></a>线程栈分析</h3><ol>\n<li>在线方式:<a href=\"http://www.fastthread.io\" target=\"_blank\" rel=\"noopener\">线程栈分析工具网站</a></li>\n<li>本地 <code>jca</code> 可视化工具分析:<a href=\"/download/2023/2023-04-20-jvm-analyzer/jca4614.jar\">jca</a><br>下面介绍本地可视化工具操作步骤:<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 运行服务器上执行:输出线程栈到文件中(这里不管是本地方案，还是在线方案都需要先转储服务栈信息)</span></span><br><span class=\"line\">jstack 进程号 &gt; 进程号.txt </span><br><span class=\"line\"><span class=\"comment\"># 2. 在本地 jca4614.jar 目录下执行</span></span><br><span class=\"line\">java -jar jca4614.jar</span><br><span class=\"line\"><span class=\"comment\"># 3. 将线程栈文件拖拽到可视化工具中进行分析</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>分析结果如下图所示:<br><img src=\"/2023-04-20/jvm-analyzer/jac.png\" alt=\"jac\"></p>\n<h4 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h4><ul>\n<li><code>Histogram</code>:列出内存中的对象，对象的个数以及大小(单位是字节)</li>\n<li><code>Dominator Tree</code>:列出最大的对象以及其依赖存活的Object (大小是以Retained Heap为标准排序的)</li>\n<li><code>Top Consumers</code>: 通过图形列出最大的object</li>\n<li><code>Thread OvewView</code>:可以查看这个应用的Thread信息</li>\n<li><code>Group</code>: 在Histogram和Domiantor Tree界面，可以选择将结果用另一种Group的方式显示(默认是Group by Object)，切换到Group by package，可以更好地查看具体是哪个包里的类占用内存大，也很容易定 位到自己的应用程</li>\n<li><code>Path to GC Root</code>: 在Histogram或者Domiantor Tree的某一个条目上，右键可以查看其GC Root Path,可以 查看对象的各类引用关系</li>\n</ul>\n<p>其中前两项 <code>Histogram</code> 和 <code>Dominator Tree</code> 是最常用的，注意若dump文件过大时，mat软件打开有可能会堆栈溢出，此时需要修改 <code>mat.app/Contents/Eclipse</code> 文件夹中有一个 <code>MemoryAnalyzer.ini</code> ,修改-Xmx=xxg即可。</p>\n<h4 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h4><p><strong><code>histogram</code> 展示</strong><br><img src=\"/2023-04-20/jvm-analyzer/histogram.png\" alt=\"histogram\"></p>\n<p><strong>top consumer展示</strong><br><img src=\"/2023-04-20/jvm-analyzer/top_consumer.png\" alt=\"top_consumer\"></p>\n<p><strong>group功能展示</strong><br><img src=\"/2023-04-20/jvm-analyzer/group.png\" alt=\"group\"></p>\n<h2 id=\"三、其他辅助工具\"><a href=\"#三、其他辅助工具\" class=\"headerlink\" title=\"三、其他辅助工具\"></a>三、其他辅助工具</h2><h3 id=\"3-1-jstack辅助工具\"><a href=\"#3-1-jstack辅助工具\" class=\"headerlink\" title=\"3.1 jstack辅助工具\"></a>3.1 jstack辅助工具</h3><p><strong>简介</strong>:使用jstack命令定位线程堆栈信息时，需要找到最耗费cpu资源的线程，top命令开启线程显示模式、 按CPU使用率排序、记下Java进程里CPU高的线程号;手动转成十六进制(可以用printf %x 1234); jstack，grep十六进制的线程id，找到线程栈。查问题时，会要多次这样操作，太繁琐。<br>此时就可以使用show_busy_java_threads.sh脚本，它功能是，打印出在运行的Java进程中，消耗CPU 最多的线程栈(缺省是5个线程)。此脚本github地址为: <a href=\"https://github.com/oldratlee/useful-scripts/blob/dev-2.x/docs/java.md\" target=\"_blank\" rel=\"noopener\">https://github.com/oldratlee/useful-scripts/blob/dev-2.x/docs/java.md</a></p>\n<p><strong>用法</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh show-busy-java-threads.sh</span><br><span class=\"line\">sh show-busy-java-threads.sh -c &lt;要显示的线程栈数&gt;</span><br><span class=\"line\">sh show-busy-java-threads.sh -c &lt;要显示的线程栈数&gt; -p &lt;指定的Java Process&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023-04-20/jvm-analyzer/show_busy_java_threads.png\" alt=\"show_busy_java_threads\"></p>\n<h3 id=\"3-2-gc日志分析工具\"><a href=\"#3-2-gc日志分析工具\" class=\"headerlink\" title=\"3.2 gc日志分析工具\"></a>3.2 gc日志分析工具</h3><p><strong>简介</strong>: gc日志辅助分析工具:<a href=\"http://gceasy.io/\" target=\"_blank\" rel=\"noopener\">http://gceasy.io/</a><br><strong>用法</strong>: 将下载的gc日志打压成压缩包，如zip gc.zip iflight-policyprice-service.gc.log，后进行上传分析。<br>分析结果展示:<br><img src=\"/2023-04-20/jvm-analyzer/gceasy.png\" alt=\"gceasy\"></p>\n","tags":["java","jvm"]},{"title":"MAT 使用手册","url":"/2023-04-20/mat/","content":"<h1 id=\"MAT-使用手册\"><a href=\"#MAT-使用手册\" class=\"headerlink\" title=\"MAT 使用手册\"></a>MAT 使用手册</h1><blockquote>\n<p>除了通过软件分析，也可以通过在线网站进行分析，<a href=\"http://heaphero.io\" target=\"_blank\" rel=\"noopener\">在线内存快照分析</a><br><strong>简介</strong>: MAT(Memory Analyzer Tool)，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的JAVA heap 分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。使用内存分析工具从众多的对象中进行分析，快 速的计算出在内存中对象的占用大小，看看是谁阻止了垃圾收集器的回收工作，并可以通过报表直观的查看 到可能造成这种结果的对象。</p>\n</blockquote>\n<h2 id=\"视图-amp-功能\"><a href=\"#视图-amp-功能\" class=\"headerlink\" title=\"视图 &amp; 功能\"></a>视图 &amp; 功能</h2><h3 id=\"1、Overview\"><a href=\"#1、Overview\" class=\"headerlink\" title=\"1、Overview\"></a>1、Overview</h3><p><img src=\"/2023-04-20/mat/overview.jpeg\" alt=\"overview\"><br>通过 <strong>File &gt; Open Heap Dump…</strong> 打开dump文件，最先展示就是Overview概述界面，可以对Heap Dump有一个大致的了解，并提供了一些视图、报告的入口，这些视图、报告都对分析Heap Dump很有帮助，后续会介绍。</p>\n<p>鼠标移动到饼图某个区域上方，在左侧会看到对象的详细信息，如左上方的 <strong>Inspector</strong> 展示了如：对象hashcode、类名、包名、Class类对象、父类、类加载器、shallow size、retained size、GC root类型。左下方展示了对象的一些属性信息、类层级信息。</p>\n<h3 id=\"2、Histogram视图\"><a href=\"#2、Histogram视图\" class=\"headerlink\" title=\"2、Histogram视图\"></a>2、Histogram视图</h3><p>以下方式可以打开Histogram柱状图：</p>\n<ol>\n<li>点击Overview页面Actions区域内的“Histogram视图”链接<br><img src=\"/2023-04-20/mat/link_1_histogram.jpeg\" alt=\"link_1_histogram\"></li>\n<li>点击工具栏的“histogram按钮”<br><img src=\"/2023-04-20/mat/link_2_histogram.jpeg\" alt=\"link_2_histogram\"></li>\n</ol>\n<p><strong>Histogram视图：</strong><br><img src=\"/2023-04-20/mat/histogram.jpeg\" alt=\"histogram\"></p>\n<p>该视图以Class类的维度展示每个Class类的实例存在的个数、 占用的 [Shallow内存] 和 [Retained内存] 大小，可以分别排序显示。</p>\n<p>从Histogram视图可以看出，哪个Class类的对象实例数量比较多，以及占用的内存比较大，Shallow Heap与Retained Heap的区别会在后面的概念介绍中说明。</p>\n<p>不过，多数情况下，在Histogram视图看到实例对象数量比较多的类都是一些基础类型，如char[]（因为其构成了String）、String、byte[]，所以仅从这些是无法判断出具体导致内存泄露的类或者方法的，可以使用 List objects 或 Merge Shortest Paths to GC roots 等功能继续钻取数据。如果Histogram视图展示的数量多的实例对象不是基础类型，是有嫌疑的某个类，如项目代码中的bean类型，那么就要重点关注了。</p>\n<h3 id=\"3、Dominator-Tree（支配树）视图\"><a href=\"#3、Dominator-Tree（支配树）视图\" class=\"headerlink\" title=\"3、Dominator Tree（支配树）视图\"></a>3、Dominator Tree（支配树）视图</h3><p><strong>以下方式可以打开Dominator Tree视图：</strong></p>\n<ol>\n<li><p>点击Overview页面Actions区域内的“Dominator Tree视图”链接<br><img src=\"/2023-04-20/mat/link_1_dominator_tree.jpeg\" alt=\"link_1_dominator_tree\"></p>\n</li>\n<li><p>点击工具栏的“Dominator Tree按钮” ，为整个堆打开一个支配树视图<br><img src=\"/2023-04-20/mat/link_2_dominator_tree.jpeg\" alt=\"link_2_dominator_tree\"></p>\n</li>\n</ol>\n<p><strong>Dominator Tree（支配树）视图：</strong><br><img src=\"/2023-04-20/mat/dominator_tree.jpeg\" alt=\"dominator_tree\"></p>\n<p>该视图以实例对象的维度展示当前堆内存中Retained Heap占用最大的对象，以及依赖这些对象存活的对象的树状结构</p>\n<p>视图中展示了实例对象名、Shallow Heap大小、Retained Heap大小、以及当前对象的Retained Heap在整个堆中的占比</p>\n<p>点开Dominator Tree实例对象左侧的“+”，会展示出下一层（next level），当所有引用了当前实例对象的引用都被清除后，下一层列出的objects就会被垃圾回收</p>\n<p>这也阐明了“支配”的含义：父节点的回收会导致子节点也被回收，即因为父节点的存在使得子节点存活</p>\n<p>Dominator Tree支配树可以很方便的找出占用Retained Heap内存最多的几个对象，并表示出某些objects的是因为哪些objects的原因而存活，在之后的 <strong>Dominator Tree</strong>概念 部分会对支配树做更详细的说明和举例</p>\n<h3 id=\"4、Group分组功能\"><a href=\"#4、Group分组功能\" class=\"headerlink\" title=\"4、Group分组功能\"></a>4、Group分组功能</h3><p>使用Group分组功能的方法是，在 Histogram视图 和 Domiantor Tree视图时，点击工具栏的 <strong>Group result by…</strong><br><img src=\"/2023-04-20/mat/group.jpeg\" alt=\"group\"></p>\n<p>可以选择以另一种分组方式显示（默认是No Grouping(objects)，即以对象维度分组）</p>\n<p>例如在Histogram视图 或 Dominator Tree视图，选择Group by package，可以更好地查看具体是哪个包里的类占用内存大，也很容易定位到自己的应用程序</p>\n<h3 id=\"5、Thread-Overview\"><a href=\"#5、Thread-Overview\" class=\"headerlink\" title=\"5、Thread Overview\"></a>5、Thread Overview</h3><p><strong>Thread视图的入口，在工具栏上：</strong><br><img src=\"/2023-04-20/mat/link_1_thread_overview.jpeg\" alt=\"link_1_thread_overview\"></p>\n<p><strong>Thread Overview：</strong><br><img src=\"/2023-04-20/mat/thread_overview.jpeg\" alt=\"thread_overview\"></p>\n<p>在Thread Overview视图可以看到：线程对象/线程栈信息、线程名、Shallow Heap、Retained Heap、类加载器、是否Daemon线程等信息</p>\n<p>在分析内存Dump的MAT中还可以看到线程栈信息，这本身就是一个强大的功能，类似于jstack命令的效果</p>\n<p>而且还能结合内存Dump分析，看到线程栈帧中的本地变量，在左下方的对象属性区域还能看到本地变量的属性，真的很方便</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThreadOverview</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str1 = <span class=\"string\">\"str1\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str2 = <span class=\"string\">\"str2\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestThreadOverview test = <span class=\"keyword\">new</span> TestThreadOverview();</span><br><span class=\"line\">         </span><br><span class=\"line\">        String local_str = <span class=\"string\">\"local_str\"</span>;</span><br><span class=\"line\">         </span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面代码的Heap Dump分析中，可以看到线程调用栈的信息，以及main线程的 本地变量TestThreadOverview 和 字符串local_str 的信息<br><img src=\"/2023-04-20/mat/thread_overview_info_1.jpeg\" alt=\"thread_overview_info_1\"></p>\n<p>上图中第一个框起来的部分是 new TestThreadOverview()对象（代码第6行），TestThreadOverview对象有两个属性str1、str2</p>\n<p>第二个框起来的部分是main方法中的字符串变量local_str（代码第8行）</p>\n<p>结合左侧的对象属性区域，可以更方便的看清线程中对象的具体情况<br><img src=\"/2023-04-20/mat/thread_overview_info_2.jpeg\" alt=\"thread_overview_info_2\"></p>\n<h3 id=\"6、List-objects\"><a href=\"#6、List-objects\" class=\"headerlink\" title=\"6、List objects\"></a>6、List objects</h3><p><strong>在 Histogram 或 Dominator Tree视图，想要看某个条目（对象/类）的引用关系图，可以使用 List objects 功能</strong></p>\n<ol>\n<li><p>选择一个条目后，点击工具栏的 <strong>Query Browser &gt; List objects</strong>，选择 with outgoing references 或 with incoming references<br><img src=\"/2023-04-20/mat/link_1_list_objects.jpeg\" alt=\"link_1_list_objects\"></p>\n</li>\n<li><p>直接在某个条目上点击右键，也可以选择到List object</p>\n</li>\n</ol>\n<p><strong>List objects –&gt; with outgoing references</strong> <img src=\"/2023-04-20/mat/with_outgoing_references_ico.jpeg\" alt=\"with_outgoing_references_ico\">:查看当前对象持有的外部对象引用(在对象关系图中为 从当前对象指向外的箭头)</p>\n<p><strong>List objects –&gt; with incoming references</strong> <img src=\"/2023-04-20/mat/with_incoming_references_ico.jpeg\" alt=\"with_incoming_references_ico\">:查看当前对象被哪些外部对象所引用（在对象关系图中为指向当前对象的箭头）<br>例如上面Thread Overview的例子代码中，查看main方法中第6行中的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">TestThreadOverview test = <span class=\"keyword\">new</span> TestThreadOverview();</span><br></pre></td></tr></table></figure>\n\n<p>outgoing references查询结果为：<br><img src=\"/2023-04-20/mat/outgoing_references.jpeg\" alt=\"outgoing_references\"><br>可以看到TestThreadOverview对象存在3个引用，第一个是TestThreadOverview的Class类对象，因为所有Java类都继承自java.lang.Object，所以都有class对象的引用，后两个是成员变量str1、str2</p>\n<p>即列出了当前main方法中的局部变量TestThreadOverview所持有的所有外部对象引用</p>\n<p><strong>incoming references查询结果为</strong>：<br><img src=\"/2023-04-20/mat/incoming_references.jpeg\" alt=\"incoming_references\"><br>可以看到TestThreadOverview是main线程的一个本地局部变量，main线程本身还是一个GC root，而main线程在某个ThreadGroup中</p>\n<h3 id=\"7、Paths-to-GC-Roots（从对象到GC-Roots的路径）-amp-Merge-Shortest-Paths-to-GC-roots（从GC-Roots到对象的共同路径）\"><a href=\"#7、Paths-to-GC-Roots（从对象到GC-Roots的路径）-amp-Merge-Shortest-Paths-to-GC-roots（从GC-Roots到对象的共同路径）\" class=\"headerlink\" title=\"7、Paths to GC Roots（从对象到GC Roots的路径） &amp; Merge Shortest Paths to GC roots（从GC Roots到对象的共同路径）\"></a>7、Paths to GC Roots（从对象到GC Roots的路径） &amp; Merge Shortest Paths to GC roots（从GC Roots到对象的共同路径）</h3><p><strong>Paths to GC Roots</strong><img src=\"/2023-04-20/mat/paths_to_gc_roots_ico.jpeg\" alt=\"paths_to_gc_roots_ico\">:从当前对象到GC roots的路径，这个路径解释了为什么当前对象还能存活，对分析内存泄露很有帮助，这个查询只能针对单个对象使用</p>\n<p><strong>Merge Shortest Paths to GC roots</strong><img src=\"/2023-04-20/mat/merge_shortest_paths_to_gc_roots_ico.jpeg\" alt=\"merge_shortest_paths_to_gc_roots_ico\">: 从GC roots到一个或一组对象的公共路径</p>\n<p>Path to GC roots 和 Merge shortest Paths to GC roots 这两个查询都有很多选项，如：<br><img src=\"/2023-04-20/mat/paths_to_gc_roots_list.jpeg\" alt=\"paths_to_gc_roots_list\"><br>意思是在查询到GC root的路径时，是包含所有引用，还是排除一些类型的引用（如软引用、弱引用、虚引用），从GC角度说，一个对象无法被GC，一定是因为有强引用存在，其它引用类型在GC需要的情况下都是可以被GC掉的，所以可以使用 <strong>exclude all phantom/weak/soft etc. references</strong> 只查看GC路径上的强引用</p>\n<p>Path to GC roots 和 Merge shortest Paths to GC roots 的入口和 List objects一样，可以从工具栏的 Query Browser 进入，或者在条目上直接点击右键进入<br><img src=\"/2023-04-20/mat/link_1_paths_to_gc_roots.jpeg\" alt=\"link_1_paths_to_gc_roots\"><br>需要注意的是，Paths to GC roots是针对单个对象的，故在Histogram视图无法使用，因为Histogram视图是针对类的，只能使用Merge shortest Paths to GC roots查询</p>\n<h3 id=\"8、Leak-Suspects-Report（内存泄露报告）\"><a href=\"#8、Leak-Suspects-Report（内存泄露报告）\" class=\"headerlink\" title=\"8、Leak Suspects Report（内存泄露报告）\"></a>8、Leak Suspects Report（内存泄露报告）</h3><p>使用MAT打开一个Dump文件时，会弹出向导窗口，保持默认选项，点Finish，就会导向 Leak Suspects内存泄露报告页面<br><img src=\"/2023-04-20/mat/link_1_leak_suspects_report.jpeg\" alt=\"link_1_leak_suspects_report\"></p>\n<p>如果打开Dump时跳过了的话，也可以从其它入口进入，如</p>\n<ol>\n<li>工具栏上的 <strong>Run Expect System Test &gt; Leak Suspects</strong><br><img src=\"/2023-04-20/mat/link_2_leak_suspects_report.jpeg\" alt=\"link_2_leak_suspects_report\"></li>\n<li>Overview页面的Reports部分<br><img src=\"/2023-04-20/mat/link_3_leak_suspects_report.jpeg\" alt=\"link_3_leak_suspects_report\"><br>Leak Suspects 是MAT帮我们分析的可能有内存泄露嫌疑的地方，可以体现出哪些对象被保持在内存中，以及为什么它们没有被垃圾回收</li>\n</ol>\n<p>MAT提供了一个很贴心的功能，将报告的内容压缩打包到一个zip文件，并放在原始堆转储文件的目录下，一般命名为“xxx_Leak_Suspects.zip”，xxx是dump文件的名字，如果需要和同事一起分析这个内存问题的话，只需要把这个小小的zip包发给他就可以了，不需要把整个堆文件发给他。并且整个报告是一个HTML格式的文件，用浏览器就可以轻松打开</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">内存泄露的概念：</span><br><span class=\"line\">1、内存泄露的这些对象是从GC root可达的，从GC root存在通路可以与其相连</span><br><span class=\"line\">2、这些对象是无用的，即程序以后不会再使用这些对象</span><br><span class=\"line\">至于怎么定义程序不会再使用的对象，那就要看具体的程序逻辑了，说白了内存泄露就是该回收的内存没有被回收</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面用一个例子分析如何使用Leak Suspects Report内存泄露报告</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMHeapTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        oom();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">oom</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String, OOMBean&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, OOMBean&gt;();</span><br><span class=\"line\">        Object[] array = <span class=\"keyword\">new</span> Object[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">1000000</span>; i++)&#123;</span><br><span class=\"line\">            String d = <span class=\"keyword\">new</span> Date().toString();</span><br><span class=\"line\">            OOMBean o = <span class=\"keyword\">new</span> OOMBean(d, i);</span><br><span class=\"line\">            map.put(i+<span class=\"string\">\"_oom\"</span>, o);</span><br><span class=\"line\">            array[i] = o;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中创建了很多OOMBean，并放入了Map和数组中，由于是强引用，在主线程运行结束前，GC自然不会回收，一直到内存溢出。<br>在运行前设置一些VM参数：-Xms2m  -Xmx2m  -XX:+HeapDumpOnOutOfMemoryError<br>以便程序可以OutOfMemory，并在发生内存溢出时自动生成内存快照<br>程序运行一会儿后，控制台打印<br><img src=\"/2023-04-20/mat/leak_suspects_jvm_console.jpeg\" alt=\"leak_suspects_jvm_console\"><br>java_pid10160.hprof 就是内存dump，可以在OOMHeapTest类所在工程的根目录下找到</p>\n<p><strong>Leak Suspects：</strong><br><img src=\"/2023-04-20/mat/leak_suspects_details_1.jpeg\" alt=\"leak_suspects_details_1\"><br><img src=\"/2023-04-20/mat/leak_suspects_details_2.jpeg\" alt=\"leak_suspects_details_2\"><br>MAT工具分析了heap dump后在界面上非常直观的展示了一个饼图，该图深色区域被怀疑有内存泄漏，可以发现整个heap才6.8M内存，深色区域就占了92.11%。接下来是一个简短的描述，告诉我们main线程占用了大量内存，并且明确指出system class loader加载的“java.lang.Thread”实例有内存聚集，并建议用关键字“java.lang.Thread”进行检查。在下面还有一个“Details”链接，可以查看明细信息。<br><strong>Details明细：</strong><br><img src=\"/2023-04-20/mat/leak_suspects_details_3.jpeg\" alt=\"leak_suspects_details_3\"><br>Details的最开始是Description描述，和前一个页面对内存泄露嫌疑点的描述一致，下面有一些与怀疑的内存泄露点关联的查询结果展示，是分析报告中认为可能会存在问题，协助我们深入分析问题根源的，具体如下：</p>\n<ol>\n<li><p>Shortest Paths To the Accumulation Point<br><img src=\"/2023-04-20/mat/shortest_paths_to_the_accumulation_point.jpeg\" alt=\"shortest_paths_to_the_accumulation_point\"><br>实际上展开的视图是当前对象“java.lang.Thread @ 0xffc59ab0 main”的 Path to GC roots，即到GC roots的路径，点击标题右侧的按钮可以在另一窗口打开<br>这个视图的作用是可以分析是由于和哪个GC root相连导致当前Retained Heap占用相当大的对象无法被回收<br>由于是分析内存泄露的报告，找到导致当前对象无法被回收的GC roots，分析这些GC roots是否合理，是有必要的<br>但本例中由于main线程本身就是GC root，故只有一条数据</p>\n</li>\n<li><p>Accumulated Objects in Dominator Tree<br><img src=\"/2023-04-20/mat/accumulated_objects_in_dominator_tree.jpeg\" alt=\"accumulated_objects_in_dominator_tree\"><br>这个视图以对象的维度展示了以当前对象“java.lang.Thread @ 0xffc59ab0 main”为根的 <strong>Dominator Tree</strong> 支配树，可以方便的看出受当前对象“支配”的对象中哪个占用Retained Heap比较大<br>观察Accumulated Objects部分，java.lang.Object[1000000]实例 和 java.util.HashMap 和 的Retained Heap(Size)最大，Retained Heap代表从该类实例沿着reference chain往下所能收集到的其他类实例的Shallow Heap(Size)总和，所以明显类实例都聚集在HashMap和Object数组中了<br>在Accumulated Objects视图中，Retained heap占用最多的是HashMap和object数组，为啥它们会占用这么大的heap呢？这个时候需要分析HashMap和object数组中存放了一些什么对象？接着往下看 Accumulated Objects by Class in Dominator Tree</p>\n</li>\n<li><p>Accumulated Objects by Class in Dominator Tree<br><img src=\"/2023-04-20/mat/accumulated_objects_by_class_in_dominator_tree.jpeg\" alt=\"accumulated_objects_by_class_in_dominator_tree\"><br>这个视图实际上是展示了以当前对象“java.lang.Thread @ 0xffc59ab0 main”为根的 <strong>Dominator Tree支配树，并以Class类分组</strong><br>可以看到 OOMBean类 的实例最多，有11786个，程序中确实是在循环创建OOMBean实例，并放入object数据和HashMap中<br>这样就可以确定Heap占用大时由于OOMBean类的实例创建的太多的原因了</p>\n</li>\n<li><p>Thread Detail<br><img src=\"/2023-04-20/mat/thread_detail.jpeg\" alt=\"thread_detail\"><br>Detail明细的最后由于当前怀疑泄露点为main Thread线程对象，故展示了线程明细信息，调用栈信息，对分析内存溢出的发生位置很有帮忙</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/trust-freedom/p/6744948.html\" target=\"_blank\" rel=\"noopener\">使用 Eclipse Memory Analyzer Tool（MAT）分析线上故障(一) - 视图&amp;功能篇</a><br><a href=\"http://help.eclipse.org/neon/index.jsp?topic=/org.eclipse.mat.ui.help/welcome.html\" target=\"_blank\" rel=\"noopener\">Eclipse Memory Analyzer Tool Help</a><br><a href=\"https://www.eclipse.org/mat/downloads.php\" target=\"_blank\" rel=\"noopener\">Mat内存官方下载</a><br><a href=\"/download/2023/2023-04-20-mat/mat.zip\">Mat内存软件下载</a></p>\n","tags":["jvm","mat"]},{"title":"alipay sdk 通过 feign 实现","url":"/2021-04-25/alipay-feign-sdk/","content":"<h1 id=\"alipay-sdk-通过-feign-实现\"><a href=\"#alipay-sdk-通过-feign-实现\" class=\"headerlink\" title=\"alipay sdk 通过 feign 实现\"></a>alipay sdk 通过 feign 实现</h1><h2 id=\"1-官方sdk\"><a href=\"#1-官方sdk\" class=\"headerlink\" title=\"1. 官方sdk\"></a>1. 官方sdk</h2><h3 id=\"1-1-alipay-sdk-依赖\"><a href=\"#1-1-alipay-sdk-依赖\" class=\"headerlink\" title=\"1.1 alipay sdk 依赖\"></a>1.1 alipay sdk 依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alipay.sdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>alipay-sdk-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10.70.ALL<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-官方sdk请求\"><a href=\"#1-2-官方sdk请求\" class=\"headerlink\" title=\"1.2 官方sdk请求\"></a>1.2 官方sdk请求</h3><blockquote>\n<p>官方文档:<a href=\"https://opendocs.alipay.com/apis/api_1/alipay.trade.pay\" target=\"_blank\" rel=\"noopener\">统一收单交易支付接口</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">AlipayClient alipayClient = <span class=\"keyword\">new</span> DefaultAlipayClient(<span class=\"string\">\"https://openapi.alipay.com/gateway.do\"</span>,<span class=\"string\">\"app_id\"</span>,<span class=\"string\">\"your private_key\"</span>,<span class=\"string\">\"json\"</span>,<span class=\"string\">\"GBK\"</span>,<span class=\"string\">\"alipay_public_key\"</span>,<span class=\"string\">\"RSA2\"</span>);</span><br><span class=\"line\">AlipayTradePayRequest request = <span class=\"keyword\">new</span> AlipayTradePayRequest();</span><br><span class=\"line\">request.setBizContent(<span class=\"string\">\"biz_json\"</span>);</span><br><span class=\"line\">AlipayTradePayResponse response = alipayClient.execute(request);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(response.isSuccess())&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"调用成功\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"调用失败\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-feign-改造实现\"><a href=\"#2-feign-改造实现\" class=\"headerlink\" title=\"2. feign 改造实现\"></a>2. feign 改造实现</h2><h3 id=\"2-1-feign-client-接口定义\"><a href=\"#2-1-feign-client-接口定义\" class=\"headerlink\" title=\"2.1 feign client 接口定义\"></a>2.1 feign client 接口定义</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.internal.util.AlipayHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.internal.util.RequestParametersHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.internal.util.WebUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.RequestInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Retryer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"aliPaySpi\"</span>,</span><br><span class=\"line\">        url = <span class=\"string\">\"https://openapi.alipay.com/gateway.do\"</span>,</span><br><span class=\"line\">        configuration = AliPaySpi.Config.class</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AliPaySpi</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ThreadLocal&lt;AlipayClient&gt; CLIENT_CAHE = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * alipay.trade.pay(统一收单交易支付接口)</span></span><br><span class=\"line\"><span class=\"comment\">     * 文档: https://opendocs.alipay.com/apis/api_1/alipay.trade.pay</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request 请求参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> authToken token 不需要时,可以删除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> appAuthToken token, 不需要时,可以删除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> params 扩展参数, 不需要时可以删除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(produces = MediaType.APPLICATION_JSON_VALUE,</span><br><span class=\"line\">            headers = &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"method=alipay.trade.pay\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"version=1.0\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"notifyUrl=\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"needEncrypt=false\"</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">barCodePay</span><span class=\"params\">(@RequestBody AlipayTradePayModel request, @RequestParam(<span class=\"string\">\"auth_token\"</span>)</span> String authToken, @<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"app_auth_token\"</span>)</span> String appAuthToken, @RequestParam Map&lt;String, String&gt; params)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 对 request 进行 sign 以及参数格式化</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> RequestInterceptor <span class=\"title\">requestInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> requestTemplate -&gt; &#123;</span><br><span class=\"line\">                AlipayClient client = CLIENT_CAHE.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Objects.isNull(client)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"配置异常\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    requestTemplate.header(<span class=\"string\">\"Content-Type\"</span>, MediaType.APPLICATION_FORM_URLENCODED_VALUE);</span><br><span class=\"line\"></span><br><span class=\"line\">                    RequestParametersHolder requestHolder = client.getRequestHolderWithSign(requestTemplate, defaultApiConfig(), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// sysMustQuery</span></span><br><span class=\"line\">                    AlipayHashMap protocalMustParams = requestHolder.getProtocalMustParams();</span><br><span class=\"line\">                    <span class=\"comment\">// sysOptQuery \"auth_token\" -&gt; \"accessToken\"</span></span><br><span class=\"line\">                    AlipayHashMap protocalOptParams = requestHolder.getProtocalOptParams();</span><br><span class=\"line\"></span><br><span class=\"line\">                    Map&lt;String, Collection&lt;String&gt;&gt; queries = <span class=\"keyword\">new</span> HashMap&lt;&gt;(protocalMustParams.size() + protocalOptParams.size());</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry: protocalMustParams.entrySet()) &#123;</span><br><span class=\"line\">                        queries.put(entry.getKey(), Collections.singletonList(entry.getValue()));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; entry: protocalOptParams.entrySet()) &#123;</span><br><span class=\"line\">                        queries.put(entry.getKey(), Collections.singletonList(entry.getValue()));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    requestTemplate.queries(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    requestTemplate.queries(queries);</span><br><span class=\"line\">                    <span class=\"comment\">// body \"app_auth_token\" -&gt; \"appAuthToken\"</span></span><br><span class=\"line\">                    requestTemplate.body(WebUtils.buildQuery(requestHolder.getApplicationParams(), requestTemplate.request().charset().toString()));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> AlipayRequest <span class=\"title\">defaultApiConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            AlipayRequest request = <span class=\"keyword\">new</span> AlipayRequest();</span><br><span class=\"line\">            request.setApiVersion(<span class=\"string\">\"1.0\"</span>);</span><br><span class=\"line\">            request.setNeedEncrypt(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> request;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 阿里接口 response 返回的 content-type 为 text/html, JacksonConvert 默认是不支持转换的</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getDecoderConverters() &#123;</span><br><span class=\"line\">            MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter = getSupportedMediaTypeConverter(MappingJackson2HttpMessageConverter.class, MediaType.TEXT_HTML);</span><br><span class=\"line\">            StringHttpMessageConverter stringHttpMessageConverter = <span class=\"keyword\">new</span> StringHttpMessageConverter();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Arrays.asList(stringHttpMessageConverter, mappingJackson2HttpMessageConverter);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-参数加密工具类\"><a href=\"#2-2-参数加密工具类\" class=\"headerlink\" title=\"2.2 参数加密工具类\"></a>2.2 参数加密工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.internal.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.internal.util.codec.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.internal.util.file.FileUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zm.pay.channel.config.FeignUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.RequestTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.tuple.Pair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.PublicKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Security;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractAlipayClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量API默认分隔符</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BATCH_API_DEFAULT_SPLIT = <span class=\"string\">\"#S#\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//清除安全设置</span></span><br><span class=\"line\">        Security.setProperty(<span class=\"string\">\"jdk.certpath.disabledAlgorithms\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                                    loadTest       = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     appId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     prodCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     format         = AlipayConstants.FORMAT_JSON;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     signType       = AlipayConstants.SIGN_TYPE_RSA;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     encryptType    = AlipayConstants.ENCRYPT_TYPE_AES;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     charset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   <span class=\"keyword\">int</span>                                        connectTimeout = <span class=\"number\">3000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   <span class=\"keyword\">int</span>                                        readTimeout    = <span class=\"number\">15000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     proxyHost;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   <span class=\"keyword\">int</span>                                        proxyPort;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SignChecker signChecker;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     appCertSN;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     alipayCertSN;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     alipayRootCertSN;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     alipayRootSm2CertSN;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   String                                     rootCertContent;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> X509Certificate cert;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, X509Certificate&gt; alipayPublicCertMap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>   ConcurrentHashMap&lt;String, String&gt;          alipayPublicKeyMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractAlipayClient</span><span class=\"params\">(String appId, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String charset, String signType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.appId = appId;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(format)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.format = format;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.charset = charset;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(signType)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.signType = signType;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractAlipayClient</span><span class=\"params\">(String appId, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String charset, String signType, String proxyHost,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">int</span> proxyPort)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(appId, format, charset, signType);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxyHost = proxyHost;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxyPort = proxyPort;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractAlipayClient</span><span class=\"params\">(String appId, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String charset, String signType, String encryptType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(appId, format, charset, signType);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(encryptType)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.encryptType = encryptType;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractAlipayClient</span><span class=\"params\">(String appId, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String charset, String signType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String certPath, String certContent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String alipayPublicCertPath, String alipayPublicCertContent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String rootCertPath, String rootCertContent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                String proxyHost, <span class=\"keyword\">int</span> proxyPort, String encryptType)</span> <span class=\"keyword\">throws</span> AlipayApiException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(appId, format, charset, signType);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(encryptType)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.encryptType = encryptType;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxyHost = proxyHost;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxyPort = proxyPort;</span><br><span class=\"line\">        <span class=\"comment\">//读取根证书（用来校验本地支付宝公钥证书失效后自动从网关下载的新支付宝公钥证书是否有效）</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rootCertContent = StringUtils.isEmpty(rootCertContent) ? readFileToString(rootCertPath) : rootCertContent;</span><br><span class=\"line\">        <span class=\"comment\">//alipayRootCertSN根证书序列号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (AlipayConstants.SIGN_TYPE_SM2.equals(signType)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.alipayRootSm2CertSN = AntCertificationUtil.getRootCertSN(<span class=\"keyword\">this</span>.rootCertContent, <span class=\"string\">\"SM2\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.alipayRootCertSN = AntCertificationUtil.getRootCertSN(<span class=\"keyword\">this</span>.rootCertContent);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(<span class=\"keyword\">this</span>.alipayRootCertSN)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AlipayApiException(<span class=\"string\">\"AlipayRootCert Is Invalid\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取应用证书</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cert = StringUtils.isEmpty(certContent) ? AntCertificationUtil.getCertFromPath(certPath)</span><br><span class=\"line\">                : AntCertificationUtil.getCertFromContent(certContent);</span><br><span class=\"line\">        <span class=\"comment\">//获取支付宝公钥证书</span></span><br><span class=\"line\">        X509Certificate alipayPublicCert = StringUtils.isEmpty(alipayPublicCertContent) ?</span><br><span class=\"line\">                AntCertificationUtil.getCertFromPath(alipayPublicCertPath) :</span><br><span class=\"line\">                AntCertificationUtil.getCertFromContent(alipayPublicCertContent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//appCertSN为最终发送给网关的应用证书序列号</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.appCertSN = AntCertificationUtil.getCertSN(cert);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(<span class=\"keyword\">this</span>.appCertSN)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AlipayApiException(<span class=\"string\">\"AppCert Is Invalid\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//alipayCertSN为支付宝公钥证书序列号</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.alipayCertSN = AntCertificationUtil.getCertSN(alipayPublicCert);</span><br><span class=\"line\">        <span class=\"comment\">//将公钥证书以序列号为key存入map</span></span><br><span class=\"line\">        ConcurrentHashMap&lt;String, X509Certificate&gt; alipayPublicCertMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, X509Certificate&gt;();</span><br><span class=\"line\">        alipayPublicCertMap.put(alipayCertSN, alipayPublicCert);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.alipayPublicCertMap = alipayPublicCertMap;</span><br><span class=\"line\">        <span class=\"comment\">//获取支付宝公钥以序列号为key存入map</span></span><br><span class=\"line\">        PublicKey publicKey = alipayPublicCert.getPublicKey();</span><br><span class=\"line\">        ConcurrentHashMap&lt;String, String&gt; alipayPublicKeyMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class=\"line\">        alipayPublicKeyMap.put(alipayCertSN, Base64.encodeBase64String(publicKey.getEncoded()));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.alipayPublicKeyMap = alipayPublicKeyMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">readFileToString</span><span class=\"params\">(String rootCertPath)</span> <span class=\"keyword\">throws</span> AlipayApiException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FileUtils.readFileToString(<span class=\"keyword\">new</span> File(rootCertPath));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AlipayApiException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 组装接口参数，处理加密、签名逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> appCertSN    应用证书序列号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> AlipayApiException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RequestParametersHolder <span class=\"title\">getRequestHolderWithSign</span><span class=\"params\">(RequestTemplate requestTemplate, AlipayRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                            String appCertSN, String targetAppId)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> AlipayApiException </span>&#123;</span><br><span class=\"line\">        RequestParametersHolder requestHolder = <span class=\"keyword\">new</span> RequestParametersHolder();</span><br><span class=\"line\">        Map&lt;String, String&gt; queries = FeignUtils.convert(requestTemplate.queries());</span><br><span class=\"line\">        String accessToken = queries.get(AlipayConstants.ACCESS_TOKEN);</span><br><span class=\"line\">        String appAuthToken = queries.get(AlipayConstants.APP_AUTH_TOKEN);</span><br><span class=\"line\">        queries.remove(AlipayConstants.ACCESS_TOKEN);</span><br><span class=\"line\">        queries.remove(AlipayConstants.APP_AUTH_TOKEN);</span><br><span class=\"line\">        AlipayHashMap appParams = <span class=\"keyword\">new</span> AlipayHashMap(queries);</span><br><span class=\"line\">        appParams.put(AlipayConstants.BIZ_CONTENT_KEY, <span class=\"keyword\">new</span> String(requestTemplate.body()));</span><br><span class=\"line\"></span><br><span class=\"line\">        Optional&lt;String&gt; needEncrypt = getHeader(requestTemplate, <span class=\"string\">\"needEncrypt\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 只有新接口和设置密钥才能支持加密</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needEncrypt.isPresent() &amp;&amp; Boolean.valueOf(needEncrypt.get())) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(appParams.get(AlipayConstants.BIZ_CONTENT_KEY))) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AlipayApiException(<span class=\"string\">\"当前API不支持加密请求\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 需要加密必须设置密钥和加密算法</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(encryptType) || getEncryptor() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AlipayApiException(<span class=\"string\">\"API请求要求加密，则必须设置密钥类型和加密器\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String encryptContent = getEncryptor().encrypt(</span><br><span class=\"line\">                    appParams.get(AlipayConstants.BIZ_CONTENT_KEY), getEncryptType(), charset);</span><br><span class=\"line\"></span><br><span class=\"line\">            appParams.put(AlipayConstants.BIZ_CONTENT_KEY, encryptContent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(appAuthToken)) &#123;</span><br><span class=\"line\">            appParams.put(AlipayConstants.APP_AUTH_TOKEN, appAuthToken);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        requestHolder.setApplicationParams(appParams);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isEmpty(charset)) &#123;</span><br><span class=\"line\">            charset = AlipayConstants.CHARSET_UTF8;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        AlipayHashMap protocalMustParams = <span class=\"keyword\">new</span> AlipayHashMap();</span><br><span class=\"line\">        protocalMustParams.put(AlipayConstants.APP_ID, appId);</span><br><span class=\"line\">        protocalMustParams.put(AlipayConstants.SIGN_TYPE, signType);</span><br><span class=\"line\">        putParams(requestTemplate, protocalMustParams,</span><br><span class=\"line\">                Pair.of(AlipayConstants.METHOD, <span class=\"keyword\">null</span>),</span><br><span class=\"line\">                Pair.of(AlipayConstants.VERSION, request.getApiVersion()),</span><br><span class=\"line\">                Pair.of(AlipayConstants.TERMINAL_TYPE, request.getTerminalType()),</span><br><span class=\"line\">                Pair.of(AlipayConstants.TERMINAL_INFO, request.getTerminalInfo()),</span><br><span class=\"line\">                Pair.of(AlipayConstants.NOTIFY_URL, request.getNotifyUrl()),</span><br><span class=\"line\">                Pair.of(AlipayConstants.RETURN_URL, request.getReturnUrl()),</span><br><span class=\"line\">                Pair.of(AlipayConstants.CHARSET, charset));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(targetAppId)) &#123;</span><br><span class=\"line\">            protocalMustParams.put(AlipayConstants.TARGET_APP_ID, targetAppId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needEncrypt.isPresent() &amp;&amp; Boolean.valueOf(needEncrypt.get())) &#123;</span><br><span class=\"line\">            protocalMustParams.put(AlipayConstants.ENCRYPT_TYPE, getEncryptType());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果应用证书序列号非空，添加应用证书序列号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(appCertSN)) &#123;</span><br><span class=\"line\">            protocalMustParams.put(AlipayConstants.APP_CERT_SN, appCertSN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果根证书序列号非空，添加根证书序列号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(alipayRootCertSN)) &#123;</span><br><span class=\"line\">            protocalMustParams.put(AlipayConstants.ALIPAY_ROOT_CERT_SN, alipayRootCertSN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果SM2根证书序列号非空，添加SM2根证书序列号</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(alipayRootSm2CertSN)) &#123;</span><br><span class=\"line\">            protocalMustParams.put(AlipayConstants.ALIPAY_ROOT_CERT_SN, alipayRootSm2CertSN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Long timestamp = System.currentTimeMillis();</span><br><span class=\"line\">        DateFormat df = <span class=\"keyword\">new</span> SimpleDateFormat(AlipayConstants.DATE_TIME_FORMAT);</span><br><span class=\"line\">        df.setTimeZone(TimeZone.getTimeZone(AlipayConstants.DATE_TIMEZONE));</span><br><span class=\"line\">        protocalMustParams.put(AlipayConstants.TIMESTAMP, df.format(<span class=\"keyword\">new</span> Date(timestamp)));</span><br><span class=\"line\">        requestHolder.setProtocalMustParams(protocalMustParams);</span><br><span class=\"line\"></span><br><span class=\"line\">        AlipayHashMap protocalOptParams = <span class=\"keyword\">new</span> AlipayHashMap();</span><br><span class=\"line\">        protocalOptParams.put(AlipayConstants.FORMAT, format);</span><br><span class=\"line\">        protocalOptParams.put(AlipayConstants.ACCESS_TOKEN, accessToken);</span><br><span class=\"line\">        protocalOptParams.put(AlipayConstants.ALIPAY_SDK, AlipayConstants.SDK_VERSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        putParams(requestTemplate, protocalOptParams, Pair.of(AlipayConstants.PROD_CODE, request.getProdCode()));</span><br><span class=\"line\"></span><br><span class=\"line\">        requestHolder.setProtocalOptParams(protocalOptParams);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(signType)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            String signContent = AlipaySignature.getSignatureContent(requestHolder);</span><br><span class=\"line\">            protocalMustParams.put(AlipayConstants.SIGN,</span><br><span class=\"line\">                    getSigner().sign(signContent, signType, charset));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            protocalMustParams.put(AlipayConstants.SIGN, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> requestHolder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">putParams</span><span class=\"params\">(RequestTemplate requestTemplate, AlipayHashMap params, Pair&lt;String, String&gt; ...pairs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Pair&lt;String, String&gt; headerKey: pairs) &#123;</span><br><span class=\"line\">            Optional&lt;String&gt; optional = getHeader(requestTemplate, headerKey.getKey());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (optional.isPresent()) &#123;</span><br><span class=\"line\">                params.put(headerKey.getKey(), optional.get());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                params.put(headerKey.getKey(), headerKey.getValue());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Optional&lt;String&gt; <span class=\"title\">getHeader</span><span class=\"params\">(RequestTemplate requestTemplate, String key)</span> </span>&#123;</span><br><span class=\"line\">        Collection&lt;String&gt; collection = requestTemplate.headers().get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(collection)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Optional.empty();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection.stream().findFirst();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Signer <span class=\"title\">getSigner</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> SignChecker <span class=\"title\">getSignChecker</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Encryptor <span class=\"title\">getEncryptor</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Decryptor <span class=\"title\">getDecryptor</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alipay.api.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.cert.X509Certificate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlipayClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAlipayClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                                     privateKey;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                                     encryptKey;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                                     alipayPublicKey;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Signer signer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SignChecker signChecker;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Encryptor encryptor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Decryptor decryptor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> X509Certificate cert;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, X509Certificate&gt; alipayPublicCertMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(String appId, String privateKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(appId, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(privateKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(String appId, String privateKey, String format)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(appId, format, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(privateKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(String appId, String privateKey, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               String charset)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(appId, format, charset, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(privateKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(String appId, String privateKey, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               String charset, String alipayPublicKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(appId, format, charset, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.alipayPublicKey = alipayPublicKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signChecker = <span class=\"keyword\">new</span> DefaultSignChecker(alipayPublicKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(String appId, String privateKey, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               String charset, String alipayPublicKey, String signType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(appId, format, charset, signType);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.alipayPublicKey = alipayPublicKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signChecker = <span class=\"keyword\">new</span> DefaultSignChecker(alipayPublicKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(String appId, String privateKey, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               String charset, String alipayPublicKey, String signType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               String proxyHost, <span class=\"keyword\">int</span> proxyPort)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(appId, format, charset, signType, proxyHost, proxyPort);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.alipayPublicKey = alipayPublicKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signChecker = <span class=\"keyword\">new</span> DefaultSignChecker(alipayPublicKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(String appId, String privateKey, String format,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               String charset, String alipayPublicKey, String signType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               String encryptKey, String encryptType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(appId, format, charset, signType, encryptType);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = privateKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.alipayPublicKey = alipayPublicKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signChecker = <span class=\"keyword\">new</span> DefaultSignChecker(alipayPublicKey);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.encryptor = <span class=\"keyword\">new</span> DefaultEncryptor(encryptKey);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.decryptor = <span class=\"keyword\">new</span> DefaultDecryptor(encryptKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AlipayClient</span><span class=\"params\">(CertAlipayRequest certAlipayRequest)</span> <span class=\"keyword\">throws</span> AlipayApiException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(certAlipayRequest.getAppId(), certAlipayRequest.getFormat(),</span><br><span class=\"line\">                certAlipayRequest.getCharset(), certAlipayRequest.getSignType(),</span><br><span class=\"line\">                certAlipayRequest.getCertPath(), certAlipayRequest.getCertContent(),</span><br><span class=\"line\">                certAlipayRequest.getAlipayPublicCertPath(), certAlipayRequest.getAlipayPublicCertContent(),</span><br><span class=\"line\">                certAlipayRequest.getRootCertPath(), certAlipayRequest.getRootCertContent(),</span><br><span class=\"line\">                certAlipayRequest.getProxyHost(), certAlipayRequest.getProxyPort(), certAlipayRequest.getEncryptType());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.privateKey = certAlipayRequest.getPrivateKey();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.signer = <span class=\"keyword\">new</span> DefaultSigner(certAlipayRequest.getPrivateKey());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.encryptor = <span class=\"keyword\">new</span> DefaultEncryptor(certAlipayRequest.getEncryptor());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.decryptor = <span class=\"keyword\">new</span> DefaultDecryptor(certAlipayRequest.getEncryptor());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlipayRequest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到当前接口的版本</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> API版本</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String apiVersion;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取终端类型</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 终端类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String terminalType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取终端信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 终端信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String terminalInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取产品码</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 产品码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prodCode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回通知地址</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String notifyUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回回跳地址</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String returnUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是否需要加密</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> needEncrypt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-feign-client-调用\"><a href=\"#2-3-feign-client-调用\" class=\"headerlink\" title=\"2.3 feign client 调用\"></a>2.3 feign client 调用</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AliPaySpi.CLIENT_CAHE.set(AliPayConfig.getClient(aliPayProperties));</span><br><span class=\"line\">    AlipayTradePayModel model = JSON.parseObject(json, AlipayTradePayModel.class);</span><br><span class=\"line\">    Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    params.put(<span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value1\"</span>);</span><br><span class=\"line\">    String result = aliPaySpi.barCodePay(model, <span class=\"string\">\"authToken\"</span>, <span class=\"string\">\"appAuthToken\"</span>, params);</span><br><span class=\"line\">    System.out.println(JsonUtil.toJson(result));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["feign"]},{"title":"wechat sdk 通过 feign 实现","url":"/2021-04-25/wechat-feign-sdk/","content":"<h1 id=\"wechat-sdk-通过-feign-实现\"><a href=\"#wechat-sdk-通过-feign-实现\" class=\"headerlink\" title=\"wechat sdk 通过 feign 实现\"></a>wechat sdk 通过 feign 实现</h1><h2 id=\"feign-client-接口定义\"><a href=\"#feign-client-接口定义\" class=\"headerlink\" title=\"feign client 接口定义\"></a>feign client 接口定义</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> feign.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.RequestInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.Retryer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"wechatPaySpi\"</span>,</span><br><span class=\"line\">        url = <span class=\"string\">\"https://api.mch.weixin.qq.com\"</span>,</span><br><span class=\"line\">        configuration = WechatPaySpi.Config.class</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WechatPaySpi</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询订单</span></span><br><span class=\"line\"><span class=\"comment\">     * 文档: https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=9_02</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/pay/orderquery\"</span>, consumes = MediaType.APPLICATION_XML_VALUE)</span><br><span class=\"line\">    <span class=\"function\">QueryResponse <span class=\"title\">queryOrder</span><span class=\"params\">(QueryRequest request)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询退款</span></span><br><span class=\"line\"><span class=\"comment\">     * 文档: https://pay.weixin.qq.com/wiki/doc/api/micropay.php?chapter=9_5</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(value = <span class=\"string\">\"/pay/refundquery\"</span>, consumes = MediaType.APPLICATION_XML_VALUE)</span><br><span class=\"line\">    <span class=\"function\">Map&lt;String, Object&gt; <span class=\"title\">queryRefund</span><span class=\"params\">(RefundQueryRequest request)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Config</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractConfig</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 微信接口 response 返回的 content-type 为 text/plain, XmlConvert 默认是不支持转换的</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getDecoderConverters() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.singletonList(getSupportedMediaTypeConverter(MappingJackson2XmlHttpMessageConverter.class, MediaType.TEXT_PLAIN));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-wechat-请求工具类\"><a href=\"#2-wechat-请求工具类\" class=\"headerlink\" title=\"2. wechat 请求工具类\"></a>2. wechat 请求工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JacksonXmlRootElement</span>(localName = <span class=\"string\">\"xml\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseRequest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 公众账号ID</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信支付分配的公众账号ID（企业号corpid即为此appId）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"appid\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 商户号</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信支付分配的商户号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"mch_id\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mchId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机字符串，不长于32位。推荐随机数生成算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"nonce_str\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nonceStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 签名</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过签名算法计算得出的签名值，详见签名生成算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"sign\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sign;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 签名类型</span></span><br><span class=\"line\"><span class=\"comment\">     * HMAC-SHA256\t签名类型，目前支持HMAC-SHA256和MD5，默认为MD5</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"sign_type\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String signType = WXPayConstants.MD5;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseRequest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nonceStr = WXPayUtil.generateNonceStr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSign</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Map&lt;String, String&gt; params = convertObjToMap();</span><br><span class=\"line\">            SignType signType = SignType.valueOf(<span class=\"keyword\">this</span>.signType);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WXPayUtil.generateSignature(params, <span class=\"string\">\"zhimaikejigufenyouxiangongsi2017\"</span>, signType);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">convertObjToMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; reMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        List&lt;Field&gt; fields = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        List&lt;Field&gt; childFields;</span><br><span class=\"line\">        List&lt;String&gt; fieldsName = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">10</span>);</span><br><span class=\"line\">        Class tempClass = <span class=\"keyword\">this</span>.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当父类为null的时候说明到达了最上层的父类(Object类).</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tempClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fields.addAll(Arrays.asList(tempClass.getDeclaredFields()));</span><br><span class=\"line\">            <span class=\"comment\">//得到父类,然后赋给自己</span></span><br><span class=\"line\">            tempClass = tempClass.getSuperclass();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childFields = Arrays.asList(<span class=\"keyword\">this</span>.getClass().getDeclaredFields());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : childFields) &#123;</span><br><span class=\"line\">            fieldsName.add(field.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    JacksonXmlProperty annotation = field.getDeclaredAnnotation(JacksonXmlProperty.class);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fieldsName.contains(field.getName())) &#123;</span><br><span class=\"line\">                        Field f = <span class=\"keyword\">this</span>.getClass().getDeclaredField(</span><br><span class=\"line\">                                field.getName());</span><br><span class=\"line\">                        f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        Object o = f.get(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Objects.isNull(o)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        reMap.put(annotation.localName(), o.toString());</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        Field f = <span class=\"keyword\">this</span>.getClass().getSuperclass().getDeclaredField(</span><br><span class=\"line\">                                field.getName());</span><br><span class=\"line\">                        f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        Object o = f.get(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Objects.isNull(o)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        reMap.put(annotation.localName(), o.toString());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JacksonXmlRootElement</span>(localName = <span class=\"string\">\"xml\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseRequest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信订单号</span></span><br><span class=\"line\"><span class=\"comment\">     * 微信的订单号，建议优先使用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"transaction_id\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String transactionId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 商户订单号</span></span><br><span class=\"line\"><span class=\"comment\">     * 商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|*@ ，且在同一个商户号下唯一。 详见商户订单号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@JacksonXmlProperty</span>(localName = <span class=\"string\">\"out_trade_no\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String outTradeNo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.w3c.dom.Node;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.w3c.dom.NodeList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.Mac;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.OutputKeys;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.TransformerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.dom.DOMSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.MessageDigest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.SecureRandom;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WXPayUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SYMBOLS = <span class=\"string\">\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Random RANDOM = <span class=\"keyword\">new</span> SecureRandom();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * XML格式字符串转换为Map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> strXML XML字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> XML数据转换后的Map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; <span class=\"title\">xmlToMap</span><span class=\"params\">(String strXML)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Map&lt;String, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            DocumentBuilder documentBuilder = WXPayXmlUtil.newDocumentBuilder();</span><br><span class=\"line\">            InputStream stream = <span class=\"keyword\">new</span> ByteArrayInputStream(strXML.getBytes(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">            org.w3c.dom.Document doc = documentBuilder.parse(stream);</span><br><span class=\"line\">            doc.getDocumentElement().normalize();</span><br><span class=\"line\">            NodeList nodeList = doc.getDocumentElement().getChildNodes();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; nodeList.getLength(); ++idx) &#123;</span><br><span class=\"line\">                Node node = nodeList.item(idx);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class=\"line\">                    org.w3c.dom.Element element = (org.w3c.dom.Element) node;</span><br><span class=\"line\">                    data.put(element.getNodeName(), element.getTextContent());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                stream.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            WXPayUtil.getLogger().warn(<span class=\"string\">\"Invalid XML, can not convert to map. Error message: &#123;&#125;. XML content: &#123;&#125;\"</span>, ex.getMessage(), strXML);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将Map转换为XML格式的字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data Map类型数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> XML格式的字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">mapToXml</span><span class=\"params\">(Map&lt;String, String&gt; data)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        org.w3c.dom.Document document = WXPayXmlUtil.newDocument();</span><br><span class=\"line\">        org.w3c.dom.Element root = document.createElement(<span class=\"string\">\"xml\"</span>);</span><br><span class=\"line\">        document.appendChild(root);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key: data.keySet()) &#123;</span><br><span class=\"line\">            String value = data.get(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                value = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            value = value.trim();</span><br><span class=\"line\">            org.w3c.dom.Element filed = document.createElement(key);</span><br><span class=\"line\">            filed.appendChild(document.createTextNode(value));</span><br><span class=\"line\">            root.appendChild(filed);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class=\"line\">        Transformer transformer = tf.newTransformer();</span><br><span class=\"line\">        DOMSource source = <span class=\"keyword\">new</span> DOMSource(document);</span><br><span class=\"line\">        transformer.setOutputProperty(OutputKeys.ENCODING, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        transformer.setOutputProperty(OutputKeys.INDENT, <span class=\"string\">\"yes\"</span>);</span><br><span class=\"line\">        StringWriter writer = <span class=\"keyword\">new</span> StringWriter();</span><br><span class=\"line\">        StreamResult result = <span class=\"keyword\">new</span> StreamResult(writer);</span><br><span class=\"line\">        transformer.transform(source, result);</span><br><span class=\"line\">        String output = writer.getBuffer().toString(); <span class=\"comment\">//.replaceAll(\"\\n|\\r\", \"\");</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成带有 sign 的 XML 格式字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data Map类型数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key API密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 含有sign字段的XML</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateSignedXml</span><span class=\"params\">(<span class=\"keyword\">final</span> Map&lt;String, String&gt; data, String key)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateSignedXml(data, key, SignType.MD5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成带有 sign 的 XML 格式字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data Map类型数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key API密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> signType 签名类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 含有sign字段的XML</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateSignedXml</span><span class=\"params\">(<span class=\"keyword\">final</span> Map&lt;String, String&gt; data, String key, SignType signType)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String sign = generateSignature(data, key, signType);</span><br><span class=\"line\">        data.put(WXPayConstants.FIELD_SIGN, sign);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapToXml(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断签名是否正确</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> xmlStr XML格式数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key API密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 签名是否正确</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSignatureValid</span><span class=\"params\">(String xmlStr, String key)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; data = xmlToMap(xmlStr);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data.containsKey(WXPayConstants.FIELD_SIGN) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String sign = data.get(WXPayConstants.FIELD_SIGN);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateSignature(data, key).equals(sign);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断签名是否正确，必须包含sign字段，否则返回false。使用MD5签名。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data Map类型数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key API密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 签名是否正确</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSignatureValid</span><span class=\"params\">(Map&lt;String, String&gt; data, String key)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSignatureValid(data, key, SignType.MD5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断签名是否正确，必须包含sign字段，否则返回false。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data Map类型数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key API密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> signType 签名方式</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 签名是否正确</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSignatureValid</span><span class=\"params\">(Map&lt;String, String&gt; data, String key, SignType signType)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data.containsKey(WXPayConstants.FIELD_SIGN) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String sign = data.get(WXPayConstants.FIELD_SIGN);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateSignature(data, key, signType).equals(sign);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成签名</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 待签名数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key API密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 签名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateSignature</span><span class=\"params\">(<span class=\"keyword\">final</span> Map&lt;String, String&gt; data, String key)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateSignature(data, key, SignType.MD5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成签名. 注意，若含有sign_type字段，必须和signType参数保持一致。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 待签名数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key API密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> signType 签名方式</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 签名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateSignature</span><span class=\"params\">(<span class=\"keyword\">final</span> Map&lt;String, String&gt; data, String key, SignType signType)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Set&lt;String&gt; keySet = data.keySet();</span><br><span class=\"line\">        String[] keyArray = keySet.toArray(<span class=\"keyword\">new</span> String[keySet.size()]);</span><br><span class=\"line\">        Arrays.sort(keyArray);</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String k : keyArray) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k.equals(WXPayConstants.FIELD_SIGN)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.get(k).trim().length() &gt; <span class=\"number\">0</span>) <span class=\"comment\">// 参数值为空，则不参与签名</span></span><br><span class=\"line\">                sb.append(k).append(<span class=\"string\">\"=\"</span>).append(data.get(k).trim()).append(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sb.append(<span class=\"string\">\"key=\"</span>).append(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SignType.MD5.equals(signType)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> MD5(sb.toString()).toUpperCase();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (SignType.HMACSHA256.equals(signType)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HMACSHA256(sb.toString(), key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(String.format(<span class=\"string\">\"Invalid sign_type: %s\"</span>, signType));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取随机字符串 Nonce Str</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> String 随机字符串</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">generateNonceStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] nonceChars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">32</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; nonceChars.length; ++index) &#123;</span><br><span class=\"line\">            nonceChars[index] = SYMBOLS.charAt(RANDOM.nextInt(SYMBOLS.length()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(nonceChars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成 MD5</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 待处理数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> MD5结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">MD5</span><span class=\"params\">(String data)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] array = md.digest(data.getBytes(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> item : array) &#123;</span><br><span class=\"line\">            sb.append(Integer.toHexString((item &amp; <span class=\"number\">0xFF</span>) | <span class=\"number\">0x100</span>).substring(<span class=\"number\">1</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString().toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成 HMACSHA256</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 待处理数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 密钥</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 加密结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">HMACSHA256</span><span class=\"params\">(String data, String key)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Mac sha256_HMAC = Mac.getInstance(<span class=\"string\">\"HmacSHA256\"</span>);</span><br><span class=\"line\">        SecretKeySpec secret_key = <span class=\"keyword\">new</span> SecretKeySpec(key.getBytes(<span class=\"string\">\"UTF-8\"</span>), <span class=\"string\">\"HmacSHA256\"</span>);</span><br><span class=\"line\">        sha256_HMAC.init(secret_key);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] array = sha256_HMAC.doFinal(data.getBytes(<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> item : array) &#123;</span><br><span class=\"line\">            sb.append(Integer.toHexString((item &amp; <span class=\"number\">0xFF</span>) | <span class=\"number\">0x100</span>).substring(<span class=\"number\">1</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString().toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 日志</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Logger <span class=\"title\">getLogger</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Logger logger = LoggerFactory.getLogger(<span class=\"string\">\"wxpay java sdk\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前时间戳，单位秒</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getCurrentTimestamp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis()/<span class=\"number\">1000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前时间戳，单位毫秒</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getCurrentTimestampMs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.w3c.dom.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.XMLConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 2018/7/3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WXPayXmlUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DocumentBuilder <span class=\"title\">newDocumentBuilder</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParserConfigurationException </span>&#123;</span><br><span class=\"line\">        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">        documentBuilderFactory.setFeature(<span class=\"string\">\"http://apache.org/xml/features/disallow-doctype-decl\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        documentBuilderFactory.setFeature(<span class=\"string\">\"http://xml.org/sax/features/external-general-entities\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        documentBuilderFactory.setFeature(<span class=\"string\">\"http://xml.org/sax/features/external-parameter-entities\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        documentBuilderFactory.setFeature(<span class=\"string\">\"http://apache.org/xml/features/nonvalidating/load-external-dtd\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        documentBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        documentBuilderFactory.setXIncludeAware(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        documentBuilderFactory.setExpandEntityReferences(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> documentBuilderFactory.newDocumentBuilder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Document <span class=\"title\">newDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParserConfigurationException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newDocumentBuilder().newDocument();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["feign"]},{"title":"spring transaction 事务(二)","url":"/2020-12-03/spring-transaction/","content":"<h1 id=\"转-spring-transaction-事务-二\"><a href=\"#转-spring-transaction-事务-二\" class=\"headerlink\" title=\"(转)spring transaction 事务(二)\"></a>(转)spring transaction 事务(二)</h1><blockquote>\n<p>原文链接: (<a href=\"https://www.cnblogs.com/dennyzhangdd/p/9602673.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dennyzhangdd/p/9602673.html</a>)<br>在 <em>Spring</em> 中，事务有两种实现方式：</p>\n<ol>\n<li>编程式事务管理： 编程式事务管理使用 <em>TransactionTemplate</em> 可实现更细粒度的事务控制。</li>\n<li>申明式事务管理： 基于 <em>Spring AOP</em> 实现。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。<br>申明式事务管理不需要入侵代码，通过 <code>@Transactional</code> 就可以进行事务操作，更快捷而且简单（尤其是配合 <em>spring boot</em> 自动配置，可以说是精简至极！），且大部分业务都可以满足，推荐使用。<br>其实不管是编程式事务还是申明式事务，最终调用的底层核心代码是一致的。本章分别从编程式、申明式入手，再进入核心源码贯穿式讲解。</li>\n</ol>\n</blockquote>\n<h2 id=\"一、事务源码\"><a href=\"#一、事务源码\" class=\"headerlink\" title=\"一、事务源码\"></a>一、事务源码</h2><h3 id=\"编程式事务TransactionTemplate\"><a href=\"#编程式事务TransactionTemplate\" class=\"headerlink\" title=\"编程式事务TransactionTemplate\"></a>编程式事务TransactionTemplate</h3><p>编程式事务，<em>Spring</em> 已经给我们提供好了模板类 <em>TransactionTemplate</em>，可以很方便的使用，如下图：<br><img src=\"/2020-12-03/spring-transaction/584866-20181023104953327-391666676.png\" alt=\"1-1\"></p>\n<p><em>TransactionTemplate</em> 全路径名是：<code>org.springframework.transaction.support.TransactionTemplate</code>。看包名也知道了这是 <em>spring</em> 对事务的模板类。（<em>spring</em> 动不动就是各种 <em>Template</em>…），看下类图先：<br><img src=\"/2020-12-03/spring-transaction/584866-20180905171740923-1484828014.png\" alt=\"1-2\"><br>一看，哟西，实现了 <strong>TransactionOperations</strong>、<strong>InitializingBean</strong> 这2个接口（熟悉 <em>spring</em> 源码的知道这个 <strong>InitializingBean</strong> 又是老套路），我们来看下接口源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionOperations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Execute the action specified by the given callback object within a transaction.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Allows for returning a result object created within the transaction, that is,</span></span><br><span class=\"line\"><span class=\"comment\">     * a domain object or a collection of domain objects. A RuntimeException thrown</span></span><br><span class=\"line\"><span class=\"comment\">     * by the callback is treated as a fatal exception that enforces a rollback.</span></span><br><span class=\"line\"><span class=\"comment\">     * Such an exception gets propagated to the caller of the template.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> action the callback object that specifies the transactional action</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> a result object returned by the callback, or &#123;<span class=\"doctag\">@code</span> null&#125; if none</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> TransactionException in case of initialization, rollback, or system errors</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> RuntimeException if thrown by the TransactionCallback</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(TransactionCallback&lt;T&gt; action)</span> <span class=\"keyword\">throws</span> TransactionException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Invoked by a BeanFactory after it has set all bean properties supplied</span></span><br><span class=\"line\"><span class=\"comment\">     * (and satisfied BeanFactoryAware and ApplicationContextAware).</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;This method allows the bean instance to perform initialization only</span></span><br><span class=\"line\"><span class=\"comment\">     * possible when all bean properties have been set and to throw an</span></span><br><span class=\"line\"><span class=\"comment\">     * exception in the event of misconfiguration.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception in the event of misconfiguration (such</span></span><br><span class=\"line\"><span class=\"comment\">     * as failure to set an essential property) or if initialization fails.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，<strong>TransactionOperations</strong> 这个接口用来执行事务的回调方法，<strong>InitializingBean</strong>这个是典型的spring bean初始化流程中（<a href=\"https://www.cnblogs.com/dennyzhangdd/p/7730050.html\" target=\"_blank\" rel=\"noopener\">飞机票：Spring IOC（四）总结升华篇</a>）的预留接口，专用用来在bean属性加载完毕时执行的方法。</p>\n<p>回到正题，<em>TransactionTemplate</em> 的2个接口的impl方法做了什么？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.transactionManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Property 'transactionManager' is required\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">execute</span><span class=\"params\">(TransactionCallback&lt;T&gt; action)</span> <span class=\"keyword\">throws</span> TransactionException </span>&#123;　　　　　　　<span class=\"comment\">// 内部封装好的事务管理器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.transactionManager <span class=\"keyword\">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((CallbackPreferringPlatformTransactionManager) <span class=\"keyword\">this</span>.transactionManager).execute(<span class=\"keyword\">this</span>, action);</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 需要手动获取事务，执行方法，提交事务的管理器</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 1.获取事务状态</span></span><br><span class=\"line\">        TransactionStatus status = <span class=\"keyword\">this</span>.transactionManager.getTransaction(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        T result;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;<span class=\"comment\">// 2.执行业务逻辑</span></span><br><span class=\"line\">            result = action.doInTransaction(status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RuntimeException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 应用运行时异常 -&gt; 回滚</span></span><br><span class=\"line\">            rollbackOnException(status, ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error err) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Error异常 -&gt; 回滚</span></span><br><span class=\"line\">            rollbackOnException(status, err);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 未知异常 -&gt; 回滚</span></span><br><span class=\"line\">            rollbackOnException(status, ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(ex, <span class=\"string\">\"TransactionCallback threw undeclared checked exception\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 3.事务提交</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.transactionManager.commit(status);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图所示，实际上 <em>afterPropertiesSet</em> 只是校验了事务管理器不为空，<code>execute()</code> 才是核心方法，<em>execute</em> 主要步骤：</p>\n<ol>\n<li><code>getTransaction()</code> 获取事务，源码见<a href=\"#2.3.1\">2.3.1</a></li>\n<li><code>doInTransaction()</code> 执行业务逻辑，这里就是用户自定义的业务代码。如果是没有返回值的，就是 <code>doInTransactionWithoutResult()</code>。</li>\n<li><code>commit()</code> 事务提交：调用 <em>AbstractPlatformTransactionManager</em> 的 <strong>commit</strong>，<code>rollbackOnException()</code> 异常回滚：调用 <em>AbstractPlatformTransactionManager</em> 的 <code>rollback()</code>，事务提交回滚，源码见<a href=\"#2.3.2\">2.3.2</a></li>\n</ol>\n<h3 id=\"二、申明式事务-Transactional\"><a href=\"#二、申明式事务-Transactional\" class=\"headerlink\" title=\"二、申明式事务@Transactional\"></a>二、申明式事务@Transactional</h3><h4 id=\"1-AOP相关概念\"><a href=\"#1-AOP相关概念\" class=\"headerlink\" title=\"1.AOP相关概念\"></a>1.AOP相关概念</h4><p>申明式事务使用的是 <em>spring AOP*，即面向切面编程。（什么❓你不知道什么是 *AOP</em>…一句话概括就是：把业务代码中重复代码做成一个切面，提取出来，并定义哪些方法需要执行这个切面。其它的自行百度吧…）AOP核心概念如下：</p>\n<ul>\n<li>通知（<em>Advice</em>）:定义了切面(各处业务代码中都需要的逻辑提炼成的一个切面)做什么 <strong>what+when</strong> 何时使用。例如：前置通知 <strong>Before</strong>、后置通知 <strong>After</strong>、返回通知 <strong>After-returning</strong>、异常通知 <strong>After-throwing</strong>、环绕通知 <strong>Around</strong>。</li>\n<li>连接点（<em>Joint point</em>）：程序执行过程中能够插入切面的点，一般有多个。比如调用方式时、抛出异常时。</li>\n<li>切点（<em>Pointcut</em>）:切点定义了连接点，切点包含多个连接点,即where哪里使用通知.通常指定类+方法 或者 正则表达式来匹配 类和方法名称。</li>\n<li>切面（<em>Aspect</em>）:切面=通知+切点，即 <strong>when+where+what</strong> 何时何地做什么。</li>\n<li>引入（<em>Introduction</em>）:允许我们向现有的类添加新方法或属性。</li>\n<li>织入（<em>Weaving</em>）:织入是把切面应用到目标对象并创建新的代理对象的过程。</li>\n</ul>\n<h4 id=\"2-申明式事务\"><a href=\"#2-申明式事务\" class=\"headerlink\" title=\"2.申明式事务\"></a>2.申明式事务</h4><p>申明式事务整体调用过程，可以抽出2条线：</p>\n<ol>\n<li>使用代理模式，生成代理增强类。</li>\n<li>根据代理事务管理配置类，配置事务的织入，在业务方法前后进行环绕增强，增加一些事务的相关操作。例如获取事务属性、提交事务、回滚事务。</li>\n</ol>\n<p>过程如下图：<br><img src=\"/2020-12-03/spring-transaction/584866-20181025094316678-100230633.png\" alt=\"2-1\"></p>\n<p>申明式事务使用 <code>@Transactional</code> 这种注解的方式，那么我们就从 <em>springboot</em> 容器启动时的自动配置载入（<em>spring boot</em> 容器启动详解）开始看。在 <code>/META-INF/spring.factories</code> 中配置文件中查找，如下图<br><img src=\"/2020-12-03/spring-transaction/584866-20180913165737924-437553.png\" alt=\"2-2\"></p>\n<p>载入2个关于事务的自动配置类：<br><code>org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration</code>,<br><code>org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration</code>,</p>\n<p><em>jta</em> 咱们就不看了，看一下 <em>TransactionAutoConfiguration</em> 这个自动配置类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(PlatformTransactionManager.class)</span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter</span>(&#123; JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class,</span><br><span class=\"line\">        DataSourceTransactionManagerAutoConfiguration.class,</span><br><span class=\"line\">        Neo4jDataAutoConfiguration.class &#125;)</span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(TransactionProperties.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TransactionManagerCustomizers <span class=\"title\">platformTransactionManagerCustomizers</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            ObjectProvider&lt;List&lt;PlatformTransactionManagerCustomizer&lt;?&gt;&gt;&gt; customizers)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransactionManagerCustomizers(customizers.getIfAvailable());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnSingleCandidate</span>(PlatformTransactionManager.class)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionTemplateConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PlatformTransactionManager transactionManager;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransactionTemplateConfiguration</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.transactionManager = transactionManager;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> TransactionTemplate <span class=\"title\">transactionTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransactionTemplate(<span class=\"keyword\">this</span>.transactionManager);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnBean</span>(PlatformTransactionManager.class)</span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(AbstractTransactionManagementConfiguration.class)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnableTransactionManagementConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">        <span class=\"meta\">@EnableTransactionManagement</span>(proxyTargetClass = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"spring.aop\"</span>, name = <span class=\"string\">\"proxy-target-class\"</span>, havingValue = <span class=\"string\">\"false\"</span>, matchIfMissing = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkDynamicAutoProxyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Configuration</span></span><br><span class=\"line\">        <span class=\"meta\">@EnableTransactionManagement</span>(proxyTargetClass = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"spring.aop\"</span>, name = <span class=\"string\">\"proxy-target-class\"</span>, havingValue = <span class=\"string\">\"true\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibAutoProxyConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>TransactionAutoConfiguration</strong>这个类主要看：</p>\n<ol>\n<li><p>2个类注解</p>\n<ul>\n<li><code>@ConditionalOnClass(PlatformTransactionManager.class</code>)即类路径下包含 <em>PlatformTransactionManager</em> 这个类时这个自动配置生效，这个类是 <em>spring</em> 事务的核心包，肯定引入了。</li>\n<li><code>@AutoConfigureAfter({ JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class, Neo4jDataAutoConfiguration.class })</code>，这个配置在括号中的4个配置类后才生效。</li>\n</ul>\n</li>\n<li><p>2个内部类</p>\n<ol>\n<li><p><strong>TransactionTemplateConfiguration</strong>事务模板配置类：</p>\n<ul>\n<li><code>@ConditionalOnSingleCandidate(PlatformTransactionManager.class)</code> 当能够唯一确定一个<em>PlatformTransactionManager bean</em> 时才生效。</li>\n<li><code>@ConditionalOnMissingBean</code> 如果没有定义 <em>TransactionTemplate bean</em> 生成一个。</li>\n</ul>\n</li>\n<li><p><strong>EnableTransactionManagementConfiguration</strong>开启事务管理器配置类：</p>\n<ul>\n<li><code>@ConditionalOnBean(PlatformTransactionManager.class)</code> 当存在 <em>PlatformTransactionManager bean</em> 时生效。</li>\n<li><code>@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)</code> 当没有自定义抽象事务管理器配置类时才生效。（即用户自定义抽象事务管理器配置类会优先，如果没有，就用这个默认事务管理器配置类）</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p><strong>EnableTransactionManagementConfiguration</strong>支持2种代理方式：</p>\n<ol>\n<li><em>JdkDynamicAutoProxyConfiguration</em>：<ul>\n<li><code>@EnableTransactionManagement(proxyTargetClass = false)</code>，即 <strong>proxyTargetClass = false</strong> 表示是 <em>JDK</em> 动态代理支持的是：面向接口代理。</li>\n<li><code>@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;false&quot;, matchIfMissing = false)</code>，即 <strong>spring.aop.proxy-target-class=false</strong> 时生效，且没有这个配置不生效。</li>\n</ul>\n</li>\n<li><em>CglibAutoProxyConfiguration</em>：<ul>\n<li><code>@EnableTransactionManagement(proxyTargetClass = true)</code>，即 <strong>proxyTargetClass = true</strong> 标识 <em>Cglib</em> 代理支持的是子类继承代理。</li>\n<li><code>@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</code>，即 <strong>spring.aop.proxy-target-class=true</strong> 时生效，且没有这个配置默认生效。</li>\n</ul>\n</li>\n</ol>\n<p>注意了，<strong>默认没有配置，走的Cglib代理。说明@Transactional注解支持直接加在类上。</strong><br>好吧，看了这么多配置类，终于到了 <code>@EnableTransactionManagement</code> 这个注解了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(TransactionManagementConfigurationSelector.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableTransactionManagement &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//proxyTargetClass = false表示是JDK动态代理支持接口代理。true表示是Cglib代理支持子类继承代理。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//事务通知模式(切面织入方式)，默认代理模式（同一个类中方法互相调用拦截器不会生效），可以选择增强型AspectJ</span></span><br><span class=\"line\">    <span class=\"function\">AdviceMode <span class=\"title\">mode</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> AdviceMode.PROXY</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接点上有多个通知时，排序，默认最低。值越大优先级越低。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">order</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点看类注解 <code>@Import(TransactionManagementConfigurationSelector.class)</code><br><em>TransactionManagementConfigurationSelector</em> 类图如下：<br><img src=\"/2020-12-03/spring-transaction/584866-20180914103222181-997153599.png\" alt=\"2-3\"><br>如上图所示，<em>TransactionManagementConfigurationSelector</em> 继承自 <em>AdviceModeImportSelector</em> 实现了 <em>ImportSelector</em> 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionManagementConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableTransactionManagement</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@link</span> ProxyTransactionManagementConfiguration&#125; or</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> AspectJTransactionManagementConfiguration&#125; for &#123;<span class=\"doctag\">@code</span> PROXY&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@code</span> ASPECTJ&#125; values of &#123;<span class=\"doctag\">@link</span> EnableTransactionManagement#mode()&#125;, respectively</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (adviceMode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;AutoProxyRegistrar.class.getName(), ProxyTransactionManagementConfiguration.class.getName()&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;TransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，最终会执行 <em>selectImports</em> 方法导入需要加载的类，我们只看 <em>proxy</em> 模式下，载入了 <em>AutoProxyRegistrar<em>、</em>ProxyTransactionManagementConfiguration</em> 2个类。</p>\n<ul>\n<li><em>AutoProxyRegistrar</em> ：给容器中注册一个 <em>InfrastructureAdvisorAutoProxyCreator</em> 组件；利用后置处理器机制在对象创建以后，包装对象，返回一个代理对象（增强器），代理对象执行方法利用拦截器链进行调用；</li>\n<li><em>ProxyTransactionManagementConfiguration</em>：就是一个配置类，定义了事务增强器。</li>\n</ul>\n<h5 id=\"AutoProxyRegistrar\"><a href=\"#AutoProxyRegistrar\" class=\"headerlink\" title=\"AutoProxyRegistrar\"></a>AutoProxyRegistrar</h5><p>先看 <em>AutoProxyRegistrar</em> 实现了 <em>ImportBeanDefinitionRegistrar</em> 接口，复写 <strong>registerBeanDefinitions</strong> 方法，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> candidateFound = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Set&lt;String&gt; annoTypes = importingClassMetadata.getAnnotationTypes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String annoType : annoTypes) &#123;</span><br><span class=\"line\">        AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (candidate == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object mode = candidate.get(<span class=\"string\">\"mode\"</span>);</span><br><span class=\"line\">        Object proxyTargetClass = candidate.get(<span class=\"string\">\"proxyTargetClass\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mode != <span class=\"keyword\">null</span> &amp;&amp; proxyTargetClass != <span class=\"keyword\">null</span> &amp;&amp; AdviceMode.class == mode.getClass() &amp;&amp;</span><br><span class=\"line\">                Boolean.class == proxyTargetClass.getClass()) &#123;</span><br><span class=\"line\">            candidateFound = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mode == AdviceMode.PROXY) &#123;<span class=\"comment\">//代理模式</span></span><br><span class=\"line\">                AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((Boolean) proxyTargetClass) &#123;<span class=\"comment\">//如果是CGLOB子类代理模式</span></span><br><span class=\"line\">                    AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!candidateFound) &#123;</span><br><span class=\"line\">        String name = getClass().getSimpleName();</span><br><span class=\"line\">        logger.warn(String.format(<span class=\"string\">\"%s was imported but no annotations were found \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"having both 'mode' and 'proxyTargetClass' attributes of type \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"AdviceMode and boolean respectively. This means that auto proxy \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"creator registration and configuration may not have occurred as \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"intended, and components may not be proxied as expected. Check to \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"ensure that %s has been @Import'ed on the same class where these \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"annotations are declared; otherwise remove the import of %s \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"altogether.\"</span>, name, name, name));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代理模式：<code>AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</code><br>最终调用的是：<code>registerOrEscalateApcAsRequired(InfrastructureAdvisorAutoProxyCreator.class, registry, source);</code> 基础构建增强自动代理构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BeanDefinition <span class=\"title\">registerOrEscalateApcAsRequired</span><span class=\"params\">(Class&lt;?&gt; cls, BeanDefinitionRegistry registry, Object source)</span> </span>&#123;</span><br><span class=\"line\">    Assert.notNull(registry, <span class=\"string\">\"BeanDefinitionRegistry must not be null\"</span>);　　　　　　 </span><br><span class=\"line\">    <span class=\"comment\">//如果当前注册器包含internalAutoProxyCreator</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;<span class=\"comment\">//org.springframework.aop.config.internalAutoProxyCreator内部自动代理构造器</span></span><br><span class=\"line\">        BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;<span class=\"comment\">//如果当前类不是internalAutoProxyCreator</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class=\"line\">            <span class=\"keyword\">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentPriority &lt; requiredPriority) &#123;<span class=\"comment\">//如果下标大于已存在的内部自动代理构造器，index越小，优先级越高,InfrastructureAdvisorAutoProxyCreator index=0,requiredPriority最小，不进入</span></span><br><span class=\"line\">                apcDefinition.setBeanClassName(cls.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;<span class=\"comment\">//直接返回</span></span><br><span class=\"line\">    &#125;<span class=\"comment\">//如果当前注册器不包含internalAutoProxyCreator，则把当前类作为根定义</span></span><br><span class=\"line\">    RootBeanDefinition beanDefinition = <span class=\"keyword\">new</span> RootBeanDefinition(cls);</span><br><span class=\"line\">    beanDefinition.setSource(source);</span><br><span class=\"line\">    beanDefinition.getPropertyValues().add(<span class=\"string\">\"order\"</span>, Ordered.HIGHEST_PRECEDENCE);<span class=\"comment\">//优先级最高</span></span><br><span class=\"line\">    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class=\"line\">    registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> beanDefinition;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，<strong>APC_PRIORITY_LIST</strong> 列表如下图：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Stores the auto proxy creator classes in escalation order.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;Class&lt;?&gt;&gt; APC_PRIORITY_LIST = <span class=\"keyword\">new</span> ArrayList&lt;Class&lt;?&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 优先级上升list</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    APC_PRIORITY_LIST.add(InfrastructureAdvisorAutoProxyCreator.class);</span><br><span class=\"line\">    APC_PRIORITY_LIST.add(AspectJAwareAdvisorAutoProxyCreator.class);</span><br><span class=\"line\">    APC_PRIORITY_LIST.add(AnnotationAwareAspectJAutoProxyCreator.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，由于 <em>InfrastructureAdvisorAutoProxyCreator</em> 这个类在 <em>list</em> 中第一个 <strong>index=0,requiredPriority</strong> 最小，不进入，所以没有重置 <em>beanClassName</em> 啥都没做，返回 <strong>null</strong>。<br><strong>那么增强代理类何时生成呢？</strong><br><em>InfrastructureAdvisorAutoProxyCreator</em> 类图如下：<br><img src=\"/2020-12-03/spring-transaction/584866-20180920100606315-809882472.png\" alt=\"2-4\"></p>\n<p>如上图所示，看2个核心方法：<em>InstantiationAwareBeanPostProcessor</em> 接口的 <strong>postProcessBeforeInstantiation</strong> 实例化前+<em>BeanPostProcessor</em> 接口的 <strong>postProcessAfterInitialization</strong> 初始化后。关于 <em>spring bean</em> 生命周期飞机票：<a href=\"https://www.cnblogs.com/dennyzhangdd/p/7730050.html\" target=\"_blank\" rel=\"noopener\">Spring IOC（四）总结升华篇</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">wrapIfNecessary</span><span class=\"params\">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;　　　　　　 <span class=\"comment\">// 如果是用户自定义获取实例，不需要增强处理，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanName != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 查询map缓存，标记过false,不需要增强直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Boolean.FALSE.equals(<span class=\"keyword\">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 判断一遍springAOP基础构建类，标记过false,不需要增强直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取增强List&lt;Advisor&gt; advisors</span></span><br><span class=\"line\">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class=\"keyword\">null</span>);　　　　　　 </span><br><span class=\"line\">    <span class=\"comment\">// 如果存在增强</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);<span class=\"comment\">// 标记增强为TRUE,表示需要增强实现　　　　　　　　  // 生成增强代理类</span></span><br><span class=\"line\">        Object proxy = createProxy(</span><br><span class=\"line\">                bean.getClass(), beanName, specificInterceptors, <span class=\"keyword\">new</span> SingletonTargetSource(bean));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　 <span class=\"comment\">// 如果不存在增强，标记false,作为缓存，再次进入提高效率，第16行利用缓存先校验</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面看核心方法 <strong>createProxy</strong> 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">createProxy</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class=\"line\">　　 <span class=\"comment\">// 如果是ConfigurableListableBeanFactory接口（咱们DefaultListableBeanFactory就是该接口的实现类）则，暴露目标类</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.beanFactory <span class=\"keyword\">instanceof</span> ConfigurableListableBeanFactory) &#123;　　　　　　　　  <span class=\"comment\">//给beanFactory-&gt;beanDefinition定义一个属性：k=AutoProxyUtils.originalTargetClass,v=需要被代理的bean class</span></span><br><span class=\"line\">        AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class=\"keyword\">this</span>.beanFactory, beanName, beanClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ProxyFactory proxyFactory = <span class=\"keyword\">new</span> ProxyFactory();</span><br><span class=\"line\">    proxyFactory.copyFrom(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">　　 <span class=\"comment\">//如果不是代理目标类</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!proxyFactory.isProxyTargetClass()) &#123;<span class=\"comment\">//如果beanFactory定义了代理目标类（CGLIB）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class=\"line\">            proxyFactory.setProxyTargetClass(<span class=\"keyword\">true</span>);<span class=\"comment\">//代理工厂设置代理目标类</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//否则设置代理接口（JDK）</span></span><br><span class=\"line\">            evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　 <span class=\"comment\">//把拦截器包装成增强（通知）</span></span><br><span class=\"line\">    Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class=\"line\">    proxyFactory.addAdvisors(advisors);<span class=\"comment\">//设置进代理工厂</span></span><br><span class=\"line\">    proxyFactory.setTargetSource(targetSource);</span><br><span class=\"line\">    customizeProxyFactory(proxyFactory);<span class=\"comment\">//空方法，留给子类拓展用，典型的spring的风格，喜欢处处留后路</span></span><br><span class=\"line\">　　 <span class=\"comment\">//用于控制代理工厂是否还允许再次添加通知，默认为false（表示不允许）</span></span><br><span class=\"line\">    proxyFactory.setFrozen(<span class=\"keyword\">this</span>.freezeProxy);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (advisorsPreFiltered()) &#123;<span class=\"comment\">//默认false，上面已经前置过滤了匹配的增强Advisor</span></span><br><span class=\"line\">        proxyFactory.setPreFiltered(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//代理工厂获取代理对象的核心方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终我们生成的是 <em>CGLIB</em> 代理类.到此为止我们分析完了代理类的构造过程。</p>\n<h5 id=\"ProxyTransactionManagementConfiguration\"><a href=\"#ProxyTransactionManagementConfiguration\" class=\"headerlink\" title=\"ProxyTransactionManagementConfiguration\"></a>ProxyTransactionManagementConfiguration</h5><p>下面来看 <em>ProxyTransactionManagementConfiguration</em>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTransactionManagementConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTransactionManagementConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)</span><br><span class=\"line\">    <span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)<span class=\"comment\">//定义事务增强器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BeanFactoryTransactionAttributeSourceAdvisor <span class=\"title\">transactionAdvisor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BeanFactoryTransactionAttributeSourceAdvisor advisor = <span class=\"keyword\">new</span> BeanFactoryTransactionAttributeSourceAdvisor();</span><br><span class=\"line\">        advisor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class=\"line\">        advisor.setAdvice(transactionInterceptor());</span><br><span class=\"line\">        advisor.setOrder(<span class=\"keyword\">this</span>.enableTx.&lt;Integer&gt;getNumber(<span class=\"string\">\"order\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> advisor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)<span class=\"comment\">//定义基于注解的事务属性资源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TransactionAttributeSource <span class=\"title\">transactionAttributeSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AnnotationTransactionAttributeSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)<span class=\"comment\">//定义事务拦截器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TransactionInterceptor <span class=\"title\">transactionInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        TransactionInterceptor interceptor = <span class=\"keyword\">new</span> TransactionInterceptor();</span><br><span class=\"line\">        interceptor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.txManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            interceptor.setTransactionManager(<span class=\"keyword\">this</span>.txManager);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心方法：<code>transactionAdvisor()</code> 事务织入<br>定义了一个 <em>advisor</em>,设置事务属性、设置事务拦截器 <em>TransactionInterceptor</em> 设置顺序。核心就是事务拦截器 <em>TransactionInterceptor</em> .<br><em>TransactionInterceptor</em> 使用通用的 <em>spring</em> 事务基础架构实现“声明式事务”，继承自 <em>TransactionAspectSupport</em> 类（该类包含与 <em>Spring</em> 的底层事务 <em>API</em> 的集成），实现了 <em>MethodInterceptor</em> 接口。<em>spring</em> 类图如下：<br><img src=\"/2020-12-03/spring-transaction/584866-20180914144614118-1426254578.png\" alt=\"2-5\"><br>事务拦截器的拦截功能就是依靠实现了 <em>MethodInterceptor</em> 接口，熟悉 <em>spring</em> 的同学肯定很熟悉 <em>MethodInterceptor</em> 了，这个是 <em>spring</em> 的方法拦截器，主要看 <em>invoke</em> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(<span class=\"keyword\">final</span> MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Work out the target class: may be &#123;@code null&#125;.</span></span><br><span class=\"line\">    <span class=\"comment\">// The TransactionAttributeSource should be passed the target class</span></span><br><span class=\"line\">    <span class=\"comment\">// as well as the method, which may be from an interface.</span></span><br><span class=\"line\">    Class&lt;?&gt; targetClass = (invocation.getThis() != <span class=\"keyword\">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用TransactionAspectSupport的 invokeWithinTransaction方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> invokeWithinTransaction(invocation.getMethod(), targetClass, <span class=\"keyword\">new</span> InvocationCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">proceedWithInvocation</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> invocation.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图 <em>TransactionInterceptor</em> 复写 <em>MethodInterceptor</em> 接口的 <em>invoke</em> 方法，并在 <em>invoke</em> 方法中调用了父类 <em>TransactionAspectSupport</em>的 <code>invokeWithinTransaction()</code> 方法，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">invokeWithinTransaction</span><span class=\"params\">(Method method, Class&lt;?&gt; targetClass, <span class=\"keyword\">final</span> InvocationCallback invocation)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果transaction attribute为空,该方法就是非事务（非编程式事务）</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> TransactionAttribute txAttr = getTransactionAttributeSource().getTransactionAttribute(method, targetClass);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> PlatformTransactionManager tm = determineTransactionManager(txAttr);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> String joinpointIdentification = methodIdentification(method, targetClass, txAttr);</span><br><span class=\"line\">　　　　 <span class=\"comment\">// 标准声明式事务：如果事务属性为空 或者 非回调偏向的事务管理器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (txAttr == <span class=\"keyword\">null</span> || !(tm <span class=\"keyword\">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Standard transaction demarcation with getTransaction and commit/rollback calls.</span></span><br><span class=\"line\">        TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class=\"line\">        Object retVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里就是一个环绕增强，在这个proceed前后可以自己定义增强实现</span></span><br><span class=\"line\">            <span class=\"comment\">// 方法执行</span></span><br><span class=\"line\">            retVal = invocation.proceedWithInvocation();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据事务定义的，该异常需要回滚就回滚，否则提交事务</span></span><br><span class=\"line\">            completeTransactionAfterThrowing(txInfo, ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;<span class=\"comment\">//清空当前事务信息，重置为老的</span></span><br><span class=\"line\">            cleanupTransactionInfo(txInfo);</span><br><span class=\"line\">        &#125;<span class=\"comment\">//返回结果之前提交事务</span></span><br><span class=\"line\">        commitTransactionAfterReturning(txInfo);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　　　 <span class=\"comment\">// 编程式事务：（回调偏向）</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ThrowableHolder throwableHolder = <span class=\"keyword\">new</span> ThrowableHolder();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// It's a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> TransactionCallback&lt;Object&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                            TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> invocation.proceedWithInvocation();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">catch</span> (Throwable ex) &#123;<span class=\"comment\">// 如果该异常需要回滚</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (txAttr.rollbackOn(ex)) &#123;</span><br><span class=\"line\">                                    <span class=\"comment\">// 如果是运行时异常返回</span></span><br><span class=\"line\">                                    <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">throw</span> (RuntimeException) ex;</span><br><span class=\"line\">                                    &#125;<span class=\"comment\">// 如果是其它异常都抛ThrowableHolderException</span></span><br><span class=\"line\">                                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ThrowableHolderException(ex);</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;<span class=\"comment\">// 如果不需要回滚</span></span><br><span class=\"line\">                                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                    <span class=\"comment\">// 定义异常，最终就直接提交事务了</span></span><br><span class=\"line\">                                    throwableHolder.throwable = ex;</span><br><span class=\"line\">                                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">finally</span> &#123;<span class=\"comment\">//清空当前事务信息，重置为老的</span></span><br><span class=\"line\">                                cleanupTransactionInfo(txInfo);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 上抛异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (throwableHolder.throwable != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> throwableHolder.throwable;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (ThrowableHolderException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex.getCause();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (TransactionSystemException ex2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (throwableHolder.throwable != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">\"Application exception overridden by commit exception\"</span>, throwableHolder.throwable);</span><br><span class=\"line\">                ex2.initApplicationException(throwableHolder.throwable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable ex2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (throwableHolder.throwable != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">\"Application exception overridden by commit exception\"</span>, throwableHolder.throwable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，我们主要看第一个分支，申明式事务，核心流程如下：</p>\n<ol>\n<li><code>createTransactionIfNecessary()</code>:如果有必要，创建事务</li>\n<li><em>InvocationCallback</em> 的 <code>proceedWithInvocation()</code>：<em>InvocationCallback</em> 是父类的内部回调接口，子类中实现该接口供父类调用，子类 <em>TransactionInterceptor</em> 中 <code>invocation.proceed()</code>。回调方法执行</li>\n<li>异常回滚 <code>completeTransactionAfterThrowing()</code></li>\n</ol>\n<h5 id=\"1-createTransactionIfNecessary\"><a href=\"#1-createTransactionIfNecessary\" class=\"headerlink\" title=\"1.createTransactionIfNecessary():\"></a>1.createTransactionIfNecessary():</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> TransactionInfo <span class=\"title\">createTransactionIfNecessary</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            PlatformTransactionManager tm, TransactionAttribute txAttr, <span class=\"keyword\">final</span> String joinpointIdentification)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果还没有定义名字，把连接点的ID定义成事务的名称</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (txAttr != <span class=\"keyword\">null</span> &amp;&amp; txAttr.getName() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        txAttr = <span class=\"keyword\">new</span> DelegatingTransactionAttribute(txAttr) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> joinpointIdentification;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TransactionStatus status = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (txAttr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            status = tm.getTransaction(txAttr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Skipping transactional joinpoint [\"</span> + joinpointIdentification +</span><br><span class=\"line\">                        <span class=\"string\">\"] because no transaction manager has been configured\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>核心就是：</p>\n<ul>\n<li>1）<code>getTransaction()</code>，根据事务属性获取事务 <em>TransactionStatus</em>，大道归一，都是调用 <code>PlatformTransactionManager.getTransaction()</code>，源码见<a href=\"#2.3.1\">2.3.1</a>。</li>\n<li>2）<code>prepareTransactionInfo()</code>,构造一个 <em>TransactionInfo</em> 事务信息对象，绑定当前线程：<code>ThreadLocal&lt;TransactionInfo&gt;</code>。</li>\n</ul>\n<h5 id=\"2-invocation-proceed-回调业务方法\"><a href=\"#2-invocation-proceed-回调业务方法\" class=\"headerlink\" title=\"2.invocation.proceed()回调业务方法:\"></a>2.invocation.proceed()回调业务方法:</h5><p>最终实现类是 <em>ReflectiveMethodInvocation</em>，类图如下：<br><img src=\"/2020-12-03/spring-transaction/584866-20180917161011294-1859782822.png\" alt=\"2-6\"></p>\n<p>如上图，<em>ReflectiveMethodInvocation</em> 类实现了 <em>ProxyMethodInvocation</em> 接口，但是 <em>ProxyMethodInvocation</em> 继承了3层接口…<code>ProxyMethodInvocation-&gt;MethodInvocation-&gt;Invocation-&gt;Joinpoint</code></p>\n<ul>\n<li><em>Joinpoint</em>：连接点接口，定义了执行接口：<code>Object proceed() throws Throwable</code>; 执行当前连接点，并跳到拦截器链上的下一个拦截器。</li>\n<li><em>Invocation</em>：调用接口，继承自 <em>Joinpoint</em>，定义了获取参数接口： <code>Object[] getArguments();</code> 是一个带参数的、可被拦截器拦截的连接点。</li>\n<li><em>MethodInvocation</em>：方法调用接口，继承自 <em>Invocation</em>，定义了获取方法接口：<code>Method getMethod();</code> 是一个带参数的可被拦截的连接点方法。</li>\n<li><em>ProxyMethodInvocation</em>：代理方法调用接口，继承自 <em>MethodInvocation</em>，定义了获取代理对象接口：<code>Object getProxy();</code> 是一个由代理类执行的方法调用连接点方法。</li>\n<li><em>ReflectiveMethodInvocation</em>: 实现了 <em>ProxyMethodInvocation</em> 接口，自然就实现了父类接口的的所有接口。获取代理类，获取方法，获取参数，用代理类执行这个方法并且自动跳到下一个连接点。</li>\n</ul>\n<p>下面看一下 <em>proceed</em> 方法源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">proceed</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//    启动时索引为-1，唤醒连接点，后续递增</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentInterceptorIndex == <span class=\"keyword\">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokeJoinpoint();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object interceptorOrInterceptionAdvice =</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class=\"keyword\">this</span>.currentInterceptorIndex);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (interceptorOrInterceptionAdvice <span class=\"keyword\">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里进行动态方法匹配校验，静态的方法匹配早已经校验过了（MethodMatcher接口有两种典型：动态/静态校验）</span></span><br><span class=\"line\">        InterceptorAndDynamicMethodMatcher dm =</span><br><span class=\"line\">                (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dm.methodMatcher.matches(<span class=\"keyword\">this</span>.method, <span class=\"keyword\">this</span>.targetClass, <span class=\"keyword\">this</span>.arguments)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dm.interceptor.invoke(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 动态匹配失败，跳过当前拦截，进入下一个（拦截器链）</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 它是一个拦截器，所以我们只调用它:在构造这个对象之前，切入点将被静态地计算。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>咱们这里最终调用的是 <code>((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);</code> 就是 <em>TransactionInterceptor</em> 事务拦截器回调 目标业务方法<code>（addUserBalanceAndUser）</code>。</p>\n<p><strong>3.completeTransactionAfterThrowing()</strong><br>最终调用 <em>AbstractPlatformTransactionManager</em> 的 <code>rollback()</code>，提交事务 <code>commitTransactionAfterReturning()</code> 最终调用<em>AbstractPlatformTransactionManager</em> 的 <code>commit()</code>,源码见<a href=\"#2.3.2\">2.3.2</a></p>\n<p>总结：<br>可见不管是编程式事务，还是声明式事务，最终源码都是调用事务管理器的 <em>PlatformTransactionManager</em> 接口的3个方法：</p>\n<ol>\n<li><em>getTransaction</em></li>\n<li><em>commit</em></li>\n<li><em>rollback</em><br>下一节我们就来看看这个事务管理如何实现这3个方法。</li>\n</ol>\n<h2 id=\"事务核心源码\"><a href=\"#事务核心源码\" class=\"headerlink\" title=\"事务核心源码\"></a>事务核心源码</h2><p>咱们看一下核心类图：<br><img src=\"/2020-12-03/spring-transaction/584866-20180906161402774-1489010672.png\" alt=\"2-7\"></p>\n<p>如上提所示，<em>PlatformTransactionManager</em> 顶级接口定义了最核心的事务管理方法，下面一层是 <em>AbstractPlatformTransactionManager</em> 抽象类，实现了 <em>PlatformTransactionManager</em> 接口的方法并定义了一些抽象方法，供子类拓展。最后下面一层是2个经典事务管理器：</p>\n<ol>\n<li><em>DataSourceTransactionmanager</em>,即 <em>JDBC</em> 单数据库事务管理器，基于 <em>Connection</em> 实现，</li>\n<li><em>JtaTransactionManager</em>,即多数据库事务管理器（又叫做分布式事务管理器），其实现了 <em>JTA</em> 规范，使用 <em>XA</em> 协议进行两阶段提交。<br>我们这里只看基于 <em>JDBC connection</em> 的 <em>DataSourceTransactionmanager</em> 源码。</li>\n</ol>\n<p><strong>PlatformTransactionManager接口</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PlatformTransactionManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取事务状态</span></span><br><span class=\"line\">    <span class=\"function\">TransactionStatus <span class=\"title\">getTransaction</span><span class=\"params\">(TransactionDefinition definition)</span> <span class=\"keyword\">throws</span> TransactionException</span>;</span><br><span class=\"line\">　　<span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;</span><br><span class=\"line\">　　<span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rollback</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-getTransaction获取事务\"><a href=\"#1-getTransaction获取事务\" class=\"headerlink\" title=\" 1. getTransaction获取事务\"></a><span id=\"2.3.1\"> 1. getTransaction获取事务</span></h3><p><img src=\"/2020-12-03/spring-transaction/584866-20181129183338568-2047123961.png\" alt=\"2-8\"></p>\n<p><em>AbstractPlatformTransactionManager</em> 实现了 <code>getTransaction()</code> 方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> TransactionStatus <span class=\"title\">getTransaction</span><span class=\"params\">(TransactionDefinition definition)</span> <span class=\"keyword\">throws</span> TransactionException </span>&#123;</span><br><span class=\"line\">    Object transaction = doGetTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cache debug flag to avoid repeated checks.</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (definition == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Use defaults if no transaction definition given.</span></span><br><span class=\"line\">        definition = <span class=\"keyword\">new</span> DefaultTransactionDefinition();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　　　  <span class=\"comment\">// 如果当前已经存在事务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isExistingTransaction(transaction)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据不同传播机制不同处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 超时不能小于默认值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidTimeoutException(<span class=\"string\">\"Invalid transaction timeout\"</span>, definition.getTimeout());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前不存在事务，传播机制=MANDATORY（支持当前事务，没事务报错），报错</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalTransactionStateException(</span><br><span class=\"line\">                <span class=\"string\">\"No existing transaction found for transaction marked with propagation 'mandatory'\"</span>);</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 当前不存在事务，传播机制=REQUIRED/REQUIRED_NEW/NESTED,这三种情况，需要新开启事务，且加上事务同步</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class=\"line\">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class=\"line\">            definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class=\"line\">        SuspendedResourcesHolder suspendedResources = suspend(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (debugEnabled) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Creating new transaction with name [\"</span> + definition.getName() + <span class=\"string\">\"]: \"</span> + definition);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;<span class=\"comment\">// 是否需要新开启同步// 开启// 开启</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class=\"line\">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class=\"line\">                    definition, transaction, <span class=\"keyword\">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class=\"line\">            doBegin(transaction, definition);<span class=\"comment\">// 开启新事务</span></span><br><span class=\"line\">            prepareSynchronization(status, definition);<span class=\"comment\">//预备同步</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RuntimeException ex) &#123;</span><br><span class=\"line\">            resume(<span class=\"keyword\">null</span>, suspendedResources);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error err) &#123;</span><br><span class=\"line\">            resume(<span class=\"keyword\">null</span>, suspendedResources);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前不存在事务当前不存在事务，且传播机制=PROPAGATION_SUPPORTS/PROPAGATION_NOT_SUPPORTED/PROPAGATION_NEVER，这三种情况，创建“空”事务:没有实际事务，但可能是同步。警告：定义了隔离级别，但并没有真实的事务初始化，隔离级别被忽略有隔离级别但是并没有定义实际的事务初始化，有隔离级别但是并没有定义实际的事务初始化，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">\"Custom isolation level specified but no actual transaction initiated; \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"isolation level will effectively be ignored: \"</span> + definition);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prepareTransactionStatus(definition, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>, newSynchronization, debugEnabled, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，源码分成了2条处理线，</p>\n<ol>\n<li>当前已存在事务：<code>isExistingTransaction()</code> 判断是否存在事务，存在事务 <code>handleExistingTransaction()</code> 根据不同传播机制不同处理</li>\n<li>当前不存在事务: 不同传播机制不同处理</li>\n</ol>\n<p><code>handleExistingTransaction()</code> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TransactionStatus <span class=\"title\">handleExistingTransaction</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            TransactionDefinition definition, Object transaction, <span class=\"keyword\">boolean</span> debugEnabled)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> TransactionException </span>&#123;</span><br><span class=\"line\">　　　　　<span class=\"comment\">// 1.NERVER（不支持当前事务;如果当前事务存在，抛出异常）报错</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalTransactionStateException(</span><br><span class=\"line\">                <span class=\"string\">\"Existing transaction found for transaction marked with propagation 'never'\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　　　  <span class=\"comment\">// 2.NOT_SUPPORTED（不支持当前事务，现有同步将被挂起）挂起当前事务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (debugEnabled) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Suspending current transaction\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object suspendedResources = suspend(transaction);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prepareTransactionStatus(</span><br><span class=\"line\">                definition, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　　　  <span class=\"comment\">// 3.REQUIRES_NEW挂起当前事务，创建新事务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (debugEnabled) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Suspending current transaction, creating new transaction with name [\"</span> +</span><br><span class=\"line\">                    definition.getName() + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 挂起当前事务</span></span><br><span class=\"line\">        SuspendedResourcesHolder suspendedResources = suspend(transaction);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;<span class=\"comment\">// 创建新事务</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class=\"line\">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class=\"line\">                    definition, transaction, <span class=\"keyword\">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class=\"line\">            doBegin(transaction, definition);</span><br><span class=\"line\">            prepareSynchronization(status, definition);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RuntimeException beginEx) &#123;</span><br><span class=\"line\">            resumeAfterBeginException(transaction, suspendedResources, beginEx);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> beginEx;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error beginErr) &#123;</span><br><span class=\"line\">            resumeAfterBeginException(transaction, suspendedResources, beginErr);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> beginErr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　　　 <span class=\"comment\">// 4.NESTED嵌套事务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isNestedTransactionAllowed()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedTransactionNotSupportedException(</span><br><span class=\"line\">                    <span class=\"string\">\"Transaction manager does not allow nested transactions by default - \"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"specify 'nestedTransactionAllowed' property with value 'true'\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (debugEnabled) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Creating nested transaction with name [\"</span> + definition.getName() + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 是否支持保存点：非JTA事务走这个分支。AbstractPlatformTransactionManager默认是true，JtaTransactionManager复写了该方法false，DataSourceTransactionmanager没有复写，还是true,</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (useSavepointForNestedTransaction()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span></span><br><span class=\"line\">            DefaultTransactionStatus status =</span><br><span class=\"line\">                    prepareTransactionStatus(definition, transaction, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, debugEnabled, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            status.createAndHoldSavepoint();<span class=\"comment\">// 创建保存点</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// JTA事务走这个分支，创建新事务</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class=\"line\">            DefaultTransactionStatus status = newTransactionStatus(</span><br><span class=\"line\">                    definition, transaction, <span class=\"keyword\">true</span>, newSynchronization, debugEnabled, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            doBegin(transaction, definition);</span><br><span class=\"line\">            prepareSynchronization(status, definition);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (debugEnabled) &#123;</span><br><span class=\"line\">        logger.debug(<span class=\"string\">\"Participating in existing transaction\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isValidateExistingTransaction()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123;</span><br><span class=\"line\">            Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentIsolationLevel == <span class=\"keyword\">null</span> || currentIsolationLevel != definition.getIsolationLevel()) &#123;</span><br><span class=\"line\">                Constants isoConstants = DefaultTransactionDefinition.constants;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalTransactionStateException(<span class=\"string\">\"Participating transaction with definition [\"</span> +</span><br><span class=\"line\">                        definition + <span class=\"string\">\"] specifies isolation level which is incompatible with existing transaction: \"</span> +</span><br><span class=\"line\">                        (currentIsolationLevel != <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                                isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :</span><br><span class=\"line\">                                <span class=\"string\">\"(unknown)\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!definition.isReadOnly()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalTransactionStateException(<span class=\"string\">\"Participating transaction with definition [\"</span> +</span><br><span class=\"line\">                        definition + <span class=\"string\">\"] is not marked as read-only but existing transaction is\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 到这里PROPAGATION_SUPPORTS 或 PROPAGATION_REQUIRED或PROPAGATION_MANDATORY，存在事务加入事务即可，prepareTransactionStatus第三个参数就是是否需要新事务。false代表不需要新事物</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prepareTransactionStatus(definition, transaction, <span class=\"keyword\">false</span>, newSynchronization, debugEnabled, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，当前线程已存在事务情况下，新的不同隔离级别处理情况：</p>\n<ol>\n<li><strong>NERVER</strong>：不支持当前事务;如果当前事务存在，抛出异常:”Existing transaction found for transaction marked with propagation ‘never’”</li>\n<li><strong>NOT_SUPPORTED</strong>：不支持当前事务，现有同步将被挂起:suspend()</li>\n<li><strong>REQUIRES_NEW</strong> 挂起当前事务，创建新事务:<ul>\n<li>1) <code>suspend()</code></li>\n<li>2) <code>doBegin()</code></li>\n</ul>\n</li>\n<li><strong>NESTED</strong> 嵌套事务<ul>\n<li>1）非 <em>JTA</em> 事务：<code>createAndHoldSavepoint()</code> 创建 <em>JDBC3.0</em> 保存点，不需要同步</li>\n<li>2) <em>JTA</em> 事务：开启新事务，<code>doBegin()+prepareSynchronization()</code> 需要同步</li>\n</ul>\n</li>\n</ol>\n<p>这里有几个核心方法：挂起当前事务 <code>suspend(</code>)、开启新事务 <code>doBegin()</code>。<br><code>suspend()</code> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> SuspendedResourcesHolder <span class=\"title\">suspend</span><span class=\"params\">(Object transaction)</span> <span class=\"keyword\">throws</span> TransactionException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;<span class=\"comment\">// 1.当前存在同步，</span></span><br><span class=\"line\">        List&lt;TransactionSynchronization&gt; suspendedSynchronizations = doSuspendSynchronization();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Object suspendedResources = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (transaction != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 事务不为空，挂起事务</span></span><br><span class=\"line\">                suspendedResources = doSuspend(transaction);</span><br><span class=\"line\">            &#125;<span class=\"comment\">// 解除绑定当前事务各种属性：名称、只读、隔离级别、是否是真实的事务.</span></span><br><span class=\"line\">            String name = TransactionSynchronizationManager.getCurrentTransactionName();</span><br><span class=\"line\">            TransactionSynchronizationManager.setCurrentTransactionName(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();</span><br><span class=\"line\">            TransactionSynchronizationManager.setCurrentTransactionReadOnly(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            Integer isolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class=\"line\">            TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class=\"line\">            TransactionSynchronizationManager.setActualTransactionActive(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SuspendedResourcesHolder(</span><br><span class=\"line\">                    suspendedResources, suspendedSynchronizations, name, readOnly, isolationLevel, wasActive);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RuntimeException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// doSuspend failed - original transaction is still active...</span></span><br><span class=\"line\">            doResumeSynchronization(suspendedSynchronizations);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error err) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// doSuspend failed - original transaction is still active...</span></span><br><span class=\"line\">            doResumeSynchronization(suspendedSynchronizations);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 2.没有同步但，事务不为空，挂起事务</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (transaction != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Transaction active but no synchronization active.</span></span><br><span class=\"line\">        Object suspendedResources = doSuspend(transaction);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SuspendedResourcesHolder(suspendedResources);</span><br><span class=\"line\">    &#125;<span class=\"comment\">// 2.没有同步但，事务为空，什么都不用做</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Neither transaction nor synchronization active.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>doSuspend()</code>,挂起事务，<em>AbstractPlatformTransactionManager</em> 抽象类 <code>doSuspend()</code> 会报错：不支持挂起，如果具体事务执行器支持就复写 <code>doSuspend()</code>，<em>DataSourceTransactionManager</em> 实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doSuspend</span><span class=\"params\">(Object transaction)</span> </span>&#123;</span><br><span class=\"line\">    DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class=\"line\">    txObject.setConnectionHolder(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TransactionSynchronizationManager.unbindResource(<span class=\"keyword\">this</span>.dataSource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>挂起 <em>DataSourceTransactionManager</em> 事务的核心操作就是:</p>\n<ol>\n<li>把当前事务的 <em>connectionHolder</em> 数据库连接持有者清空。</li>\n<li>当前线程解绑 <em>datasource</em>.其实就是 <em>ThreadLocal</em>移除对应变量（<em>TransactionSynchronizationManager</em>类中定义的 <code>private static final ThreadLocal&lt;Map&lt;Object, Object&gt;&gt; resources = new NamedThreadLocal&lt;Map&lt;Object, Object&gt;&gt;(&quot;Transactional resources&quot;);</code>）</li>\n</ol>\n<p><em>TransactionSynchronizationManager</em> 事务同步管理器，该类维护了多个线程本地变量 <em>ThreadLocal</em>，如下图：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionSynchronizationManager</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log logger = LogFactory.getLog(TransactionSynchronizationManager.class);</span><br><span class=\"line\">    <span class=\"comment\">// 事务资源：map&lt;k,v&gt; 两种数据对。1.会话工厂和会话k=SqlsessionFactory v=SqlSessionHolder 2.数据源和连接k=DataSource v=ConnectionHolder</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Map&lt;Object, Object&gt;&gt; resources =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> NamedThreadLocal&lt;Map&lt;Object, Object&gt;&gt;(<span class=\"string\">\"Transactional resources\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 事务同步</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt; synchronizations =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> NamedThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt;(<span class=\"string\">\"Transaction synchronizations\"</span>);</span><br><span class=\"line\">　　<span class=\"comment\">// 当前事务名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;String&gt; currentTransactionName =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> NamedThreadLocal&lt;String&gt;(<span class=\"string\">\"Current transaction name\"</span>);</span><br><span class=\"line\">　　<span class=\"comment\">// 当前事务的只读属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Boolean&gt; currentTransactionReadOnly =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> NamedThreadLocal&lt;Boolean&gt;(<span class=\"string\">\"Current transaction read-only status\"</span>);</span><br><span class=\"line\">　　<span class=\"comment\">// 当前事务的隔离级别</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Integer&gt; currentTransactionIsolationLevel =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> NamedThreadLocal&lt;Integer&gt;(<span class=\"string\">\"Current transaction isolation level\"</span>);</span><br><span class=\"line\">　　<span class=\"comment\">// 是否存在事务</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Boolean&gt; actualTransactionActive =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> NamedThreadLocal&lt;Boolean&gt;(<span class=\"string\">\"Actual transaction active\"</span>);</span><br><span class=\"line\">。。。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>doBegin()</code> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doBegin</span><span class=\"params\">(Object transaction, TransactionDefinition definition)</span> </span>&#123;</span><br><span class=\"line\">    DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class=\"line\">    Connection con = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;<span class=\"comment\">// 如果事务还没有connection或者connection在事务同步状态，重置新的connectionHolder</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!txObject.hasConnectionHolder() ||</span><br><span class=\"line\">                txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class=\"line\">            Connection newCon = <span class=\"keyword\">this</span>.dataSource.getConnection();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Acquired Connection [\"</span> + newCon + <span class=\"string\">\"] for JDBC transaction\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"comment\">// 重置新的connectionHolder</span></span><br><span class=\"line\">            txObject.setConnectionHolder(<span class=\"keyword\">new</span> ConnectionHolder(newCon), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">　　　　　　　<span class=\"comment\">//设置新的连接为事务同步中</span></span><br><span class=\"line\">        txObject.getConnectionHolder().setSynchronizedWithTransaction(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        con = txObject.getConnectionHolder().getConnection();</span><br><span class=\"line\">　　　　     <span class=\"comment\">//conn设置事务隔离级别,只读</span></span><br><span class=\"line\">        Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class=\"line\">        txObject.setPreviousIsolationLevel(previousIsolationLevel);<span class=\"comment\">//DataSourceTransactionObject设置事务隔离级别</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果是自动提交切换到手动提交</span></span><br><span class=\"line\">        <span class=\"comment\">// so we don't want to do it unnecessarily (for example if we've explicitly</span></span><br><span class=\"line\">        <span class=\"comment\">// configured the connection pool to set it already).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (con.getAutoCommit()) &#123;</span><br><span class=\"line\">            txObject.setMustRestoreAutoCommit(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Switching JDBC Connection [\"</span> + con + <span class=\"string\">\"] to manual commit\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            con.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">　　　　　　　<span class=\"comment\">// 如果只读，执行sql设置事务只读</span></span><br><span class=\"line\">        prepareTransactionalConnection(con, definition);</span><br><span class=\"line\">        txObject.getConnectionHolder().setTransactionActive(<span class=\"keyword\">true</span>);<span class=\"comment\">// 设置connection持有者的事务开启状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> timeout = determineTimeout(definition);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class=\"line\">            txObject.getConnectionHolder().setTimeoutInSeconds(timeout);<span class=\"comment\">// 设置超时秒数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 绑定connection持有者到当前线程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class=\"line\">            TransactionSynchronizationManager.bindResource(getDataSource(), txObject.getConnectionHolder());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class=\"line\">            DataSourceUtils.releaseConnection(con, <span class=\"keyword\">this</span>.dataSource);</span><br><span class=\"line\">            txObject.setConnectionHolder(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CannotCreateTransactionException(<span class=\"string\">\"Could not open JDBC Connection for transaction\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，开启新事务的准备工作 <code>doBegin()</code> 的核心操作就是：</p>\n<ol>\n<li><em>DataSourceTransactionObject</em> “数据源事务对象”，设置 <em>ConnectionHolder</em>,再给 <em>ConnectionHolder</em> 设置各种属性：自动提交、超时、事务开启、隔离级别。</li>\n<li>给当前线程绑定一个线程本地变量，<code>key=DataSource</code> 数据源 <code>v=ConnectionHolder</code> 数据库连接。</li>\n</ol>\n<h3 id=\"2-commit提交事务\"><a href=\"#2-commit提交事务\" class=\"headerlink\" title=\" 2. commit提交事务\"></a><span id=\"2.3.2\"> 2. commit提交事务</span></h3><p>一、讲解源码之前先看一下资源管理类：<br><em>SqlSessionSynchronization</em> 是 <em>SqlSessionUtils</em> 的一个内部类，继承自 <em>TransactionSynchronizationAdapter</em> 抽象类，实现了事务同步接口 <em>TransactionSynchronization</em>。</p>\n<p>类图如下：<br><img src=\"/2020-12-03/spring-transaction/584866-20180919151553950-212649457.png\" alt=\"2-9\"><br><em>TransactionSynchronization</em> 接口定义了事务操作时的对应资源的（<em>JDBC</em> 事务那么就是 <em>SqlSessionSynchronization</em>）管理方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 挂起事务 　　 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suspend</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 唤醒事务 　　 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resume</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交事务前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">beforeCommit</span><span class=\"params\">(<span class=\"keyword\">boolean</span> readOnly)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交事务完成前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">beforeCompletion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交事务后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterCommit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交事务完成后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>后续很多都是使用这些接口管理事务。</p>\n<p><img src=\"/2020-12-03/spring-transaction/584866-20190531151800481-1842324960.png\" alt=\"2-10\"><br><em>AbstractPlatformTransactionManager</em> 的 <em>commit</em> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">commit</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status.isCompleted()) &#123;<span class=\"comment\">// 如果事务已完结，报错无法再次提交</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalTransactionStateException(</span><br><span class=\"line\">                <span class=\"string\">\"Transaction is already completed - do not call commit or rollback more than once per transaction\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (defStatus.isLocalRollbackOnly()) &#123;<span class=\"comment\">// 如果事务明确标记为回滚，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (defStatus.isDebug()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Transactional code has requested rollback\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        processRollback(defStatus);<span class=\"comment\">//执行回滚</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//如果不需要全局回滚时提交 且 全局回滚</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (defStatus.isDebug()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Global transaction is marked as rollback-only but transactional code requested commit\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"comment\">//执行回滚</span></span><br><span class=\"line\">        processRollback(defStatus);</span><br><span class=\"line\">        <span class=\"comment\">// 仅在最外层事务边界（新事务）或显式地请求时抛出“未期望的回滚异常”</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnexpectedRollbackException(</span><br><span class=\"line\">                    <span class=\"string\">\"Transaction rolled back because it has been marked as rollback-only\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">　　　　 <span class=\"comment\">// 执行提交事务</span></span><br><span class=\"line\">    processCommit(defStatus);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，各种判断：</p>\n<ol>\n<li>如果事务明确标记为本地回滚，-》执行回滚</li>\n<li>如果不需要全局回滚时提交 且 全局回滚-》执行回滚</li>\n<li>提交事务，核心方法 <code>processCommit()</code></li>\n</ol>\n<p><em>processCommit</em> 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processCommit</span><span class=\"params\">(DefaultTransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> beforeCompletionInvoked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;<span class=\"comment\">//3个前置操作</span></span><br><span class=\"line\">            prepareForCommit(status);</span><br><span class=\"line\">            triggerBeforeCommit(status);</span><br><span class=\"line\">            triggerBeforeCompletion(status);</span><br><span class=\"line\">            beforeCompletionInvoked = <span class=\"keyword\">true</span>;<span class=\"comment\">//3个前置操作已调用</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> globalRollbackOnly = <span class=\"keyword\">false</span>;<span class=\"comment\">//新事务 或 全局回滚失败</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class=\"line\">                globalRollbackOnly = status.isGlobalRollbackOnly();</span><br><span class=\"line\">            &#125;<span class=\"comment\">//1.有保存点，即嵌套事务</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status.hasSavepoint()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">                    logger.debug(<span class=\"string\">\"Releasing transaction savepoint\"</span>);</span><br><span class=\"line\">                &#125;<span class=\"comment\">//释放保存点</span></span><br><span class=\"line\">                status.releaseHeldSavepoint();</span><br><span class=\"line\">            &#125;<span class=\"comment\">//2.新事务</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status.isNewTransaction()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">                    logger.debug(<span class=\"string\">\"Initiating transaction commit\"</span>);</span><br><span class=\"line\">                &#125;<span class=\"comment\">//调用事务处理器提交事务</span></span><br><span class=\"line\">                doCommit(status);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3.非新事务，且全局回滚失败，但是提交时没有得到异常，抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (globalRollbackOnly) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnexpectedRollbackException(</span><br><span class=\"line\">                        <span class=\"string\">\"Transaction silently rolled back because it has been marked as rollback-only\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (UnexpectedRollbackException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 触发完成后事务同步，状态为回滚</span></span><br><span class=\"line\">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 事务异常</span></span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (TransactionException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 提交失败回滚</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isRollbackOnCommitFailure()) &#123;</span><br><span class=\"line\">                doRollbackOnCommitException(status, ex);</span><br><span class=\"line\">            &#125;<span class=\"comment\">// 触发完成后回调，事务同步状态为未知</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 运行时异常</span></span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RuntimeException ex) &#123;　　　　　　　　　　　　<span class=\"comment\">// 如果3个前置步骤未完成，调用前置的最后一步操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class=\"line\">                triggerBeforeCompletion(status);</span><br><span class=\"line\">            &#125;<span class=\"comment\">// 提交异常回滚</span></span><br><span class=\"line\">            doRollbackOnCommitException(status, ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 其它异常</span></span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error err) &#123;　　　　　　　　　　　　　　<span class=\"comment\">// 如果3个前置步骤未完成，调用前置的最后一步操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class=\"line\">                triggerBeforeCompletion(status);</span><br><span class=\"line\">            &#125;<span class=\"comment\">// 提交异常回滚</span></span><br><span class=\"line\">            doRollbackOnCommitException(status, err);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Trigger afterCommit callbacks, with an exception thrown there</span></span><br><span class=\"line\">        <span class=\"comment\">// propagated to callers but the transaction still considered as committed.</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            triggerAfterCommit(status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        cleanupAfterCompletion(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，<em>commit</em> 事务时，有6个核心操作，分别是3个前置操作，3个后置操作，如下：</p>\n<ol>\n<li><code>prepareForCommit(status);</code> 源码是空的，没有拓展目前。</li>\n<li><code>triggerBeforeCommit(status);</code> 提交前触发操作</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">triggerBeforeCommit</span><span class=\"params\">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status.isNewSynchronization()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">\"Triggering beforeCommit synchronization\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TransactionSynchronizationUtils.triggerBeforeCommit(status.isReadOnly());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>triggerBeforeCommit</em> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">triggerBeforeCommit</span><span class=\"params\">(<span class=\"keyword\">boolean</span> readOnly)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (TransactionSynchronization synchronization : TransactionSynchronizationManager.getSynchronizations()) &#123;</span><br><span class=\"line\">        synchronization.beforeCommit(readOnly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 如上图，<em>TransactionSynchronizationManager</em> 类定义了多个 <em>ThreadLocal</em>（线程本地变量），其中一个用以保存当前线程的事务同步：<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt; synchronizations = <span class=\"keyword\">new</span> NamedThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt;(<span class=\"string\">\"Transaction synchronizations\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p> 遍历事务同步器，把每个事务同步器都执行“提交前”操作，比如咱们用的 <em>jdbc</em> 事务，那么最终就是 <code>SqlSessionUtils.beforeCommit()-&gt;this.holder.getSqlSession().commit();</code> 提交会话。(源码由于是 <em>spring</em> 管理实务，最终不会执行事务提交，例如是<em>DefaultSqlSession</em>：执行清除缓存、重置状态操作)</p>\n<ol start=\"3\">\n<li><code>triggerBeforeCompletion(status);</code> 完成前触发操作，如果是jdbc事务，那么最终就是，<code>SqlSessionUtils.beforeCompletion-&gt;TransactionSynchronizationManager.unbindResource(sessionFactory);</code> 解绑当前线程的会话工厂 <code>this.holder.getSqlSession().close();</code> 关闭会话。(源码由于是 <em>spring</em> 管理实务，最终不会执行事务 <em>close</em> 操作，例如是<em>DefaultSqlSession</em>，也会执行各种清除收尾操作)</li>\n<li><code>triggerAfterCommit(status);</code> 提交事务后触发操作。<code>TransactionSynchronizationUtils.triggerAfterCommit();-&gt;TransactionSynchronizationUtils.invokeAfterCommit</code>，如下：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAfterCommit</span><span class=\"params\">(List&lt;TransactionSynchronization&gt; synchronizations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (synchronizations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (TransactionSynchronization synchronization : synchronizations) &#123;</span><br><span class=\"line\">            synchronization.afterCommit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>好吧，一顿找，最后在 <em>TransactionSynchronizationAdapter</em> 中复写过，并且是空的….<em>SqlSessionSynchronization</em> 继承了 <em>TransactionSynchronizationAdapter</em> 但是没有复写这个方法。</p>\n<ol start=\"5\">\n<li><code>triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</code></li>\n</ol>\n<p><code>TransactionSynchronizationUtils.invokeAfterCompletion</code>,如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAfterCompletion</span><span class=\"params\">(List&lt;TransactionSynchronization&gt; synchronizations, <span class=\"keyword\">int</span> completionStatus)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (synchronizations != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (TransactionSynchronization synchronization : synchronizations) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                synchronization.afterCompletion(completionStatus);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Throwable tsex) &#123;</span><br><span class=\"line\">                logger.error(<span class=\"string\">\"TransactionSynchronization.afterCompletion threw exception\"</span>, tsex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>afterCompletion*：对于 *JDBC</em> 事务来说，最终：</p>\n<ul>\n<li>1）如果会话任然活着，关闭会话，</li>\n<li>2）重置各种属性：<em>SQL</em> 会话同步器（<em>SqlSessionSynchronization*）的 *SQL</em> 会话持有者（<em>SqlSessionHolder<em>）的</em>referenceCount</em> 引用计数、<em>synchronizedWithTransaction</em> 同步事务、<em>rollbackOnly</em> 只回滚、<em>deadline</em> 超时时间点。</li>\n</ul>\n<ol start=\"6\">\n<li><code>cleanupAfterCompletion(status);</code></li>\n</ol>\n<ul>\n<li>1）设置事务状态为已完成。</li>\n<li>2)  如果是新的事务同步，解绑当前线程绑定的数据库资源，重置数据库连接</li>\n<li>3）如果存在挂起的事务（嵌套事务），唤醒挂起的老事务的各种资源：数据库资源、同步器。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanupAfterCompletion</span><span class=\"params\">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">    status.setCompleted();<span class=\"comment\">//设置事务状态完成　　　　　　 //如果是新的同步，清空当前线程绑定的除了资源外的全部线程本地变量：包括事务同步器、事务名称、只读属性、隔离级别、真实的事务激活状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status.isNewSynchronization()) &#123;</span><br><span class=\"line\">        TransactionSynchronizationManager.clear();</span><br><span class=\"line\">    &#125;<span class=\"comment\">//如果是新的事务同步</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status.isNewTransaction()) &#123;</span><br><span class=\"line\">        doCleanupAfterCompletion(status.getTransaction());</span><br><span class=\"line\">    &#125;<span class=\"comment\">//如果存在挂起的资源</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status.getSuspendedResources() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Resuming suspended transaction after completion of inner transaction\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"comment\">//唤醒挂起的事务和资源（重新绑定之前挂起的数据库资源，唤醒同步器，注册同步器到TransactionSynchronizationManager）</span></span><br><span class=\"line\">        resume(status.getTransaction(), (SuspendedResourcesHolder) status.getSuspendedResources());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于 <em>DataSourceTransactionManager<em>，</em>doCleanupAfterCompletion</em> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doCleanupAfterCompletion</span><span class=\"params\">(Object transaction)</span> </span>&#123;</span><br><span class=\"line\">    DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果是最新的连接持有者，解绑当前线程绑定的&lt;数据库资源，ConnectionHolder&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class=\"line\">        TransactionSynchronizationManager.unbindResource(<span class=\"keyword\">this</span>.dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置数据库连接（隔离级别、只读）</span></span><br><span class=\"line\">    Connection con = txObject.getConnectionHolder().getConnection();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (txObject.isMustRestoreAutoCommit()) &#123;</span><br><span class=\"line\">            con.setAutoCommit(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DataSourceUtils.resetConnectionAfterTransaction(con, txObject.getPreviousIsolationLevel());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        logger.debug(<span class=\"string\">\"Could not reset JDBC Connection after transaction\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Releasing JDBC Connection [\"</span> + con + <span class=\"string\">\"] after transaction\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 资源引用计数-1，关闭数据库连接</span></span><br><span class=\"line\">        DataSourceUtils.releaseConnection(con, <span class=\"keyword\">this</span>.dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 重置连接持有者的全部属性</span></span><br><span class=\"line\">    txObject.getConnectionHolder().clear();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-rollback回滚事务\"><a href=\"#3-rollback回滚事务\" class=\"headerlink\" title=\"3. rollback回滚事务\"></a>3. rollback回滚事务</h3><p><img src=\"/2020-12-03/spring-transaction/584866-20181129183139113-1982002402.png\" alt=\"2-11\"><br><em>AbstractPlatformTransactionManager</em> 中 <em>rollback</em> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">rollback</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status.isCompleted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalTransactionStateException(</span><br><span class=\"line\">                <span class=\"string\">\"Transaction is already completed - do not call commit or rollback more than once per transaction\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class=\"line\">    processRollback(defStatus);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>processRollback</em> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processRollback</span><span class=\"params\">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;<span class=\"comment\">// 解绑当前线程绑定的会话工厂，并关闭会话</span></span><br><span class=\"line\">            triggerBeforeCompletion(status);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (status.hasSavepoint()) &#123;<span class=\"comment\">// 1.如果有保存点，即嵌套式事务</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">                    logger.debug(<span class=\"string\">\"Rolling back transaction to savepoint\"</span>);</span><br><span class=\"line\">                &#125;<span class=\"comment\">//回滚到保存点</span></span><br><span class=\"line\">                status.rollbackToHeldSavepoint();</span><br><span class=\"line\">            &#125;<span class=\"comment\">//2.如果就是一个简单事务</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status.isNewTransaction()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">                    logger.debug(<span class=\"string\">\"Initiating transaction rollback\"</span>);</span><br><span class=\"line\">                &#125;<span class=\"comment\">//回滚核心方法</span></span><br><span class=\"line\">                doRollback(status);</span><br><span class=\"line\">            &#125;<span class=\"comment\">//3.当前存在事务且没有保存点，即加入当前事务的</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status.hasTransaction()) &#123;<span class=\"comment\">//如果已经标记为回滚 或 当加入事务失败时全局回滚（默认true）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (status.isDebug()) &#123;<span class=\"comment\">//debug时会打印：加入事务失败-标记已存在事务为回滚</span></span><br><span class=\"line\">                        logger.debug(<span class=\"string\">\"Participating transaction failed - marking existing transaction as rollback-only\"</span>);</span><br><span class=\"line\">                    &#125;<span class=\"comment\">//设置当前connectionHolder：当加入一个已存在事务时回滚</span></span><br><span class=\"line\">                    doSetRollbackOnly(status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">                        logger.debug(<span class=\"string\">\"Participating transaction failed - letting transaction originator decide on rollback\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                logger.debug(<span class=\"string\">\"Should roll back transaction but cannot - no transaction available\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RuntimeException ex) &#123;<span class=\"comment\">//关闭会话，重置SqlSessionHolder属性</span></span><br><span class=\"line\">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error err) &#123;</span><br><span class=\"line\">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;、、解绑当前线程</span><br><span class=\"line\">        cleanupAfterCompletion(status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上图，有几个公共方法和提交事务时一致，就不再重复。<br>这里主要看 <em>doRollback<em>，</em>DataSourceTransactionManager</em> 的 <code>doRollback()</code> 源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRollback</span><span class=\"params\">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">    DataSourceTransactionObject txObject = (DataSourceTransactionObject) status.getTransaction();</span><br><span class=\"line\">    Connection con = txObject.getConnectionHolder().getConnection();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status.isDebug()) &#123;</span><br><span class=\"line\">        logger.debug(<span class=\"string\">\"Rolling back JDBC transaction on Connection [\"</span> + con + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        con.rollback();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TransactionSystemException(<span class=\"string\">\"Could not roll back JDBC transaction\"</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好吧，一点不复杂，就是 <em>Connection</em> 的 <em>rollback</em>.</p>\n<h2 id=\"四、时序图\"><a href=\"#四、时序图\" class=\"headerlink\" title=\"四、时序图\"></a>四、时序图</h2><p>特地整理了时序图（简单的新事务，没有画出保存点等情况）如下：<br><img src=\"/2020-12-03/spring-transaction/584866-20180925191041500-2119850677.jpg\" alt=\"时序图\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>《Spring实战4》第四章 面向切面的Spring：<a href=\"https://www.cnblogs.com/jpfss/p/9151313.html\" target=\"_blank\" rel=\"noopener\">SpringBoot事务注解@Transactional</a></p>\n","tags":["transation 事务"]}]